
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000406c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08004178  08004178  00014178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f8  080044f8  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  080044f8  080044f8  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044f8  080044f8  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08004500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce0  200001dc  080046dc  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ebc  080046dc  00020ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca1e  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002715  00000000  00000000  0002cc23  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000948  00000000  00000000  0002f338  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000830  00000000  00000000  0002fc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018ccd  00000000  00000000  000304b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bee  00000000  00000000  0004917d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000839cd  00000000  00000000  00052d6b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d6738  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d28  00000000  00000000  000d67b4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200001dc 	.word	0x200001dc
 8000128:	00000000 	.word	0x00000000
 800012c:	08004160 	.word	0x08004160

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200001e0 	.word	0x200001e0
 8000148:	08004160 	.word	0x08004160

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800015c:	b590      	push	{r4, r7, lr}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	int len = 0;
 8000164:	2300      	movs	r3, #0
 8000166:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	7a1b      	ldrb	r3, [r3, #8]
 800016c:	2b03      	cmp	r3, #3
 800016e:	d102      	bne.n	8000176 <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 8000170:	230c      	movs	r3, #12
 8000172:	60fb      	str	r3, [r7, #12]
 8000174:	e005      	b.n	8000182 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 8000176:	687b      	ldr	r3, [r7, #4]
 8000178:	7a1b      	ldrb	r3, [r3, #8]
 800017a:	2b04      	cmp	r3, #4
 800017c:	d101      	bne.n	8000182 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800017e:	230a      	movs	r3, #10
 8000180:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 8000182:	687b      	ldr	r3, [r7, #4]
 8000184:	330c      	adds	r3, #12
 8000186:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800018a:	f000 fb5a 	bl	8000842 <MQTTstrlen>
 800018e:	4603      	mov	r3, r0
 8000190:	3302      	adds	r3, #2
 8000192:	68fa      	ldr	r2, [r7, #12]
 8000194:	4413      	add	r3, r2
 8000196:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	7edb      	ldrb	r3, [r3, #27]
 800019c:	2b00      	cmp	r3, #0
 800019e:	d013      	beq.n	80001c8 <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	3324      	adds	r3, #36	; 0x24
 80001a4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80001a8:	f000 fb4b 	bl	8000842 <MQTTstrlen>
 80001ac:	4603      	mov	r3, r0
 80001ae:	1c9c      	adds	r4, r3, #2
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	3330      	adds	r3, #48	; 0x30
 80001b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80001b8:	f000 fb43 	bl	8000842 <MQTTstrlen>
 80001bc:	4603      	mov	r3, r0
 80001be:	4423      	add	r3, r4
 80001c0:	3302      	adds	r3, #2
 80001c2:	68fa      	ldr	r2, [r7, #12]
 80001c4:	4413      	add	r3, r2
 80001c6:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d103      	bne.n	80001d8 <MQTTSerialize_connectLength+0x7c>
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d00a      	beq.n	80001ee <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	3340      	adds	r3, #64	; 0x40
 80001dc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80001e0:	f000 fb2f 	bl	8000842 <MQTTstrlen>
 80001e4:	4603      	mov	r3, r0
 80001e6:	3302      	adds	r3, #2
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	4413      	add	r3, r2
 80001ec:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d103      	bne.n	80001fe <MQTTSerialize_connectLength+0xa2>
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d00a      	beq.n	8000214 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	334c      	adds	r3, #76	; 0x4c
 8000202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000206:	f000 fb1c 	bl	8000842 <MQTTstrlen>
 800020a:	4603      	mov	r3, r0
 800020c:	3302      	adds	r3, #2
 800020e:	68fa      	ldr	r2, [r7, #12]
 8000210:	4413      	add	r3, r2
 8000212:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 8000214:	68fb      	ldr	r3, [r7, #12]
}
 8000216:	4618      	mov	r0, r3
 8000218:	3714      	adds	r7, #20
 800021a:	46bd      	mov	sp, r7
 800021c:	bd90      	pop	{r4, r7, pc}
	...

08000220 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	; 0x28
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800022c:	68fb      	ldr	r3, [r7, #12]
 800022e:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 8000230:	2300      	movs	r3, #0
 8000232:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 8000234:	2300      	movs	r3, #0
 8000236:	617b      	str	r3, [r7, #20]
	int len = 0;
 8000238:	2300      	movs	r3, #0
 800023a:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800023c:	f04f 33ff 	mov.w	r3, #4294967295
 8000240:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 8000242:	6878      	ldr	r0, [r7, #4]
 8000244:	f7ff ff8a 	bl	800015c <MQTTSerialize_connectLength>
 8000248:	6238      	str	r0, [r7, #32]
 800024a:	6a38      	ldr	r0, [r7, #32]
 800024c:	f000 f9b2 	bl	80005b4 <MQTTPacket_len>
 8000250:	4602      	mov	r2, r0
 8000252:	68bb      	ldr	r3, [r7, #8]
 8000254:	4293      	cmp	r3, r2
 8000256:	da03      	bge.n	8000260 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000258:	f06f 0301 	mvn.w	r3, #1
 800025c:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800025e:	e0c3      	b.n	80003e8 <MQTTSerialize_connect+0x1c8>
	}

	header.byte = 0;
 8000260:	2300      	movs	r3, #0
 8000262:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 8000264:	7e3b      	ldrb	r3, [r7, #24]
 8000266:	2201      	movs	r2, #1
 8000268:	f362 1307 	bfi	r3, r2, #4, #4
 800026c:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800026e:	7e3a      	ldrb	r2, [r7, #24]
 8000270:	f107 031c 	add.w	r3, r7, #28
 8000274:	4611      	mov	r1, r2
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fa29 	bl	80006ce <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800027c:	69fb      	ldr	r3, [r7, #28]
 800027e:	6a39      	ldr	r1, [r7, #32]
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f92d 	bl	80004e0 <MQTTPacket_encode>
 8000286:	4602      	mov	r2, r0
 8000288:	69fb      	ldr	r3, [r7, #28]
 800028a:	4413      	add	r3, r2
 800028c:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	7a1b      	ldrb	r3, [r3, #8]
 8000292:	2b04      	cmp	r3, #4
 8000294:	d10c      	bne.n	80002b0 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 8000296:	f107 031c 	add.w	r3, r7, #28
 800029a:	4956      	ldr	r1, [pc, #344]	; (80003f4 <MQTTSerialize_connect+0x1d4>)
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fa52 	bl	8000746 <writeCString>
		writeChar(&ptr, (char) 4);
 80002a2:	f107 031c 	add.w	r3, r7, #28
 80002a6:	2104      	movs	r1, #4
 80002a8:	4618      	mov	r0, r3
 80002aa:	f000 fa10 	bl	80006ce <writeChar>
 80002ae:	e00b      	b.n	80002c8 <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 80002b0:	f107 031c 	add.w	r3, r7, #28
 80002b4:	4950      	ldr	r1, [pc, #320]	; (80003f8 <MQTTSerialize_connect+0x1d8>)
 80002b6:	4618      	mov	r0, r3
 80002b8:	f000 fa45 	bl	8000746 <writeCString>
		writeChar(&ptr, (char) 3);
 80002bc:	f107 031c 	add.w	r3, r7, #28
 80002c0:	2103      	movs	r1, #3
 80002c2:	4618      	mov	r0, r3
 80002c4:	f000 fa03 	bl	80006ce <writeChar>
	}

	flags.all = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	7e9b      	ldrb	r3, [r3, #26]
 80002d0:	f003 0301 	and.w	r3, r3, #1
 80002d4:	b2da      	uxtb	r2, r3
 80002d6:	7d3b      	ldrb	r3, [r7, #20]
 80002d8:	f362 0341 	bfi	r3, r2, #1, #1
 80002dc:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	7edb      	ldrb	r3, [r3, #27]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	bf14      	ite	ne
 80002e6:	2301      	movne	r3, #1
 80002e8:	2300      	moveq	r3, #0
 80002ea:	b2da      	uxtb	r2, r3
 80002ec:	7d3b      	ldrb	r3, [r7, #20]
 80002ee:	f362 0382 	bfi	r3, r2, #2, #1
 80002f2:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 80002f4:	7d3b      	ldrb	r3, [r7, #20]
 80002f6:	f003 0304 	and.w	r3, r3, #4
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d013      	beq.n	8000328 <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000306:	f003 0303 	and.w	r3, r3, #3
 800030a:	b2da      	uxtb	r2, r3
 800030c:	7d3b      	ldrb	r3, [r7, #20]
 800030e:	f362 03c4 	bfi	r3, r2, #3, #2
 8000312:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800031a:	f003 0301 	and.w	r3, r3, #1
 800031e:	b2da      	uxtb	r2, r3
 8000320:	7d3b      	ldrb	r3, [r7, #20]
 8000322:	f362 1345 	bfi	r3, r2, #5, #1
 8000326:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800032c:	2b00      	cmp	r3, #0
 800032e:	d103      	bne.n	8000338 <MQTTSerialize_connect+0x118>
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000334:	2b00      	cmp	r3, #0
 8000336:	d003      	beq.n	8000340 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 8000338:	7d3b      	ldrb	r3, [r7, #20]
 800033a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800033e:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000344:	2b00      	cmp	r3, #0
 8000346:	d103      	bne.n	8000350 <MQTTSerialize_connect+0x130>
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800034c:	2b00      	cmp	r3, #0
 800034e:	d003      	beq.n	8000358 <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 8000350:	7d3b      	ldrb	r3, [r7, #20]
 8000352:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000356:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 8000358:	7d3a      	ldrb	r2, [r7, #20]
 800035a:	f107 031c 	add.w	r3, r7, #28
 800035e:	4611      	mov	r1, r2
 8000360:	4618      	mov	r0, r3
 8000362:	f000 f9b4 	bl	80006ce <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	8b1b      	ldrh	r3, [r3, #24]
 800036a:	461a      	mov	r2, r3
 800036c:	f107 031c 	add.w	r3, r7, #28
 8000370:	4611      	mov	r1, r2
 8000372:	4618      	mov	r0, r3
 8000374:	f000 f9bf 	bl	80006f6 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f107 001c 	add.w	r0, r7, #28
 800037e:	330c      	adds	r3, #12
 8000380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000382:	f000 f9ff 	bl	8000784 <writeMQTTString>
	if (options->willFlag)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	7edb      	ldrb	r3, [r3, #27]
 800038a:	2b00      	cmp	r3, #0
 800038c:	d00d      	beq.n	80003aa <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	f107 001c 	add.w	r0, r7, #28
 8000394:	3324      	adds	r3, #36	; 0x24
 8000396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000398:	f000 f9f4 	bl	8000784 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	f107 001c 	add.w	r0, r7, #28
 80003a2:	3330      	adds	r3, #48	; 0x30
 80003a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003a6:	f000 f9ed 	bl	8000784 <writeMQTTString>
	}
	if (flags.bits.username)
 80003aa:	7d3b      	ldrb	r3, [r7, #20]
 80003ac:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80003b0:	b2db      	uxtb	r3, r3
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d006      	beq.n	80003c4 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	f107 001c 	add.w	r0, r7, #28
 80003bc:	3340      	adds	r3, #64	; 0x40
 80003be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003c0:	f000 f9e0 	bl	8000784 <writeMQTTString>
	if (flags.bits.password)
 80003c4:	7d3b      	ldrb	r3, [r7, #20]
 80003c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d006      	beq.n	80003de <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	f107 001c 	add.w	r0, r7, #28
 80003d6:	334c      	adds	r3, #76	; 0x4c
 80003d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80003da:	f000 f9d3 	bl	8000784 <writeMQTTString>

	rc = ptr - buf;
 80003de:	69fb      	ldr	r3, [r7, #28]
 80003e0:	461a      	mov	r2, r3
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 80003e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3728      	adds	r7, #40	; 0x28
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	08004178 	.word	0x08004178
 80003f8:	08004180 	.word	0x08004180

080003fc <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b08a      	sub	sp, #40	; 0x28
 8000400:	af00      	add	r7, sp, #0
 8000402:	60f8      	str	r0, [r7, #12]
 8000404:	60b9      	str	r1, [r7, #8]
 8000406:	607a      	str	r2, [r7, #4]
 8000408:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800040a:	2300      	movs	r3, #0
 800040c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800040e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000410:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 8000412:	2300      	movs	r3, #0
 8000414:	623b      	str	r3, [r7, #32]
	int rc = 0;
 8000416:	2300      	movs	r3, #0
 8000418:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800041a:	2300      	movs	r3, #0
 800041c:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800041e:	f107 0318 	add.w	r3, r7, #24
 8000422:	4618      	mov	r0, r3
 8000424:	f000 f940 	bl	80006a8 <readChar>
 8000428:	4603      	mov	r3, r0
 800042a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800042c:	7f3b      	ldrb	r3, [r7, #28]
 800042e:	f023 030f 	bic.w	r3, r3, #15
 8000432:	b2db      	uxtb	r3, r3
 8000434:	2b30      	cmp	r3, #48	; 0x30
 8000436:	d14b      	bne.n	80004d0 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 8000438:	7f3b      	ldrb	r3, [r7, #28]
 800043a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 8000446:	7f3b      	ldrb	r3, [r7, #28]
 8000448:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800044c:	b2db      	uxtb	r3, r3
 800044e:	461a      	mov	r2, r3
 8000450:	68bb      	ldr	r3, [r7, #8]
 8000452:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 8000454:	7f3b      	ldrb	r3, [r7, #28]
 8000456:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800045a:	b2db      	uxtb	r3, r3
 800045c:	461a      	mov	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen));
 8000462:	69bb      	ldr	r3, [r7, #24]
 8000464:	f107 0214 	add.w	r2, r7, #20
 8000468:	4611      	mov	r1, r2
 800046a:	4618      	mov	r0, r3
 800046c:	f000 f8ec 	bl	8000648 <MQTTPacket_decodeBuf>
 8000470:	6278      	str	r0, [r7, #36]	; 0x24
 8000472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000474:	69bb      	ldr	r3, [r7, #24]
 8000476:	4413      	add	r3, r2
 8000478:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800047a:	69bb      	ldr	r3, [r7, #24]
 800047c:	697a      	ldr	r2, [r7, #20]
 800047e:	4413      	add	r3, r2
 8000480:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 8000482:	f107 0318 	add.w	r3, r7, #24
 8000486:	6a3a      	ldr	r2, [r7, #32]
 8000488:	4619      	mov	r1, r3
 800048a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800048c:	f000 f9a8 	bl	80007e0 <readMQTTLenString>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d01e      	beq.n	80004d4 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0)
 8000496:	6a3b      	ldr	r3, [r7, #32]
 8000498:	69ba      	ldr	r2, [r7, #24]
 800049a:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800049c:	2b00      	cmp	r3, #0
 800049e:	db19      	blt.n	80004d4 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 80004a0:	68bb      	ldr	r3, [r7, #8]
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b00      	cmp	r3, #0
 80004a6:	dd08      	ble.n	80004ba <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 80004a8:	f107 0318 	add.w	r3, r7, #24
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 f8e1 	bl	8000674 <readInt>
 80004b2:	4603      	mov	r3, r0
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 80004ba:	6a3b      	ldr	r3, [r7, #32]
 80004bc:	69ba      	ldr	r2, [r7, #24]
 80004be:	1a9a      	subs	r2, r3, r2
 80004c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80004c2:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 80004c4:	69ba      	ldr	r2, [r7, #24]
 80004c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004c8:	601a      	str	r2, [r3, #0]
	rc = 1;
 80004ca:	2301      	movs	r3, #1
 80004cc:	627b      	str	r3, [r7, #36]	; 0x24
 80004ce:	e002      	b.n	80004d6 <MQTTDeserialize_publish+0xda>
		goto exit;
 80004d0:	bf00      	nop
 80004d2:	e000      	b.n	80004d6 <MQTTDeserialize_publish+0xda>
exit:
 80004d4:	bf00      	nop
	FUNC_EXIT_RC(rc);
	return rc;
 80004d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80004d8:	4618      	mov	r0, r3
 80004da:	3728      	adds	r7, #40	; 0x28
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	6039      	str	r1, [r7, #0]
	int rc = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 80004ee:	683b      	ldr	r3, [r7, #0]
 80004f0:	425a      	negs	r2, r3
 80004f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80004f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80004fa:	bf58      	it	pl
 80004fc:	4253      	negpl	r3, r2
 80004fe:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	2b00      	cmp	r3, #0
 8000504:	da00      	bge.n	8000508 <MQTTPacket_encode+0x28>
 8000506:	337f      	adds	r3, #127	; 0x7f
 8000508:	11db      	asrs	r3, r3, #7
 800050a:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	2b00      	cmp	r3, #0
 8000510:	dd03      	ble.n	800051a <MQTTPacket_encode+0x3a>
			d |= 0x80;
 8000512:	7afb      	ldrb	r3, [r7, #11]
 8000514:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000518:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	1c5a      	adds	r2, r3, #1
 800051e:	60fa      	str	r2, [r7, #12]
 8000520:	461a      	mov	r2, r3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	7afa      	ldrb	r2, [r7, #11]
 8000528:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800052a:	683b      	ldr	r3, [r7, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	dcde      	bgt.n	80004ee <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 8000530:	68fb      	ldr	r3, [r7, #12]
}
 8000532:	4618      	mov	r0, r3
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b086      	sub	sp, #24
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 8000546:	2301      	movs	r3, #1
 8000548:	617b      	str	r3, [r7, #20]
	int len = 0;
 800054a:	2300      	movs	r3, #0
 800054c:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	2200      	movs	r2, #0
 8000552:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 8000554:	f04f 33ff 	mov.w	r3, #4294967295
 8000558:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800055a:	693b      	ldr	r3, [r7, #16]
 800055c:	3301      	adds	r3, #1
 800055e:	613b      	str	r3, [r7, #16]
 8000560:	693b      	ldr	r3, [r7, #16]
 8000562:	2b04      	cmp	r3, #4
 8000564:	dd03      	ble.n	800056e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 8000566:	f04f 33ff 	mov.w	r3, #4294967295
 800056a:	60fb      	str	r3, [r7, #12]
			goto exit;
 800056c:	e01d      	b.n	80005aa <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800056e:	f107 020b 	add.w	r2, r7, #11
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2101      	movs	r1, #1
 8000576:	4610      	mov	r0, r2
 8000578:	4798      	blx	r3
 800057a:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	2b01      	cmp	r3, #1
 8000580:	d112      	bne.n	80005a8 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	7afb      	ldrb	r3, [r7, #11]
 8000588:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800058c:	6979      	ldr	r1, [r7, #20]
 800058e:	fb01 f303 	mul.w	r3, r1, r3
 8000592:	441a      	add	r2, r3
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 8000598:	697b      	ldr	r3, [r7, #20]
 800059a:	01db      	lsls	r3, r3, #7
 800059c:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800059e:	7afb      	ldrb	r3, [r7, #11]
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	dbd6      	blt.n	8000554 <MQTTPacket_decode+0x18>
exit:
 80005a6:	e000      	b.n	80005aa <MQTTPacket_decode+0x6e>
			goto exit;
 80005a8:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 80005aa:	693b      	ldr	r3, [r7, #16]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3718      	adds	r7, #24
 80005b0:	46bd      	mov	sp, r7
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	3301      	adds	r3, #1
 80005c0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b7f      	cmp	r3, #127	; 0x7f
 80005c6:	dc03      	bgt.n	80005d0 <MQTTPacket_len+0x1c>
		rem_len += 1;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	3301      	adds	r3, #1
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	e012      	b.n	80005f6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80005d6:	da03      	bge.n	80005e0 <MQTTPacket_len+0x2c>
		rem_len += 2;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	3302      	adds	r3, #2
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	e00a      	b.n	80005f6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	4a08      	ldr	r2, [pc, #32]	; (8000604 <MQTTPacket_len+0x50>)
 80005e4:	4293      	cmp	r3, r2
 80005e6:	dc03      	bgt.n	80005f0 <MQTTPacket_len+0x3c>
		rem_len += 3;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	3303      	adds	r3, #3
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	e002      	b.n	80005f6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	3304      	adds	r3, #4
 80005f4:	607b      	str	r3, [r7, #4]
	return rem_len;
 80005f6:	687b      	ldr	r3, [r7, #4]
}
 80005f8:	4618      	mov	r0, r3
 80005fa:	370c      	adds	r7, #12
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bc80      	pop	{r7}
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	001ffffe 	.word	0x001ffffe

08000608 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 8000608:	b480      	push	{r7}
 800060a:	b085      	sub	sp, #20
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	e00a      	b.n	800062e <bufchar+0x26>
		*c = *bufptr++;
 8000618:	4b0a      	ldr	r3, [pc, #40]	; (8000644 <bufchar+0x3c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	1c5a      	adds	r2, r3, #1
 800061e:	4909      	ldr	r1, [pc, #36]	; (8000644 <bufchar+0x3c>)
 8000620:	600a      	str	r2, [r1, #0]
 8000622:	781a      	ldrb	r2, [r3, #0]
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	60fb      	str	r3, [r7, #12]
 800062e:	68fa      	ldr	r2, [r7, #12]
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	429a      	cmp	r2, r3
 8000634:	dbf0      	blt.n	8000618 <bufchar+0x10>
	return count;
 8000636:	683b      	ldr	r3, [r7, #0]
}
 8000638:	4618      	mov	r0, r3
 800063a:	3714      	adds	r7, #20
 800063c:	46bd      	mov	sp, r7
 800063e:	bc80      	pop	{r7}
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	200001f8 	.word	0x200001f8

08000648 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 8000652:	4a06      	ldr	r2, [pc, #24]	; (800066c <MQTTPacket_decodeBuf+0x24>)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 8000658:	6839      	ldr	r1, [r7, #0]
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <MQTTPacket_decodeBuf+0x28>)
 800065c:	f7ff ff6e 	bl	800053c <MQTTPacket_decode>
 8000660:	4603      	mov	r3, r0
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200001f8 	.word	0x200001f8
 8000670:	08000609 	.word	0x08000609

08000674 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	781b      	ldrb	r3, [r3, #0]
 8000686:	021b      	lsls	r3, r3, #8
 8000688:	68fa      	ldr	r2, [r7, #12]
 800068a:	3201      	adds	r2, #1
 800068c:	7812      	ldrb	r2, [r2, #0]
 800068e:	4413      	add	r3, r2
 8000690:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	1c9a      	adds	r2, r3, #2
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	601a      	str	r2, [r3, #0]
	return len;
 800069c:	68bb      	ldr	r3, [r7, #8]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	601a      	str	r2, [r3, #0]
	return c;
 80006c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c4:	4618      	mov	r0, r3
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bc80      	pop	{r7}
 80006cc:	4770      	bx	lr

080006ce <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 80006ce:	b480      	push	{r7}
 80006d0:	b083      	sub	sp, #12
 80006d2:	af00      	add	r7, sp, #0
 80006d4:	6078      	str	r0, [r7, #4]
 80006d6:	460b      	mov	r3, r1
 80006d8:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	78fa      	ldrb	r2, [r7, #3]
 80006e0:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	1c5a      	adds	r2, r3, #1
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	601a      	str	r2, [r3, #0]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	da00      	bge.n	8000708 <writeInt+0x12>
 8000706:	33ff      	adds	r3, #255	; 0xff
 8000708:	121b      	asrs	r3, r3, #8
 800070a:	461a      	mov	r2, r3
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	b2d2      	uxtb	r2, r2
 8000712:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	1c5a      	adds	r2, r3, #1
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800071e:	683b      	ldr	r3, [r7, #0]
 8000720:	425a      	negs	r2, r3
 8000722:	b2db      	uxtb	r3, r3
 8000724:	b2d2      	uxtb	r2, r2
 8000726:	bf58      	it	pl
 8000728:	4253      	negpl	r3, r2
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	6812      	ldr	r2, [r2, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	601a      	str	r2, [r3, #0]
}
 800073c:	bf00      	nop
 800073e:	370c      	adds	r7, #12
 8000740:	46bd      	mov	sp, r7
 8000742:	bc80      	pop	{r7}
 8000744:	4770      	bx	lr

08000746 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 8000746:	b580      	push	{r7, lr}
 8000748:	b084      	sub	sp, #16
 800074a:	af00      	add	r7, sp, #0
 800074c:	6078      	str	r0, [r7, #4]
 800074e:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 8000750:	6838      	ldr	r0, [r7, #0]
 8000752:	f7ff fcfb 	bl	800014c <strlen>
 8000756:	4603      	mov	r3, r0
 8000758:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800075a:	68f9      	ldr	r1, [r7, #12]
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f7ff ffca 	bl	80006f6 <writeInt>
	memcpy(*pptr, string, len);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	68fa      	ldr	r2, [r7, #12]
 8000768:	6839      	ldr	r1, [r7, #0]
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fb38 	bl	8002de0 <memcpy>
	*pptr += len;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681a      	ldr	r2, [r3, #0]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	441a      	add	r2, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	601a      	str	r2, [r3, #0]
}
 800077c:	bf00      	nop
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	60f8      	str	r0, [r7, #12]
 800078c:	4638      	mov	r0, r7
 800078e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	dd12      	ble.n	80007be <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4619      	mov	r1, r3
 800079c:	68f8      	ldr	r0, [r7, #12]
 800079e:	f7ff ffaa 	bl	80006f6 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	68b9      	ldr	r1, [r7, #8]
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f002 fb18 	bl	8002de0 <memcpy>
		*pptr += mqttstring.lenstring.len;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	441a      	add	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 80007bc:	e00c      	b.n	80007d8 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d005      	beq.n	80007d0 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	4619      	mov	r1, r3
 80007c8:	68f8      	ldr	r0, [r7, #12]
 80007ca:	f7ff ffbc 	bl	8000746 <writeCString>
}
 80007ce:	e003      	b.n	80007d8 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 80007d0:	2100      	movs	r1, #0
 80007d2:	68f8      	ldr	r0, [r7, #12]
 80007d4:	f7ff ff8f 	bl	80006f6 <writeInt>
}
 80007d8:	bf00      	nop
 80007da:	3710      	adds	r7, #16
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}

080007e0 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b086      	sub	sp, #24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
	int rc = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	68ba      	ldr	r2, [r7, #8]
 80007f4:	6812      	ldr	r2, [r2, #0]
 80007f6:	1a9b      	subs	r3, r3, r2
 80007f8:	2b01      	cmp	r3, #1
 80007fa:	dd1a      	ble.n	8000832 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 80007fc:	68b8      	ldr	r0, [r7, #8]
 80007fe:	f7ff ff39 	bl	8000674 <readInt>
 8000802:	4602      	mov	r2, r0
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 8000808:	68bb      	ldr	r3, [r7, #8]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	68fa      	ldr	r2, [r7, #12]
 800080e:	6852      	ldr	r2, [r2, #4]
 8000810:	4413      	add	r3, r2
 8000812:	687a      	ldr	r2, [r7, #4]
 8000814:	429a      	cmp	r2, r3
 8000816:	d30c      	bcc.n	8000832 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	6852      	ldr	r2, [r2, #4]
 8000828:	441a      	add	r2, r3
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	601a      	str	r2, [r3, #0]
			rc = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 8000838:	697b      	ldr	r3, [r7, #20]
}
 800083a:	4618      	mov	r0, r3
 800083c:	3718      	adds	r7, #24
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b086      	sub	sp, #24
 8000846:	af00      	add	r7, sp, #0
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d006      	beq.n	8000866 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff fc76 	bl	800014c <strlen>
 8000860:	4603      	mov	r3, r0
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	e001      	b.n	800086a <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 8000866:	68bb      	ldr	r3, [r7, #8]
 8000868:	617b      	str	r3, [r7, #20]
	return rc;
 800086a:	697b      	ldr	r3, [r7, #20]
}
 800086c:	4618      	mov	r0, r3
 800086e:	3718      	adds	r7, #24
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}

08000874 <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	4638      	mov	r0, r7
 800087e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 8000886:	463b      	mov	r3, r7
 8000888:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800088c:	f7ff ffd9 	bl	8000842 <MQTTstrlen>
 8000890:	4603      	mov	r3, r0
 8000892:	1c9a      	adds	r2, r3, #2
 8000894:	6a3b      	ldr	r3, [r7, #32]
 8000896:	4413      	add	r3, r2
 8000898:	697a      	ldr	r2, [r7, #20]
 800089a:	4413      	add	r3, r2
 800089c:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800089e:	68fb      	ldr	r3, [r7, #12]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	dd02      	ble.n	80008aa <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 80008a4:	697b      	ldr	r3, [r7, #20]
 80008a6:	3302      	adds	r3, #2
 80008a8:	617b      	str	r3, [r7, #20]
	return len;
 80008aa:	697b      	ldr	r3, [r7, #20]
}
 80008ac:	4618      	mov	r0, r3
 80008ae:	3718      	adds	r7, #24
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b08a      	sub	sp, #40	; 0x28
 80008b8:	af02      	add	r7, sp, #8
 80008ba:	60f8      	str	r0, [r7, #12]
 80008bc:	60b9      	str	r1, [r7, #8]
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	4613      	mov	r3, r2
 80008c2:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 80008c8:	2300      	movs	r3, #0
 80008ca:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 80008d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80008d6:	9300      	str	r3, [sp, #0]
 80008d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80008de:	6838      	ldr	r0, [r7, #0]
 80008e0:	f7ff ffc8 	bl	8000874 <MQTTSerialize_publishLength>
 80008e4:	61b8      	str	r0, [r7, #24]
 80008e6:	69b8      	ldr	r0, [r7, #24]
 80008e8:	f7ff fe64 	bl	80005b4 <MQTTPacket_len>
 80008ec:	4602      	mov	r2, r0
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	4293      	cmp	r3, r2
 80008f2:	da03      	bge.n	80008fc <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 80008f4:	f06f 0301 	mvn.w	r3, #1
 80008f8:	61fb      	str	r3, [r7, #28]
		goto exit;
 80008fa:	e04d      	b.n	8000998 <MQTTSerialize_publish+0xe4>
	}

	header.bits.type = PUBLISH;
 80008fc:	7c3b      	ldrb	r3, [r7, #16]
 80008fe:	2203      	movs	r2, #3
 8000900:	f362 1307 	bfi	r3, r2, #4, #4
 8000904:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	7c3b      	ldrb	r3, [r7, #16]
 8000910:	f362 03c3 	bfi	r3, r2, #3, #1
 8000914:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	f003 0303 	and.w	r3, r3, #3
 800091c:	b2da      	uxtb	r2, r3
 800091e:	7c3b      	ldrb	r3, [r7, #16]
 8000920:	f362 0342 	bfi	r3, r2, #1, #2
 8000924:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 8000926:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800092a:	f003 0301 	and.w	r3, r3, #1
 800092e:	b2da      	uxtb	r2, r3
 8000930:	7c3b      	ldrb	r3, [r7, #16]
 8000932:	f362 0300 	bfi	r3, r2, #0, #1
 8000936:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 8000938:	7c3a      	ldrb	r2, [r7, #16]
 800093a:	f107 0314 	add.w	r3, r7, #20
 800093e:	4611      	mov	r1, r2
 8000940:	4618      	mov	r0, r3
 8000942:	f7ff fec4 	bl	80006ce <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	69b9      	ldr	r1, [r7, #24]
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff fdc8 	bl	80004e0 <MQTTPacket_encode>
 8000950:	4602      	mov	r2, r0
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	4413      	add	r3, r2
 8000956:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 8000958:	f107 0014 	add.w	r0, r7, #20
 800095c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000960:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000962:	f7ff ff0f 	bl	8000784 <writeMQTTString>

	if (qos > 0)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	dd06      	ble.n	800097a <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800096c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4611      	mov	r1, r2
 8000974:	4618      	mov	r0, r3
 8000976:	f7ff febe 	bl	80006f6 <writeInt>

	memcpy(ptr, payload, payloadlen);
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800097e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8000980:	4618      	mov	r0, r3
 8000982:	f002 fa2d 	bl	8002de0 <memcpy>
	ptr += payloadlen;
 8000986:	697a      	ldr	r2, [r7, #20]
 8000988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800098a:	4413      	add	r3, r2
 800098c:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800098e:	697b      	ldr	r3, [r7, #20]
 8000990:	461a      	mov	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	1ad3      	subs	r3, r2, r3
 8000996:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000998:	69fb      	ldr	r3, [r7, #28]
}
 800099a:	4618      	mov	r0, r3
 800099c:	3720      	adds	r7, #32
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	6078      	str	r0, [r7, #4]
 80009aa:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 80009ac:	2302      	movs	r3, #2
 80009ae:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 80009b0:	2300      	movs	r3, #0
 80009b2:	60fb      	str	r3, [r7, #12]
 80009b4:	e013      	b.n	80009de <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4613      	mov	r3, r2
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	4413      	add	r3, r2
 80009be:	009b      	lsls	r3, r3, #2
 80009c0:	461a      	mov	r2, r3
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80009ca:	f7ff ff3a 	bl	8000842 <MQTTstrlen>
 80009ce:	4603      	mov	r3, r0
 80009d0:	3303      	adds	r3, #3
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	4413      	add	r3, r2
 80009d6:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3301      	adds	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fa      	ldr	r2, [r7, #12]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	429a      	cmp	r2, r3
 80009e4:	dbe7      	blt.n	80009b6 <MQTTSerialize_subscribeLength+0x14>
	return len;
 80009e6:	68bb      	ldr	r3, [r7, #8]
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b08a      	sub	sp, #40	; 0x28
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	4611      	mov	r1, r2
 80009fc:	461a      	mov	r2, r3
 80009fe:	460b      	mov	r3, r1
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	4613      	mov	r3, r2
 8000a04:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 8000a06:	68fb      	ldr	r3, [r7, #12]
 8000a08:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 8000a1a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000a1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000a1e:	f7ff ffc0 	bl	80009a2 <MQTTSerialize_subscribeLength>
 8000a22:	61f8      	str	r0, [r7, #28]
 8000a24:	69f8      	ldr	r0, [r7, #28]
 8000a26:	f7ff fdc5 	bl	80005b4 <MQTTPacket_len>
 8000a2a:	4602      	mov	r2, r0
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	da03      	bge.n	8000a3a <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 8000a32:	f06f 0301 	mvn.w	r3, #1
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 8000a38:	e052      	b.n	8000ae0 <MQTTSerialize_subscribe+0xf0>
	}

	header.byte = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 8000a3e:	7d3b      	ldrb	r3, [r7, #20]
 8000a40:	2208      	movs	r2, #8
 8000a42:	f362 1307 	bfi	r3, r2, #4, #4
 8000a46:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 8000a48:	79fb      	ldrb	r3, [r7, #7]
 8000a4a:	f003 0301 	and.w	r3, r3, #1
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	7d3b      	ldrb	r3, [r7, #20]
 8000a52:	f362 03c3 	bfi	r3, r2, #3, #1
 8000a56:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 8000a58:	7d3b      	ldrb	r3, [r7, #20]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f362 0342 	bfi	r3, r2, #1, #2
 8000a60:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 8000a62:	7d3a      	ldrb	r2, [r7, #20]
 8000a64:	f107 0318 	add.w	r3, r7, #24
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fe2f 	bl	80006ce <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	69f9      	ldr	r1, [r7, #28]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f7ff fd33 	bl	80004e0 <MQTTPacket_encode>
 8000a7a:	4602      	mov	r2, r0
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	4413      	add	r3, r2
 8000a80:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 8000a82:	88ba      	ldrh	r2, [r7, #4]
 8000a84:	f107 0318 	add.w	r3, r7, #24
 8000a88:	4611      	mov	r1, r2
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fe33 	bl	80006f6 <writeInt>

	for (i = 0; i < count; ++i)
 8000a90:	2300      	movs	r3, #0
 8000a92:	623b      	str	r3, [r7, #32]
 8000a94:	e01b      	b.n	8000ace <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 8000a96:	6a3a      	ldr	r2, [r7, #32]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	005b      	lsls	r3, r3, #1
 8000a9c:	4413      	add	r3, r2
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	461a      	mov	r2, r3
 8000aa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000aa4:	4413      	add	r3, r2
 8000aa6:	f107 0018 	add.w	r0, r7, #24
 8000aaa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000aac:	f7ff fe6a 	bl	8000784 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	009b      	lsls	r3, r3, #2
 8000ab4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000ab6:	4413      	add	r3, r2
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	b2da      	uxtb	r2, r3
 8000abc:	f107 0318 	add.w	r3, r7, #24
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fe03 	bl	80006ce <writeChar>
	for (i = 0; i < count; ++i)
 8000ac8:	6a3b      	ldr	r3, [r7, #32]
 8000aca:	3301      	adds	r3, #1
 8000acc:	623b      	str	r3, [r7, #32]
 8000ace:	6a3a      	ldr	r2, [r7, #32]
 8000ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	dbdf      	blt.n	8000a96 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 8000ad6:	69bb      	ldr	r3, [r7, #24]
 8000ad8:	461a      	mov	r2, r3
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
	...

08000aec <Sim800_RxCallBack>:
/**
 * Call back function for release read SIM800 UART buffer.
 * @param NONE
 * @return NONE
 */
void Sim800_RxCallBack(void) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
    rx_buffer[rx_index++] = rx_data;
 8000af0:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <Sim800_RxCallBack+0x13c>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	1c5a      	adds	r2, r3, #1
 8000af6:	b291      	uxth	r1, r2
 8000af8:	4a4b      	ldr	r2, [pc, #300]	; (8000c28 <Sim800_RxCallBack+0x13c>)
 8000afa:	8011      	strh	r1, [r2, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b4b      	ldr	r3, [pc, #300]	; (8000c2c <Sim800_RxCallBack+0x140>)
 8000b00:	7819      	ldrb	r1, [r3, #0]
 8000b02:	4b4b      	ldr	r3, [pc, #300]	; (8000c30 <Sim800_RxCallBack+0x144>)
 8000b04:	5499      	strb	r1, [r3, r2]

    if (SIM800.mqttServer.connect == 0) {
 8000b06:	4b4b      	ldr	r3, [pc, #300]	; (8000c34 <Sim800_RxCallBack+0x148>)
 8000b08:	7c9b      	ldrb	r3, [r3, #18]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d135      	bne.n	8000b7a <Sim800_RxCallBack+0x8e>
        if (strstr((char *) rx_buffer, "\r\n") != NULL && rx_index == 2) {
 8000b0e:	494a      	ldr	r1, [pc, #296]	; (8000c38 <Sim800_RxCallBack+0x14c>)
 8000b10:	4847      	ldr	r0, [pc, #284]	; (8000c30 <Sim800_RxCallBack+0x144>)
 8000b12:	f002 f9e5 	bl	8002ee0 <strstr>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d007      	beq.n	8000b2c <Sim800_RxCallBack+0x40>
 8000b1c:	4b42      	ldr	r3, [pc, #264]	; (8000c28 <Sim800_RxCallBack+0x13c>)
 8000b1e:	881b      	ldrh	r3, [r3, #0]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d103      	bne.n	8000b2c <Sim800_RxCallBack+0x40>
            rx_index = 0;
 8000b24:	4b40      	ldr	r3, [pc, #256]	; (8000c28 <Sim800_RxCallBack+0x13c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	801a      	strh	r2, [r3, #0]
 8000b2a:	e026      	b.n	8000b7a <Sim800_RxCallBack+0x8e>
        } else if (strstr((char *) rx_buffer, "\r\n") != NULL) {
 8000b2c:	4942      	ldr	r1, [pc, #264]	; (8000c38 <Sim800_RxCallBack+0x14c>)
 8000b2e:	4840      	ldr	r0, [pc, #256]	; (8000c30 <Sim800_RxCallBack+0x144>)
 8000b30:	f002 f9d6 	bl	8002ee0 <strstr>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d01f      	beq.n	8000b7a <Sim800_RxCallBack+0x8e>
            memcpy(mqtt_buffer, rx_buffer, sizeof(rx_buffer));
 8000b3a:	4a40      	ldr	r2, [pc, #256]	; (8000c3c <Sim800_RxCallBack+0x150>)
 8000b3c:	4b3c      	ldr	r3, [pc, #240]	; (8000c30 <Sim800_RxCallBack+0x144>)
 8000b3e:	4610      	mov	r0, r2
 8000b40:	4619      	mov	r1, r3
 8000b42:	f240 53b4 	movw	r3, #1460	; 0x5b4
 8000b46:	461a      	mov	r2, r3
 8000b48:	f002 f94a 	bl	8002de0 <memcpy>
            clearRxBuffer();
 8000b4c:	f000 f886 	bl	8000c5c <clearRxBuffer>
            if (strstr(mqtt_buffer, "DY CONNECT\r\n")) {
 8000b50:	493b      	ldr	r1, [pc, #236]	; (8000c40 <Sim800_RxCallBack+0x154>)
 8000b52:	483a      	ldr	r0, [pc, #232]	; (8000c3c <Sim800_RxCallBack+0x150>)
 8000b54:	f002 f9c4 	bl	8002ee0 <strstr>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d003      	beq.n	8000b66 <Sim800_RxCallBack+0x7a>
                SIM800.mqttServer.connect = 0;
 8000b5e:	4b35      	ldr	r3, [pc, #212]	; (8000c34 <Sim800_RxCallBack+0x148>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	749a      	strb	r2, [r3, #18]
 8000b64:	e009      	b.n	8000b7a <Sim800_RxCallBack+0x8e>
            } else if (strstr(mqtt_buffer, "CONNECT\r\n")) {
 8000b66:	4937      	ldr	r1, [pc, #220]	; (8000c44 <Sim800_RxCallBack+0x158>)
 8000b68:	4834      	ldr	r0, [pc, #208]	; (8000c3c <Sim800_RxCallBack+0x150>)
 8000b6a:	f002 f9b9 	bl	8002ee0 <strstr>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d002      	beq.n	8000b7a <Sim800_RxCallBack+0x8e>
                SIM800.mqttServer.connect = 1;
 8000b74:	4b2f      	ldr	r3, [pc, #188]	; (8000c34 <Sim800_RxCallBack+0x148>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	749a      	strb	r2, [r3, #18]
            }
        }
    }
    if (strstr((char *) rx_buffer, "CLOSED\r\n") || strstr((char *) rx_buffer, "ERROR\r\n")) {
 8000b7a:	4933      	ldr	r1, [pc, #204]	; (8000c48 <Sim800_RxCallBack+0x15c>)
 8000b7c:	482c      	ldr	r0, [pc, #176]	; (8000c30 <Sim800_RxCallBack+0x144>)
 8000b7e:	f002 f9af 	bl	8002ee0 <strstr>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d106      	bne.n	8000b96 <Sim800_RxCallBack+0xaa>
 8000b88:	4930      	ldr	r1, [pc, #192]	; (8000c4c <Sim800_RxCallBack+0x160>)
 8000b8a:	4829      	ldr	r0, [pc, #164]	; (8000c30 <Sim800_RxCallBack+0x144>)
 8000b8c:	f002 f9a8 	bl	8002ee0 <strstr>
 8000b90:	4603      	mov	r3, r0
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d002      	beq.n	8000b9c <Sim800_RxCallBack+0xb0>
        SIM800.mqttServer.connect = 0;
 8000b96:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <Sim800_RxCallBack+0x148>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	749a      	strb	r2, [r3, #18]
    }
    if (SIM800.mqttServer.connect == 1 && rx_data == 48) {
 8000b9c:	4b25      	ldr	r3, [pc, #148]	; (8000c34 <Sim800_RxCallBack+0x148>)
 8000b9e:	7c9b      	ldrb	r3, [r3, #18]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d106      	bne.n	8000bb2 <Sim800_RxCallBack+0xc6>
 8000ba4:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <Sim800_RxCallBack+0x140>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	2b30      	cmp	r3, #48	; 0x30
 8000baa:	d102      	bne.n	8000bb2 <Sim800_RxCallBack+0xc6>
        mqtt_receive = 1;
 8000bac:	4b28      	ldr	r3, [pc, #160]	; (8000c50 <Sim800_RxCallBack+0x164>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	701a      	strb	r2, [r3, #0]
    }
    if (mqtt_receive == 1) {
 8000bb2:	4b27      	ldr	r3, [pc, #156]	; (8000c50 <Sim800_RxCallBack+0x164>)
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	2b01      	cmp	r3, #1
 8000bb8:	d124      	bne.n	8000c04 <Sim800_RxCallBack+0x118>
        mqtt_buffer[mqtt_index++] = rx_data;
 8000bba:	4b26      	ldr	r3, [pc, #152]	; (8000c54 <Sim800_RxCallBack+0x168>)
 8000bbc:	881b      	ldrh	r3, [r3, #0]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	b291      	uxth	r1, r2
 8000bc2:	4a24      	ldr	r2, [pc, #144]	; (8000c54 <Sim800_RxCallBack+0x168>)
 8000bc4:	8011      	strh	r1, [r2, #0]
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	4b18      	ldr	r3, [pc, #96]	; (8000c2c <Sim800_RxCallBack+0x140>)
 8000bca:	7819      	ldrb	r1, [r3, #0]
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	; (8000c3c <Sim800_RxCallBack+0x150>)
 8000bce:	5499      	strb	r1, [r3, r2]
        if (mqtt_index > 1 && mqtt_index - 1 > mqtt_buffer[1]) {
 8000bd0:	4b20      	ldr	r3, [pc, #128]	; (8000c54 <Sim800_RxCallBack+0x168>)
 8000bd2:	881b      	ldrh	r3, [r3, #0]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d90d      	bls.n	8000bf4 <Sim800_RxCallBack+0x108>
 8000bd8:	4b1e      	ldr	r3, [pc, #120]	; (8000c54 <Sim800_RxCallBack+0x168>)
 8000bda:	881b      	ldrh	r3, [r3, #0]
 8000bdc:	3b01      	subs	r3, #1
 8000bde:	4a17      	ldr	r2, [pc, #92]	; (8000c3c <Sim800_RxCallBack+0x150>)
 8000be0:	7852      	ldrb	r2, [r2, #1]
 8000be2:	4293      	cmp	r3, r2
 8000be4:	dd06      	ble.n	8000bf4 <Sim800_RxCallBack+0x108>
            MQTT_Receive((unsigned char *) mqtt_buffer);
 8000be6:	4815      	ldr	r0, [pc, #84]	; (8000c3c <Sim800_RxCallBack+0x150>)
 8000be8:	f000 fa14 	bl	8001014 <MQTT_Receive>
            clearRxBuffer();
 8000bec:	f000 f836 	bl	8000c5c <clearRxBuffer>
            clearMqttBuffer();
 8000bf0:	f000 f846 	bl	8000c80 <clearMqttBuffer>
        }
        if (mqtt_index >= sizeof(mqtt_buffer)) {
 8000bf4:	4b17      	ldr	r3, [pc, #92]	; (8000c54 <Sim800_RxCallBack+0x168>)
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d901      	bls.n	8000c04 <Sim800_RxCallBack+0x118>
            clearMqttBuffer();
 8000c00:	f000 f83e 	bl	8000c80 <clearMqttBuffer>
        }
    }
    if (rx_index >= sizeof(mqtt_buffer)) {
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <Sim800_RxCallBack+0x13c>)
 8000c06:	881b      	ldrh	r3, [r3, #0]
 8000c08:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d903      	bls.n	8000c18 <Sim800_RxCallBack+0x12c>
        clearRxBuffer();
 8000c10:	f000 f824 	bl	8000c5c <clearRxBuffer>
        clearMqttBuffer();
 8000c14:	f000 f834 	bl	8000c80 <clearMqttBuffer>
    }
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000c18:	2201      	movs	r2, #1
 8000c1a:	4904      	ldr	r1, [pc, #16]	; (8000c2c <Sim800_RxCallBack+0x140>)
 8000c1c:	480e      	ldr	r0, [pc, #56]	; (8000c58 <Sim800_RxCallBack+0x16c>)
 8000c1e:	f001 fda4 	bl	800276a <HAL_UART_Receive_IT>
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200007b4 	.word	0x200007b4
 8000c2c:	200001fc 	.word	0x200001fc
 8000c30:	20000200 	.word	0x20000200
 8000c34:	20000d7c 	.word	0x20000d7c
 8000c38:	08004188 	.word	0x08004188
 8000c3c:	200007b8 	.word	0x200007b8
 8000c40:	0800418c 	.word	0x0800418c
 8000c44:	0800419c 	.word	0x0800419c
 8000c48:	080041a8 	.word	0x080041a8
 8000c4c:	080041b4 	.word	0x080041b4
 8000c50:	200007b6 	.word	0x200007b6
 8000c54:	20000d6c 	.word	0x20000d6c
 8000c58:	20000e34 	.word	0x20000e34

08000c5c <clearRxBuffer>:
/**
 * Clear SIM800 UART RX buffer.
 * @param NONE
 * @return NONE
 */
void clearRxBuffer(void) {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    rx_index = 0;
 8000c60:	4b05      	ldr	r3, [pc, #20]	; (8000c78 <clearRxBuffer+0x1c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	801a      	strh	r2, [r3, #0]
    memset(rx_buffer, 0, sizeof(rx_buffer));
 8000c66:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4803      	ldr	r0, [pc, #12]	; (8000c7c <clearRxBuffer+0x20>)
 8000c6e:	f002 f8c2 	bl	8002df6 <memset>
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200007b4 	.word	0x200007b4
 8000c7c:	20000200 	.word	0x20000200

08000c80 <clearMqttBuffer>:
/**
 * Clear MQTT buffer.
 * @param NONE
 * @return NONE
 */
void clearMqttBuffer(void) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
    mqtt_receive = 0;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <clearMqttBuffer+0x20>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
    mqtt_index = 0;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	; (8000ca4 <clearMqttBuffer+0x24>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	801a      	strh	r2, [r3, #0]
    memset(mqtt_buffer, 0, sizeof(mqtt_buffer));
 8000c90:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8000c94:	2100      	movs	r1, #0
 8000c96:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <clearMqttBuffer+0x28>)
 8000c98:	f002 f8ad 	bl	8002df6 <memset>
}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200007b6 	.word	0x200007b6
 8000ca4:	20000d6c 	.word	0x20000d6c
 8000ca8:	200007b8 	.word	0x200007b8

08000cac <SIM800_SendCommand>:
 * @param command the command to be used the send AT command
 * @param reply to be used to set the correct answer to the command
 * @param delay to be used to the set pause to the reply
 * @return error, 0 is OK
 */
int SIM800_SendCommand(char *command, char *reply, uint16_t delay) {
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	60f8      	str	r0, [r7, #12]
 8000cb4:	60b9      	str	r1, [r7, #8]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	80fb      	strh	r3, [r7, #6]
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *) command,
                         (uint16_t) strlen(command));
 8000cba:	68f8      	ldr	r0, [r7, #12]
 8000cbc:	f7ff fa46 	bl	800014c <strlen>
 8000cc0:	4603      	mov	r3, r0
    HAL_UART_Transmit_IT(UART_SIM800, (unsigned char *) command,
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	68f9      	ldr	r1, [r7, #12]
 8000cc8:	480c      	ldr	r0, [pc, #48]	; (8000cfc <SIM800_SendCommand+0x50>)
 8000cca:	f001 fd0a 	bl	80026e2 <HAL_UART_Transmit_IT>

#if FREERTOS == 1
    osDelay(delay);
#else
    HAL_Delay(delay);
 8000cce:	88fb      	ldrh	r3, [r7, #6]
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f000 fd85 	bl	80017e0 <HAL_Delay>
#endif

    if (strstr(mqtt_buffer, reply) != NULL) {
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	4809      	ldr	r0, [pc, #36]	; (8000d00 <SIM800_SendCommand+0x54>)
 8000cda:	f002 f901 	bl	8002ee0 <strstr>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <SIM800_SendCommand+0x40>
        clearRxBuffer();
 8000ce4:	f7ff ffba 	bl	8000c5c <clearRxBuffer>
        return 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	e002      	b.n	8000cf2 <SIM800_SendCommand+0x46>
    }
    clearRxBuffer();
 8000cec:	f7ff ffb6 	bl	8000c5c <clearRxBuffer>
    return 1;
 8000cf0:	2301      	movs	r3, #1
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3710      	adds	r7, #16
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	20000e34 	.word	0x20000e34
 8000d00:	200007b8 	.word	0x200007b8

08000d04 <MQTT_Init>:
/**
 * initialization SIM800.
 * @param NONE
 * @return error status, 0 - OK
 */
int MQTT_Init(void) {
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08c      	sub	sp, #48	; 0x30
 8000d08:	af02      	add	r7, sp, #8
    SIM800.mqttServer.connect = 0;
 8000d0a:	4b30      	ldr	r3, [pc, #192]	; (8000dcc <MQTT_Init+0xc8>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	749a      	strb	r2, [r3, #18]
    int error = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	627b      	str	r3, [r7, #36]	; 0x24
    char str[32] = {0};
 8000d14:	1d3b      	adds	r3, r7, #4
 8000d16:	2220      	movs	r2, #32
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f002 f86b 	bl	8002df6 <memset>
    HAL_UART_Receive_IT(UART_SIM800, &rx_data, 1);
 8000d20:	2201      	movs	r2, #1
 8000d22:	492b      	ldr	r1, [pc, #172]	; (8000dd0 <MQTT_Init+0xcc>)
 8000d24:	482b      	ldr	r0, [pc, #172]	; (8000dd4 <MQTT_Init+0xd0>)
 8000d26:	f001 fd20 	bl	800276a <HAL_UART_Receive_IT>
    HAL_UART_Transmit_IT(&huart1, &rx_data, 1);
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	4928      	ldr	r1, [pc, #160]	; (8000dd0 <MQTT_Init+0xcc>)
 8000d2e:	482a      	ldr	r0, [pc, #168]	; (8000dd8 <MQTT_Init+0xd4>)
 8000d30:	f001 fcd7 	bl	80026e2 <HAL_UART_Transmit_IT>

    SIM800_SendCommand("AT\r\n", "OK\r\n", CMD_DELAY);
 8000d34:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d38:	4928      	ldr	r1, [pc, #160]	; (8000ddc <MQTT_Init+0xd8>)
 8000d3a:	4829      	ldr	r0, [pc, #164]	; (8000de0 <MQTT_Init+0xdc>)
 8000d3c:	f7ff ffb6 	bl	8000cac <SIM800_SendCommand>
    SIM800_SendCommand("ATE0\r\n", "OK\r\n", CMD_DELAY);
 8000d40:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d44:	4925      	ldr	r1, [pc, #148]	; (8000ddc <MQTT_Init+0xd8>)
 8000d46:	4827      	ldr	r0, [pc, #156]	; (8000de4 <MQTT_Init+0xe0>)
 8000d48:	f7ff ffb0 	bl	8000cac <SIM800_SendCommand>
  //  error += SIM800_SendCommand("AT+CIPSHUT\r\n", "SHUT OK\r\n", CMD_DELAY);
  //  error += SIM800_SendCommand("AT+CGATT=1\r\n", "OK\r\n", CMD_DELAY);
  //  error += SIM800_SendCommand("AT+CIPMODE=1\r\n", "OK\r\n", CMD_DELAY);
    error += SIM800_SendCommand("AT+SAPBR=3,1,\"CONTYPE\",\"GPRS\"\r\n", "OK\r\n", CMD_DELAY);
 8000d4c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d50:	4922      	ldr	r1, [pc, #136]	; (8000ddc <MQTT_Init+0xd8>)
 8000d52:	4825      	ldr	r0, [pc, #148]	; (8000de8 <MQTT_Init+0xe4>)
 8000d54:	f7ff ffaa 	bl	8000cac <SIM800_SendCommand>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	4413      	add	r3, r2
 8000d5e:	627b      	str	r3, [r7, #36]	; 0x24
  //  error += SIM800_SendCommand("AT+SAPBR=3,1, \"APN\",\""+APN+"\"", "OK\r\n", CMD_DELAY);
    snprintf(str, sizeof(str), "AT+SAPBR=3,1\"%s\",\"%s\",\"%s\"\r\n", SIM800.sim.apn, SIM800.sim.apn_user,
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MQTT_Init+0xc8>)
 8000d62:	6819      	ldr	r1, [r3, #0]
 8000d64:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MQTT_Init+0xc8>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <MQTT_Init+0xc8>)
 8000d6a:	6892      	ldr	r2, [r2, #8]
 8000d6c:	1d38      	adds	r0, r7, #4
 8000d6e:	9201      	str	r2, [sp, #4]
 8000d70:	9300      	str	r3, [sp, #0]
 8000d72:	460b      	mov	r3, r1
 8000d74:	4a1d      	ldr	r2, [pc, #116]	; (8000dec <MQTT_Init+0xe8>)
 8000d76:	2120      	movs	r1, #32
 8000d78:	f002 f85e 	bl	8002e38 <sniprintf>
             SIM800.sim.apn_pass);
    error += SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d82:	4916      	ldr	r1, [pc, #88]	; (8000ddc <MQTT_Init+0xd8>)
 8000d84:	4618      	mov	r0, r3
 8000d86:	f7ff ff91 	bl	8000cac <SIM800_SendCommand>
 8000d8a:	4602      	mov	r2, r0
 8000d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d8e:	4413      	add	r3, r2
 8000d90:	627b      	str	r3, [r7, #36]	; 0x24

    error += SIM800_SendCommand("AT+SAPBR=1,1\r\n", "OK\r\n", CMD_DELAY);
 8000d92:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000d96:	4911      	ldr	r1, [pc, #68]	; (8000ddc <MQTT_Init+0xd8>)
 8000d98:	4815      	ldr	r0, [pc, #84]	; (8000df0 <MQTT_Init+0xec>)
 8000d9a:	f7ff ff87 	bl	8000cac <SIM800_SendCommand>
 8000d9e:	4602      	mov	r2, r0
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da2:	4413      	add	r3, r2
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24

  //  error += SIM800_SendCommand("AT+CIPSSL=1\r\n", "OK\r\n", CMD_DELAY);
    if (error == 0) {
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d106      	bne.n	8000dba <MQTT_Init+0xb6>
    	printf("GPRS OK");
 8000dac:	4811      	ldr	r0, [pc, #68]	; (8000df4 <MQTT_Init+0xf0>)
 8000dae:	f002 f82b 	bl	8002e08 <iprintf>
        MQTT_Connect();
 8000db2:	f000 f823 	bl	8000dfc <MQTT_Connect>
        return error;
 8000db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db8:	e003      	b.n	8000dc2 <MQTT_Init+0xbe>
    } else {
    	printf("GPRS ERROR");
 8000dba:	480f      	ldr	r0, [pc, #60]	; (8000df8 <MQTT_Init+0xf4>)
 8000dbc:	f002 f824 	bl	8002e08 <iprintf>
        return error;
 8000dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3728      	adds	r7, #40	; 0x28
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000d7c 	.word	0x20000d7c
 8000dd0:	200001fc 	.word	0x200001fc
 8000dd4:	20000e34 	.word	0x20000e34
 8000dd8:	20000e74 	.word	0x20000e74
 8000ddc:	080041bc 	.word	0x080041bc
 8000de0:	080041c4 	.word	0x080041c4
 8000de4:	080041cc 	.word	0x080041cc
 8000de8:	080041d4 	.word	0x080041d4
 8000dec:	080041f4 	.word	0x080041f4
 8000df0:	08004214 	.word	0x08004214
 8000df4:	08004224 	.word	0x08004224
 8000df8:	0800422c 	.word	0x0800422c

08000dfc <MQTT_Connect>:
/**
 * Connect to MQTT server in Internet over TCP.
 * @param NONE
 * @return NONE
 */
void MQTT_Connect(void) {
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b0d8      	sub	sp, #352	; 0x160
 8000e00:	af00      	add	r7, sp, #0
    SIM800.mqttReceive.newEvent = 0;
 8000e02:	4b34      	ldr	r3, [pc, #208]	; (8000ed4 <MQTT_Connect+0xd8>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    SIM800.mqttServer.connect = 0;
 8000e0a:	4b32      	ldr	r3, [pc, #200]	; (8000ed4 <MQTT_Connect+0xd8>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	749a      	strb	r2, [r3, #18]
    char str[128] = {0};
 8000e10:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	2100      	movs	r1, #0
 8000e18:	4618      	mov	r0, r3
 8000e1a:	f001 ffec 	bl	8002df6 <memset>
    unsigned char buf[128] = {0};
 8000e1e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000e22:	4618      	mov	r0, r3
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	461a      	mov	r2, r3
 8000e28:	2100      	movs	r1, #0
 8000e2a:	f001 ffe4 	bl	8002df6 <memset>
    sprintf(str, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", SIM800.mqttServer.host, SIM800.mqttServer.port);
 8000e2e:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <MQTT_Connect+0xd8>)
 8000e30:	68da      	ldr	r2, [r3, #12]
 8000e32:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <MQTT_Connect+0xd8>)
 8000e34:	8a1b      	ldrh	r3, [r3, #16]
 8000e36:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <MQTT_Connect+0xdc>)
 8000e3c:	f002 f830 	bl	8002ea0 <siprintf>
    SIM800_SendCommand(str, "OK\r\n", CMD_DELAY);
 8000e40:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000e44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e48:	4924      	ldr	r1, [pc, #144]	; (8000edc <MQTT_Connect+0xe0>)
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff ff2e 	bl	8000cac <SIM800_SendCommand>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 8000e50:	f241 3088 	movw	r0, #5000	; 0x1388
 8000e54:	f000 fcc4 	bl	80017e0 <HAL_Delay>
#endif
    if (SIM800.mqttServer.connect == 1) {
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <MQTT_Connect+0xd8>)
 8000e5a:	7c9b      	ldrb	r3, [r3, #18]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d133      	bne.n	8000ec8 <MQTT_Connect+0xcc>
    	printf("MQTT CONNECTED");
 8000e60:	481f      	ldr	r0, [pc, #124]	; (8000ee0 <MQTT_Connect+0xe4>)
 8000e62:	f001 ffd1 	bl	8002e08 <iprintf>
        MQTTPacket_connectData datas = MQTTPacket_connectData_initializer;
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	4a1e      	ldr	r2, [pc, #120]	; (8000ee4 <MQTT_Connect+0xe8>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	4611      	mov	r1, r2
 8000e6e:	2358      	movs	r3, #88	; 0x58
 8000e70:	461a      	mov	r2, r3
 8000e72:	f001 ffb5 	bl	8002de0 <memcpy>
        datas.username.cstring = SIM800.mqttClient.username;
 8000e76:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <MQTT_Connect+0xd8>)
 8000e78:	695a      	ldr	r2, [r3, #20]
 8000e7a:	1d3b      	adds	r3, r7, #4
 8000e7c:	641a      	str	r2, [r3, #64]	; 0x40
        datas.password.cstring = SIM800.mqttClient.pass;
 8000e7e:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <MQTT_Connect+0xd8>)
 8000e80:	699a      	ldr	r2, [r3, #24]
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	64da      	str	r2, [r3, #76]	; 0x4c
        datas.clientID.cstring = SIM800.mqttClient.clientID;
 8000e86:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <MQTT_Connect+0xd8>)
 8000e88:	69da      	ldr	r2, [r3, #28]
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	60da      	str	r2, [r3, #12]
        datas.keepAliveInterval = SIM800.mqttClient.keepAliveInterval;
 8000e8e:	4b11      	ldr	r3, [pc, #68]	; (8000ed4 <MQTT_Connect+0xd8>)
 8000e90:	8c1a      	ldrh	r2, [r3, #32]
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	831a      	strh	r2, [r3, #24]
        datas.cleansession = 1;
 8000e96:	1d3b      	adds	r3, r7, #4
 8000e98:	2201      	movs	r2, #1
 8000e9a:	769a      	strb	r2, [r3, #26]
        int mqtt_len = MQTTSerialize_connect(buf, sizeof(buf), &datas);
 8000e9c:	1d3a      	adds	r2, r7, #4
 8000e9e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ea2:	2180      	movs	r1, #128	; 0x80
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff f9bb 	bl	8000220 <MQTTSerialize_connect>
 8000eaa:	f8c7 015c 	str.w	r0, [r7, #348]	; 0x15c
        HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8000eae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <MQTT_Connect+0xec>)
 8000ebc:	f001 fc11 	bl	80026e2 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
        osDelay(5000);
#else
        HAL_Delay(5000);
 8000ec0:	f241 3088 	movw	r0, #5000	; 0x1388
 8000ec4:	f000 fc8c 	bl	80017e0 <HAL_Delay>
#endif
    }
}
 8000ec8:	bf00      	nop
 8000eca:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	20000d7c 	.word	0x20000d7c
 8000ed8:	08004238 	.word	0x08004238
 8000edc:	080041bc 	.word	0x080041bc
 8000ee0:	08004254 	.word	0x08004254
 8000ee4:	08004264 	.word	0x08004264
 8000ee8:	20000e34 	.word	0x20000e34

08000eec <MQTT_Pub>:
 * Public on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @param payload to be used to the set message for topic
 * @return NONE
 */
void MQTT_Pub(char *topic, char *payload) {
 8000eec:	b590      	push	{r4, r7, lr}
 8000eee:	b0cf      	sub	sp, #316	; 0x13c
 8000ef0:	af08      	add	r7, sp, #32
 8000ef2:	1d3b      	adds	r3, r7, #4
 8000ef4:	6018      	str	r0, [r3, #0]
 8000ef6:	463b      	mov	r3, r7
 8000ef8:	6019      	str	r1, [r3, #0]
    unsigned char buf[256] = {0};
 8000efa:	f107 0314 	add.w	r3, r7, #20
 8000efe:	4618      	mov	r0, r3
 8000f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f04:	461a      	mov	r2, r3
 8000f06:	2100      	movs	r1, #0
 8000f08:	f001 ff75 	bl	8002df6 <memset>

    MQTTString topicString = MQTTString_initializer;
 8000f0c:	f107 0308 	add.w	r3, r7, #8
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	2200      	movs	r2, #0
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	f107 0308 	add.w	r3, r7, #8
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8000f24:	f107 0308 	add.w	r3, r7, #8
 8000f28:	1d3a      	adds	r2, r7, #4
 8000f2a:	6812      	ldr	r2, [r2, #0]
 8000f2c:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
                                         topicString, (unsigned char *) payload, (int) strlen(payload));
 8000f2e:	463b      	mov	r3, r7
 8000f30:	6818      	ldr	r0, [r3, #0]
 8000f32:	f7ff f90b 	bl	800014c <strlen>
 8000f36:	4603      	mov	r3, r0
    int mqtt_len = MQTTSerialize_publish(buf, sizeof(buf), 0, 0, 0, 0,
 8000f38:	f107 0414 	add.w	r4, r7, #20
 8000f3c:	9306      	str	r3, [sp, #24]
 8000f3e:	463b      	mov	r3, r7
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	9305      	str	r3, [sp, #20]
 8000f44:	f107 0208 	add.w	r2, r7, #8
 8000f48:	ab02      	add	r3, sp, #8
 8000f4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f4c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8000f50:	2300      	movs	r3, #0
 8000f52:	9301      	str	r3, [sp, #4]
 8000f54:	2300      	movs	r3, #0
 8000f56:	9300      	str	r3, [sp, #0]
 8000f58:	2300      	movs	r3, #0
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f60:	4620      	mov	r0, r4
 8000f62:	f7ff fca7 	bl	80008b4 <MQTTSerialize_publish>
 8000f66:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8000f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f6e:	b29a      	uxth	r2, r3
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4804      	ldr	r0, [pc, #16]	; (8000f88 <MQTT_Pub+0x9c>)
 8000f78:	f001 fbb3 	bl	80026e2 <HAL_UART_Transmit_IT>
}
 8000f7c:	bf00      	nop
 8000f7e:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd90      	pop	{r4, r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000e34 	.word	0x20000e34

08000f8c <MQTT_Sub>:
/**
 * Subscribe on the MQTT broker of the message in a topic
 * @param topic to be used to the set topic
 * @return NONE
 */
void MQTT_Sub(char *topic) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b0ca      	sub	sp, #296	; 0x128
 8000f90:	af04      	add	r7, sp, #16
 8000f92:	1d3b      	adds	r3, r7, #4
 8000f94:	6018      	str	r0, [r3, #0]
    unsigned char buf[256] = {0};
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	f001 ff27 	bl	8002df6 <memset>

    MQTTString topicString = MQTTString_initializer;
 8000fa8:	f107 0308 	add.w	r3, r7, #8
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	f107 0308 	add.w	r3, r7, #8
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	609a      	str	r2, [r3, #8]
    topicString.cstring = topic;
 8000fc0:	f107 0308 	add.w	r3, r7, #8
 8000fc4:	1d3a      	adds	r2, r7, #4
 8000fc6:	6812      	ldr	r2, [r2, #0]
 8000fc8:	601a      	str	r2, [r3, #0]

    int mqtt_len = MQTTSerialize_subscribe(buf, sizeof(buf), 0, 1, 1,
 8000fca:	f107 0014 	add.w	r0, r7, #20
 8000fce:	2300      	movs	r3, #0
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	f107 0308 	add.w	r3, r7, #8
 8000fd6:	9301      	str	r3, [sp, #4]
 8000fd8:	2301      	movs	r3, #1
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fe4:	f7ff fd04 	bl	80009f0 <MQTTSerialize_subscribe>
 8000fe8:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
                                           &topicString, 0);
    HAL_UART_Transmit_IT(UART_SIM800, buf, mqtt_len);
 8000fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000ff0:	b29a      	uxth	r2, r3
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4805      	ldr	r0, [pc, #20]	; (8001010 <MQTT_Sub+0x84>)
 8000ffa:	f001 fb72 	bl	80026e2 <HAL_UART_Transmit_IT>
#if FREERTOS == 1
    osDelay(5000);
#else
    HAL_Delay(5000);
 8000ffe:	f241 3088 	movw	r0, #5000	; 0x1388
 8001002:	f000 fbed 	bl	80017e0 <HAL_Delay>
#endif
}
 8001006:	bf00      	nop
 8001008:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000e34 	.word	0x20000e34

08001014 <MQTT_Receive>:
/**
 * Receive message from MQTT broker
 * @param receive mqtt bufer
 * @return NONE
 */
void MQTT_Receive(unsigned char *buf) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b08c      	sub	sp, #48	; 0x30
 8001018:	af06      	add	r7, sp, #24
 800101a:	6078      	str	r0, [r7, #4]
    memset(SIM800.mqttReceive.topic, 0, sizeof(SIM800.mqttReceive.topic));
 800101c:	2240      	movs	r2, #64	; 0x40
 800101e:	2100      	movs	r1, #0
 8001020:	4819      	ldr	r0, [pc, #100]	; (8001088 <MQTT_Receive+0x74>)
 8001022:	f001 fee8 	bl	8002df6 <memset>
    memset(SIM800.mqttReceive.payload, 0, sizeof(SIM800.mqttReceive.payload));
 8001026:	2240      	movs	r2, #64	; 0x40
 8001028:	2100      	movs	r1, #0
 800102a:	4818      	ldr	r0, [pc, #96]	; (800108c <MQTT_Receive+0x78>)
 800102c:	f001 fee3 	bl	8002df6 <memset>
    MQTTString receivedTopic;
    unsigned char *payload;
    MQTTDeserialize_publish(&SIM800.mqttReceive.dup, &SIM800.mqttReceive.qos, &SIM800.mqttReceive.retained,
 8001030:	2304      	movs	r3, #4
 8001032:	9304      	str	r3, [sp, #16]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	9303      	str	r3, [sp, #12]
 8001038:	4b15      	ldr	r3, [pc, #84]	; (8001090 <MQTT_Receive+0x7c>)
 800103a:	9302      	str	r3, [sp, #8]
 800103c:	f107 0308 	add.w	r3, r7, #8
 8001040:	9301      	str	r3, [sp, #4]
 8001042:	f107 030c 	add.w	r3, r7, #12
 8001046:	9300      	str	r3, [sp, #0]
 8001048:	4b12      	ldr	r3, [pc, #72]	; (8001094 <MQTT_Receive+0x80>)
 800104a:	4a13      	ldr	r2, [pc, #76]	; (8001098 <MQTT_Receive+0x84>)
 800104c:	4913      	ldr	r1, [pc, #76]	; (800109c <MQTT_Receive+0x88>)
 800104e:	4814      	ldr	r0, [pc, #80]	; (80010a0 <MQTT_Receive+0x8c>)
 8001050:	f7ff f9d4 	bl	80003fc <MQTTDeserialize_publish>
                            &SIM800.mqttReceive.msgId,
                            &receivedTopic, &payload, &SIM800.mqttReceive.payloadLen, buf,
                            sizeof(buf));
    memcpy(SIM800.mqttReceive.topic, receivedTopic.lenstring.data, receivedTopic.lenstring.len);
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4619      	mov	r1, r3
 800105a:	480b      	ldr	r0, [pc, #44]	; (8001088 <MQTT_Receive+0x74>)
 800105c:	f001 fec0 	bl	8002de0 <memcpy>
    SIM800.mqttReceive.topicLen = receivedTopic.lenstring.len;
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4a10      	ldr	r2, [pc, #64]	; (80010a4 <MQTT_Receive+0x90>)
 8001064:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    memcpy(SIM800.mqttReceive.payload, payload, SIM800.mqttReceive.payloadLen);
 8001068:	68b9      	ldr	r1, [r7, #8]
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MQTT_Receive+0x90>)
 800106c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800106e:	461a      	mov	r2, r3
 8001070:	4806      	ldr	r0, [pc, #24]	; (800108c <MQTT_Receive+0x78>)
 8001072:	f001 feb5 	bl	8002de0 <memcpy>
    SIM800.mqttReceive.newEvent = 1;
 8001076:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <MQTT_Receive+0x90>)
 8001078:	2201      	movs	r2, #1
 800107a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
}
 800107e:	bf00      	nop
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000df0 	.word	0x20000df0
 800108c:	20000dac 	.word	0x20000dac
 8001090:	20000dec 	.word	0x20000dec
 8001094:	20000daa 	.word	0x20000daa
 8001098:	20000da8 	.word	0x20000da8
 800109c:	20000da4 	.word	0x20000da4
 80010a0:	20000da1 	.word	0x20000da1
 80010a4:	20000d7c 	.word	0x20000d7c

080010a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010bc:	4b1e      	ldr	r3, [pc, #120]	; (8001138 <MX_GPIO_Init+0x90>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <MX_GPIO_Init+0x90>)
 80010c2:	f043 0310 	orr.w	r3, r3, #16
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b1b      	ldr	r3, [pc, #108]	; (8001138 <MX_GPIO_Init+0x90>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0310 	and.w	r3, r3, #16
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <MX_GPIO_Init+0x90>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a17      	ldr	r2, [pc, #92]	; (8001138 <MX_GPIO_Init+0x90>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b15      	ldr	r3, [pc, #84]	; (8001138 <MX_GPIO_Init+0x90>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0308 	and.w	r3, r3, #8
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <MX_GPIO_Init+0x90>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a11      	ldr	r2, [pc, #68]	; (8001138 <MX_GPIO_Init+0x90>)
 80010f2:	f043 0304 	orr.w	r3, r3, #4
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0f      	ldr	r3, [pc, #60]	; (8001138 <MX_GPIO_Init+0x90>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0304 	and.w	r3, r3, #4
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 8001104:	2200      	movs	r2, #0
 8001106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800110a:	480c      	ldr	r0, [pc, #48]	; (800113c <MX_GPIO_Init+0x94>)
 800110c:	f000 fe68 	bl	8001de0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Led_Pin;
 8001110:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001114:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001116:	2301      	movs	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2302      	movs	r3, #2
 8001120:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0310 	add.w	r3, r7, #16
 8001126:	4619      	mov	r1, r3
 8001128:	4804      	ldr	r0, [pc, #16]	; (800113c <MX_GPIO_Init+0x94>)
 800112a:	f000 fcff 	bl	8001b2c <HAL_GPIO_Init>

}
 800112e:	bf00      	nop
 8001130:	3720      	adds	r7, #32
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	40011000 	.word	0x40011000

08001140 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
    if (huart == UART_SIM800) {
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <HAL_UART_RxCpltCallback+0x1c>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d101      	bne.n	8001154 <HAL_UART_RxCpltCallback+0x14>
        Sim800_RxCallBack();
 8001150:	f7ff fccc 	bl	8000aec <Sim800_RxCallBack>
    }
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	20000e34 	.word	0x20000e34

08001160 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001166:	f000 fad9 	bl	800171c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116a:	f000 f871 	bl	8001250 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800116e:	f7ff ff9b 	bl	80010a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001172:	f000 f9c1 	bl	80014f8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8001176:	f000 f9e9 	bl	800154c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  	 SIM800.sim.apn = "internet";
 800117a:	4b29      	ldr	r3, [pc, #164]	; (8001220 <main+0xc0>)
 800117c:	4a29      	ldr	r2, [pc, #164]	; (8001224 <main+0xc4>)
 800117e:	601a      	str	r2, [r3, #0]
     SIM800.sim.apn_user = "";
 8001180:	4b27      	ldr	r3, [pc, #156]	; (8001220 <main+0xc0>)
 8001182:	4a29      	ldr	r2, [pc, #164]	; (8001228 <main+0xc8>)
 8001184:	605a      	str	r2, [r3, #4]
     SIM800.sim.apn_pass = "";
 8001186:	4b26      	ldr	r3, [pc, #152]	; (8001220 <main+0xc0>)
 8001188:	4a27      	ldr	r2, [pc, #156]	; (8001228 <main+0xc8>)
 800118a:	609a      	str	r2, [r3, #8]
     SIM800.mqttServer.host = "M3.WQTT.RU";
 800118c:	4b24      	ldr	r3, [pc, #144]	; (8001220 <main+0xc0>)
 800118e:	4a27      	ldr	r2, [pc, #156]	; (800122c <main+0xcc>)
 8001190:	60da      	str	r2, [r3, #12]
     SIM800.mqttServer.port = 2902;
 8001192:	4b23      	ldr	r3, [pc, #140]	; (8001220 <main+0xc0>)
 8001194:	f640 3256 	movw	r2, #2902	; 0xb56
 8001198:	821a      	strh	r2, [r3, #16]
     SIM800.mqttClient.username = "test";
 800119a:	4b21      	ldr	r3, [pc, #132]	; (8001220 <main+0xc0>)
 800119c:	4a24      	ldr	r2, [pc, #144]	; (8001230 <main+0xd0>)
 800119e:	615a      	str	r2, [r3, #20]
     SIM800.mqttClient.pass = "test";
 80011a0:	4b1f      	ldr	r3, [pc, #124]	; (8001220 <main+0xc0>)
 80011a2:	4a23      	ldr	r2, [pc, #140]	; (8001230 <main+0xd0>)
 80011a4:	619a      	str	r2, [r3, #24]
     SIM800.mqttClient.clientID = "STM";
 80011a6:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <main+0xc0>)
 80011a8:	4a22      	ldr	r2, [pc, #136]	; (8001234 <main+0xd4>)
 80011aa:	61da      	str	r2, [r3, #28]
     SIM800.mqttClient.keepAliveInterval = 120;
 80011ac:	4b1c      	ldr	r3, [pc, #112]	; (8001220 <main+0xc0>)
 80011ae:	2278      	movs	r2, #120	; 0x78
 80011b0:	841a      	strh	r2, [r3, #32]
     MQTT_Init();
 80011b2:	f7ff fda7 	bl	8000d04 <MQTT_Init>
     uint8_t sub = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */
	  if (SIM800.mqttServer.connect == 0) {
 80011ba:	4b19      	ldr	r3, [pc, #100]	; (8001220 <main+0xc0>)
 80011bc:	7c9b      	ldrb	r3, [r3, #18]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d106      	bne.n	80011d0 <main+0x70>
	           MQTT_Init();
 80011c2:	f7ff fd9f 	bl	8000d04 <MQTT_Init>
	           printf("NOT CONNECTED");
 80011c6:	481c      	ldr	r0, [pc, #112]	; (8001238 <main+0xd8>)
 80011c8:	f001 fe1e 	bl	8002e08 <iprintf>
	           sub = 0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
	       }
	       if (SIM800.mqttServer.connect == 1) {
 80011d0:	4b13      	ldr	r3, [pc, #76]	; (8001220 <main+0xc0>)
 80011d2:	7c9b      	ldrb	r3, [r3, #18]
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	d11d      	bne.n	8001214 <main+0xb4>
	    	   printf("CONNECTED");
 80011d8:	4818      	ldr	r0, [pc, #96]	; (800123c <main+0xdc>)
 80011da:	f001 fe15 	bl	8002e08 <iprintf>
	           if(sub == 0){
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d104      	bne.n	80011ee <main+0x8e>
	               MQTT_Sub("test");
 80011e4:	4812      	ldr	r0, [pc, #72]	; (8001230 <main+0xd0>)
 80011e6:	f7ff fed1 	bl	8000f8c <MQTT_Sub>

	               sub = 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
	           }
	           MQTT_Pub("data/AA:BB:CC:11:22:33/", "HelloFromSTM");
 80011ee:	4914      	ldr	r1, [pc, #80]	; (8001240 <main+0xe0>)
 80011f0:	4814      	ldr	r0, [pc, #80]	; (8001244 <main+0xe4>)
 80011f2:	f7ff fe7b 	bl	8000eec <MQTT_Pub>

	           if(SIM800.mqttReceive.newEvent) {
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <main+0xc0>)
 80011f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d009      	beq.n	8001214 <main+0xb4>
	               unsigned char *topic = SIM800.mqttReceive.topic;
 8001200:	4b11      	ldr	r3, [pc, #68]	; (8001248 <main+0xe8>)
 8001202:	60bb      	str	r3, [r7, #8]
	               int payload = atoi(SIM800.mqttReceive.payload);
 8001204:	4811      	ldr	r0, [pc, #68]	; (800124c <main+0xec>)
 8001206:	f001 fdbd 	bl	8002d84 <atoi>
 800120a:	6078      	str	r0, [r7, #4]
	               SIM800.mqttReceive.newEvent = 0;
 800120c:	4b04      	ldr	r3, [pc, #16]	; (8001220 <main+0xc0>)
 800120e:	2200      	movs	r2, #0
 8001210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	           }
	       }
	       HAL_Delay(1000);
 8001214:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001218:	f000 fae2 	bl	80017e0 <HAL_Delay>
	  if (SIM800.mqttServer.connect == 0) {
 800121c:	e7cd      	b.n	80011ba <main+0x5a>
 800121e:	bf00      	nop
 8001220:	20000d7c 	.word	0x20000d7c
 8001224:	080042bc 	.word	0x080042bc
 8001228:	080042c8 	.word	0x080042c8
 800122c:	080042cc 	.word	0x080042cc
 8001230:	080042d8 	.word	0x080042d8
 8001234:	080042e0 	.word	0x080042e0
 8001238:	080042e4 	.word	0x080042e4
 800123c:	080042f4 	.word	0x080042f4
 8001240:	08004300 	.word	0x08004300
 8001244:	08004310 	.word	0x08004310
 8001248:	20000df0 	.word	0x20000df0
 800124c:	20000dac 	.word	0x20000dac

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b090      	sub	sp, #64	; 0x40
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0318 	add.w	r3, r7, #24
 800125a:	2228      	movs	r2, #40	; 0x28
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f001 fdc9 	bl	8002df6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
 8001270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001272:	2302      	movs	r3, #2
 8001274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001276:	2301      	movs	r3, #1
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800127a:	2310      	movs	r3, #16
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800127e:	2300      	movs	r3, #0
 8001280:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001282:	f107 0318 	add.w	r3, r7, #24
 8001286:	4618      	mov	r0, r3
 8001288:	f000 fdc2 	bl	8001e10 <HAL_RCC_OscConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001292:	f000 f818 	bl	80012c6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001296:	230f      	movs	r3, #15
 8001298:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800129a:	2300      	movs	r3, #0
 800129c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f001 f82e 	bl	8002310 <HAL_RCC_ClockConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80012ba:	f000 f804 	bl	80012c6 <Error_Handler>
  }
}
 80012be:	bf00      	nop
 80012c0:	3740      	adds	r7, #64	; 0x40
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c6:	b480      	push	{r7}
 80012c8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ca:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x6>
	...

080012d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_MspInit+0x5c>)
 80012d8:	699b      	ldr	r3, [r3, #24]
 80012da:	4a14      	ldr	r2, [pc, #80]	; (800132c <HAL_MspInit+0x5c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6193      	str	r3, [r2, #24]
 80012e2:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_MspInit+0x5c>)
 80012e4:	699b      	ldr	r3, [r3, #24]
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_MspInit+0x5c>)
 80012f0:	69db      	ldr	r3, [r3, #28]
 80012f2:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_MspInit+0x5c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	61d3      	str	r3, [r2, #28]
 80012fa:	4b0c      	ldr	r3, [pc, #48]	; (800132c <HAL_MspInit+0x5c>)
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_MspInit+0x60>)
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	4a04      	ldr	r2, [pc, #16]	; (8001330 <HAL_MspInit+0x60>)
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000

08001334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler+0x4>

0800133a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800133a:	b480      	push	{r7}
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <HardFault_Handler+0x4>

08001340 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001344:	e7fe      	b.n	8001344 <MemManage_Handler+0x4>

08001346 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800134a:	e7fe      	b.n	800134a <BusFault_Handler+0x4>

0800134c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001350:	e7fe      	b.n	8001350 <UsageFault_Handler+0x4>

08001352 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr

0800135e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800135e:	b480      	push	{r7}
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001362:	bf00      	nop
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr

0800136a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800136a:	b480      	push	{r7}
 800136c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800136e:	bf00      	nop
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800137a:	f000 fa15 	bl	80017a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001388:	4802      	ldr	r0, [pc, #8]	; (8001394 <USART1_IRQHandler+0x10>)
 800138a:	f001 fa43 	bl	8002814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000e74 	.word	0x20000e74

08001398 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <USART3_IRQHandler+0x10>)
 800139e:	f001 fa39 	bl	8002814 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20000e34 	.word	0x20000e34

080013ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	e00a      	b.n	80013d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80013be:	f3af 8000 	nop.w
 80013c2:	4601      	mov	r1, r0
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	60ba      	str	r2, [r7, #8]
 80013ca:	b2ca      	uxtb	r2, r1
 80013cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	3301      	adds	r3, #1
 80013d2:	617b      	str	r3, [r7, #20]
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	429a      	cmp	r2, r3
 80013da:	dbf0      	blt.n	80013be <_read+0x12>
	}

return len;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3718      	adds	r7, #24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	60f8      	str	r0, [r7, #12]
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f2:	2300      	movs	r3, #0
 80013f4:	617b      	str	r3, [r7, #20]
 80013f6:	e009      	b.n	800140c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	1c5a      	adds	r2, r3, #1
 80013fc:	60ba      	str	r2, [r7, #8]
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	3301      	adds	r3, #1
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697a      	ldr	r2, [r7, #20]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	429a      	cmp	r2, r3
 8001412:	dbf1      	blt.n	80013f8 <_write+0x12>
	}
	return len;
 8001414:	687b      	ldr	r3, [r7, #4]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <_close>:

int _close(int file)
{
 800141e:	b480      	push	{r7}
 8001420:	b083      	sub	sp, #12
 8001422:	af00      	add	r7, sp, #0
 8001424:	6078      	str	r0, [r7, #4]
	return -1;
 8001426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142a:	4618      	mov	r0, r3
 800142c:	370c      	adds	r7, #12
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001444:	605a      	str	r2, [r3, #4]
	return 0;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <_isatty>:

int _isatty(int file)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
	return 1;
 800145a:	2301      	movs	r3, #1
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	bc80      	pop	{r7}
 8001464:	4770      	bx	lr

08001466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001466:	b480      	push	{r7}
 8001468:	b085      	sub	sp, #20
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
	return 0;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bc80      	pop	{r7}
 800147c:	4770      	bx	lr
	...

08001480 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001488:	4a14      	ldr	r2, [pc, #80]	; (80014dc <_sbrk+0x5c>)
 800148a:	4b15      	ldr	r3, [pc, #84]	; (80014e0 <_sbrk+0x60>)
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001494:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <_sbrk+0x64>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d102      	bne.n	80014a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <_sbrk+0x64>)
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <_sbrk+0x68>)
 80014a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <_sbrk+0x64>)
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4413      	add	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d207      	bcs.n	80014c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014b0:	f001 fc6c 	bl	8002d8c <__errno>
 80014b4:	4602      	mov	r2, r0
 80014b6:	230c      	movs	r3, #12
 80014b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	e009      	b.n	80014d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014c0:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <_sbrk+0x64>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014c6:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <_sbrk+0x64>)
 80014d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014d2:	68fb      	ldr	r3, [r7, #12]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3718      	adds	r7, #24
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20005000 	.word	0x20005000
 80014e0:	00000400 	.word	0x00000400
 80014e4:	20000d70 	.word	0x20000d70
 80014e8:	20000ec0 	.word	0x20000ec0

080014ec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014f0:	bf00      	nop
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_USART1_UART_Init+0x4c>)
 80014fe:	4a12      	ldr	r2, [pc, #72]	; (8001548 <MX_USART1_UART_Init+0x50>)
 8001500:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001502:	4b10      	ldr	r3, [pc, #64]	; (8001544 <MX_USART1_UART_Init+0x4c>)
 8001504:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001508:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800150a:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_USART1_UART_Init+0x4c>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_USART1_UART_Init+0x4c>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001516:	4b0b      	ldr	r3, [pc, #44]	; (8001544 <MX_USART1_UART_Init+0x4c>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800151c:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_USART1_UART_Init+0x4c>)
 800151e:	220c      	movs	r2, #12
 8001520:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <MX_USART1_UART_Init+0x4c>)
 8001524:	2200      	movs	r2, #0
 8001526:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001528:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_USART1_UART_Init+0x4c>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800152e:	4805      	ldr	r0, [pc, #20]	; (8001544 <MX_USART1_UART_Init+0x4c>)
 8001530:	f001 f88a 	bl	8002648 <HAL_UART_Init>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800153a:	f7ff fec4 	bl	80012c6 <Error_Handler>
  }

}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000e74 	.word	0x20000e74
 8001548:	40013800 	.word	0x40013800

0800154c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <MX_USART3_UART_Init+0x50>)
 8001554:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001558:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800155c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800155e:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001564:	4b0c      	ldr	r3, [pc, #48]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800156a:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 800156c:	2200      	movs	r2, #0
 800156e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001570:	4b09      	ldr	r3, [pc, #36]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001572:	220c      	movs	r2, #12
 8001574:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001576:	4b08      	ldr	r3, [pc, #32]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001578:	2200      	movs	r2, #0
 800157a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800157c:	4b06      	ldr	r3, [pc, #24]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 800157e:	2200      	movs	r2, #0
 8001580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001582:	4805      	ldr	r0, [pc, #20]	; (8001598 <MX_USART3_UART_Init+0x4c>)
 8001584:	f001 f860 	bl	8002648 <HAL_UART_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800158e:	f7ff fe9a 	bl	80012c6 <Error_Handler>
  }

}
 8001592:	bf00      	nop
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	20000e34 	.word	0x20000e34
 800159c:	40004800 	.word	0x40004800

080015a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b08a      	sub	sp, #40	; 0x28
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a8:	f107 0318 	add.w	r3, r7, #24
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
 80015b2:	609a      	str	r2, [r3, #8]
 80015b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a40      	ldr	r2, [pc, #256]	; (80016bc <HAL_UART_MspInit+0x11c>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d13a      	bne.n	8001636 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015c0:	4b3f      	ldr	r3, [pc, #252]	; (80016c0 <HAL_UART_MspInit+0x120>)
 80015c2:	699b      	ldr	r3, [r3, #24]
 80015c4:	4a3e      	ldr	r2, [pc, #248]	; (80016c0 <HAL_UART_MspInit+0x120>)
 80015c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015ca:	6193      	str	r3, [r2, #24]
 80015cc:	4b3c      	ldr	r3, [pc, #240]	; (80016c0 <HAL_UART_MspInit+0x120>)
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d4:	617b      	str	r3, [r7, #20]
 80015d6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d8:	4b39      	ldr	r3, [pc, #228]	; (80016c0 <HAL_UART_MspInit+0x120>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a38      	ldr	r2, [pc, #224]	; (80016c0 <HAL_UART_MspInit+0x120>)
 80015de:	f043 0304 	orr.w	r3, r3, #4
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b36      	ldr	r3, [pc, #216]	; (80016c0 <HAL_UART_MspInit+0x120>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80015f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015fa:	2303      	movs	r3, #3
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fe:	f107 0318 	add.w	r3, r7, #24
 8001602:	4619      	mov	r1, r3
 8001604:	482f      	ldr	r0, [pc, #188]	; (80016c4 <HAL_UART_MspInit+0x124>)
 8001606:	f000 fa91 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800160a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	4619      	mov	r1, r3
 800161e:	4829      	ldr	r0, [pc, #164]	; (80016c4 <HAL_UART_MspInit+0x124>)
 8001620:	f000 fa84 	bl	8001b2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	2025      	movs	r0, #37	; 0x25
 800162a:	f000 f9d2 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800162e:	2025      	movs	r0, #37	; 0x25
 8001630:	f000 f9eb 	bl	8001a0a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001634:	e03e      	b.n	80016b4 <HAL_UART_MspInit+0x114>
  else if(uartHandle->Instance==USART3)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a23      	ldr	r2, [pc, #140]	; (80016c8 <HAL_UART_MspInit+0x128>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d139      	bne.n	80016b4 <HAL_UART_MspInit+0x114>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001640:	4b1f      	ldr	r3, [pc, #124]	; (80016c0 <HAL_UART_MspInit+0x120>)
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	4a1e      	ldr	r2, [pc, #120]	; (80016c0 <HAL_UART_MspInit+0x120>)
 8001646:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800164a:	61d3      	str	r3, [r2, #28]
 800164c:	4b1c      	ldr	r3, [pc, #112]	; (80016c0 <HAL_UART_MspInit+0x120>)
 800164e:	69db      	ldr	r3, [r3, #28]
 8001650:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <HAL_UART_MspInit+0x120>)
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	4a18      	ldr	r2, [pc, #96]	; (80016c0 <HAL_UART_MspInit+0x120>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6193      	str	r3, [r2, #24]
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <HAL_UART_MspInit+0x120>)
 8001666:	699b      	ldr	r3, [r3, #24]
 8001668:	f003 0308 	and.w	r3, r3, #8
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001674:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001676:	2302      	movs	r3, #2
 8001678:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167e:	f107 0318 	add.w	r3, r7, #24
 8001682:	4619      	mov	r1, r3
 8001684:	4811      	ldr	r0, [pc, #68]	; (80016cc <HAL_UART_MspInit+0x12c>)
 8001686:	f000 fa51 	bl	8001b2c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800168a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800168e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 0318 	add.w	r3, r7, #24
 800169c:	4619      	mov	r1, r3
 800169e:	480b      	ldr	r0, [pc, #44]	; (80016cc <HAL_UART_MspInit+0x12c>)
 80016a0:	f000 fa44 	bl	8001b2c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2027      	movs	r0, #39	; 0x27
 80016aa:	f000 f992 	bl	80019d2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80016ae:	2027      	movs	r0, #39	; 0x27
 80016b0:	f000 f9ab 	bl	8001a0a <HAL_NVIC_EnableIRQ>
}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40013800 	.word	0x40013800
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40010800 	.word	0x40010800
 80016c8:	40004800 	.word	0x40004800
 80016cc:	40010c00 	.word	0x40010c00

080016d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016d0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016d2:	e003      	b.n	80016dc <LoopCopyDataInit>

080016d4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016d4:	4b0b      	ldr	r3, [pc, #44]	; (8001704 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016d6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016d8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016da:	3104      	adds	r1, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016dc:	480a      	ldr	r0, [pc, #40]	; (8001708 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016e0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016e2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016e4:	d3f6      	bcc.n	80016d4 <CopyDataInit>
  ldr r2, =_sbss
 80016e6:	4a0a      	ldr	r2, [pc, #40]	; (8001710 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016e8:	e002      	b.n	80016f0 <LoopFillZerobss>

080016ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016ea:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016ec:	f842 3b04 	str.w	r3, [r2], #4

080016f0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016f2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016f4:	d3f9      	bcc.n	80016ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016f6:	f7ff fef9 	bl	80014ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016fa:	f001 fb4d 	bl	8002d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016fe:	f7ff fd2f 	bl	8001160 <main>
  bx lr
 8001702:	4770      	bx	lr
  ldr r3, =_sidata
 8001704:	08004500 	.word	0x08004500
  ldr r0, =_sdata
 8001708:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800170c:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8001710:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8001714:	20000ebc 	.word	0x20000ebc

08001718 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001718:	e7fe      	b.n	8001718 <ADC1_2_IRQHandler>
	...

0800171c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001720:	4b08      	ldr	r3, [pc, #32]	; (8001744 <HAL_Init+0x28>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a07      	ldr	r2, [pc, #28]	; (8001744 <HAL_Init+0x28>)
 8001726:	f043 0310 	orr.w	r3, r3, #16
 800172a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800172c:	2003      	movs	r0, #3
 800172e:	f000 f945 	bl	80019bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001732:	2000      	movs	r0, #0
 8001734:	f000 f808 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001738:	f7ff fdca 	bl	80012d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40022000 	.word	0x40022000

08001748 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b082      	sub	sp, #8
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001750:	4b12      	ldr	r3, [pc, #72]	; (800179c <HAL_InitTick+0x54>)
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <HAL_InitTick+0x58>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4619      	mov	r1, r3
 800175a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800175e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001762:	fbb2 f3f3 	udiv	r3, r2, r3
 8001766:	4618      	mov	r0, r3
 8001768:	f000 f95d 	bl	8001a26 <HAL_SYSTICK_Config>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e00e      	b.n	8001794 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2b0f      	cmp	r3, #15
 800177a:	d80a      	bhi.n	8001792 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800177c:	2200      	movs	r2, #0
 800177e:	6879      	ldr	r1, [r7, #4]
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f000 f925 	bl	80019d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001788:	4a06      	ldr	r2, [pc, #24]	; (80017a4 <HAL_InitTick+0x5c>)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800178e:	2300      	movs	r3, #0
 8001790:	e000      	b.n	8001794 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
}
 8001794:	4618      	mov	r0, r3
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000000 	.word	0x20000000
 80017a0:	20000008 	.word	0x20000008
 80017a4:	20000004 	.word	0x20000004

080017a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HAL_IncTick+0x1c>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b05      	ldr	r3, [pc, #20]	; (80017c8 <HAL_IncTick+0x20>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4413      	add	r3, r2
 80017b8:	4a03      	ldr	r2, [pc, #12]	; (80017c8 <HAL_IncTick+0x20>)
 80017ba:	6013      	str	r3, [r2, #0]
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr
 80017c4:	20000008 	.word	0x20000008
 80017c8:	20000eb4 	.word	0x20000eb4

080017cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  return uwTick;
 80017d0:	4b02      	ldr	r3, [pc, #8]	; (80017dc <HAL_GetTick+0x10>)
 80017d2:	681b      	ldr	r3, [r3, #0]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	20000eb4 	.word	0x20000eb4

080017e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017e8:	f7ff fff0 	bl	80017cc <HAL_GetTick>
 80017ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017f8:	d005      	beq.n	8001806 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_Delay+0x40>)
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	4413      	add	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001806:	bf00      	nop
 8001808:	f7ff ffe0 	bl	80017cc <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68fa      	ldr	r2, [r7, #12]
 8001814:	429a      	cmp	r2, r3
 8001816:	d8f7      	bhi.n	8001808 <HAL_Delay+0x28>
  {
  }
}
 8001818:	bf00      	nop
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	20000008 	.word	0x20000008

08001824 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001824:	b480      	push	{r7}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800183a:	68ba      	ldr	r2, [r7, #8]
 800183c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001840:	4013      	ands	r3, r2
 8001842:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800184c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001850:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001854:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001856:	4a04      	ldr	r2, [pc, #16]	; (8001868 <__NVIC_SetPriorityGrouping+0x44>)
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	60d3      	str	r3, [r2, #12]
}
 800185c:	bf00      	nop
 800185e:	3714      	adds	r7, #20
 8001860:	46bd      	mov	sp, r7
 8001862:	bc80      	pop	{r7}
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001870:	4b04      	ldr	r3, [pc, #16]	; (8001884 <__NVIC_GetPriorityGrouping+0x18>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	0a1b      	lsrs	r3, r3, #8
 8001876:	f003 0307 	and.w	r3, r3, #7
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000ed00 	.word	0xe000ed00

08001888 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001896:	2b00      	cmp	r3, #0
 8001898:	db0b      	blt.n	80018b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	f003 021f 	and.w	r2, r3, #31
 80018a0:	4906      	ldr	r1, [pc, #24]	; (80018bc <__NVIC_EnableIRQ+0x34>)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	2001      	movs	r0, #1
 80018aa:	fa00 f202 	lsl.w	r2, r0, r2
 80018ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr
 80018bc:	e000e100 	.word	0xe000e100

080018c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	6039      	str	r1, [r7, #0]
 80018ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	db0a      	blt.n	80018ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	b2da      	uxtb	r2, r3
 80018d8:	490c      	ldr	r1, [pc, #48]	; (800190c <__NVIC_SetPriority+0x4c>)
 80018da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018de:	0112      	lsls	r2, r2, #4
 80018e0:	b2d2      	uxtb	r2, r2
 80018e2:	440b      	add	r3, r1
 80018e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e8:	e00a      	b.n	8001900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	b2da      	uxtb	r2, r3
 80018ee:	4908      	ldr	r1, [pc, #32]	; (8001910 <__NVIC_SetPriority+0x50>)
 80018f0:	79fb      	ldrb	r3, [r7, #7]
 80018f2:	f003 030f 	and.w	r3, r3, #15
 80018f6:	3b04      	subs	r3, #4
 80018f8:	0112      	lsls	r2, r2, #4
 80018fa:	b2d2      	uxtb	r2, r2
 80018fc:	440b      	add	r3, r1
 80018fe:	761a      	strb	r2, [r3, #24]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000e100 	.word	0xe000e100
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001914:	b480      	push	{r7}
 8001916:	b089      	sub	sp, #36	; 0x24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f003 0307 	and.w	r3, r3, #7
 8001926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	f1c3 0307 	rsb	r3, r3, #7
 800192e:	2b04      	cmp	r3, #4
 8001930:	bf28      	it	cs
 8001932:	2304      	movcs	r3, #4
 8001934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3304      	adds	r3, #4
 800193a:	2b06      	cmp	r3, #6
 800193c:	d902      	bls.n	8001944 <NVIC_EncodePriority+0x30>
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3b03      	subs	r3, #3
 8001942:	e000      	b.n	8001946 <NVIC_EncodePriority+0x32>
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	f04f 32ff 	mov.w	r2, #4294967295
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	43da      	mvns	r2, r3
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	401a      	ands	r2, r3
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800195c:	f04f 31ff 	mov.w	r1, #4294967295
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa01 f303 	lsl.w	r3, r1, r3
 8001966:	43d9      	mvns	r1, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	4313      	orrs	r3, r2
         );
}
 800196e:	4618      	mov	r0, r3
 8001970:	3724      	adds	r7, #36	; 0x24
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3b01      	subs	r3, #1
 8001984:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001988:	d301      	bcc.n	800198e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800198a:	2301      	movs	r3, #1
 800198c:	e00f      	b.n	80019ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198e:	4a0a      	ldr	r2, [pc, #40]	; (80019b8 <SysTick_Config+0x40>)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3b01      	subs	r3, #1
 8001994:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001996:	210f      	movs	r1, #15
 8001998:	f04f 30ff 	mov.w	r0, #4294967295
 800199c:	f7ff ff90 	bl	80018c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019a0:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <SysTick_Config+0x40>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <SysTick_Config+0x40>)
 80019a8:	2207      	movs	r2, #7
 80019aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	e000e010 	.word	0xe000e010

080019bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f7ff ff2d 	bl	8001824 <__NVIC_SetPriorityGrouping>
}
 80019ca:	bf00      	nop
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b086      	sub	sp, #24
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	60b9      	str	r1, [r7, #8]
 80019dc:	607a      	str	r2, [r7, #4]
 80019de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019e0:	2300      	movs	r3, #0
 80019e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e4:	f7ff ff42 	bl	800186c <__NVIC_GetPriorityGrouping>
 80019e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ea:	687a      	ldr	r2, [r7, #4]
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	6978      	ldr	r0, [r7, #20]
 80019f0:	f7ff ff90 	bl	8001914 <NVIC_EncodePriority>
 80019f4:	4602      	mov	r2, r0
 80019f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019fa:	4611      	mov	r1, r2
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff5f 	bl	80018c0 <__NVIC_SetPriority>
}
 8001a02:	bf00      	nop
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	4603      	mov	r3, r0
 8001a12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7ff ff35 	bl	8001888 <__NVIC_EnableIRQ>
}
 8001a1e:	bf00      	nop
 8001a20:	3708      	adds	r7, #8
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a26:	b580      	push	{r7, lr}
 8001a28:	b082      	sub	sp, #8
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff ffa2 	bl	8001978 <SysTick_Config>
 8001a34:	4603      	mov	r3, r0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
	...

08001a40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d005      	beq.n	8001a62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2204      	movs	r2, #4
 8001a5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e051      	b.n	8001b06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f022 020e 	bic.w	r2, r2, #14
 8001a70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f022 0201 	bic.w	r2, r2, #1
 8001a80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a22      	ldr	r2, [pc, #136]	; (8001b10 <HAL_DMA_Abort_IT+0xd0>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d029      	beq.n	8001ae0 <HAL_DMA_Abort_IT+0xa0>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a20      	ldr	r2, [pc, #128]	; (8001b14 <HAL_DMA_Abort_IT+0xd4>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d022      	beq.n	8001adc <HAL_DMA_Abort_IT+0x9c>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a1f      	ldr	r2, [pc, #124]	; (8001b18 <HAL_DMA_Abort_IT+0xd8>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d01a      	beq.n	8001ad6 <HAL_DMA_Abort_IT+0x96>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	; (8001b1c <HAL_DMA_Abort_IT+0xdc>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d012      	beq.n	8001ad0 <HAL_DMA_Abort_IT+0x90>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <HAL_DMA_Abort_IT+0xe0>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d00a      	beq.n	8001aca <HAL_DMA_Abort_IT+0x8a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a1a      	ldr	r2, [pc, #104]	; (8001b24 <HAL_DMA_Abort_IT+0xe4>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d102      	bne.n	8001ac4 <HAL_DMA_Abort_IT+0x84>
 8001abe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ac2:	e00e      	b.n	8001ae2 <HAL_DMA_Abort_IT+0xa2>
 8001ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ac8:	e00b      	b.n	8001ae2 <HAL_DMA_Abort_IT+0xa2>
 8001aca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ace:	e008      	b.n	8001ae2 <HAL_DMA_Abort_IT+0xa2>
 8001ad0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad4:	e005      	b.n	8001ae2 <HAL_DMA_Abort_IT+0xa2>
 8001ad6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ada:	e002      	b.n	8001ae2 <HAL_DMA_Abort_IT+0xa2>
 8001adc:	2310      	movs	r3, #16
 8001ade:	e000      	b.n	8001ae2 <HAL_DMA_Abort_IT+0xa2>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	4a11      	ldr	r2, [pc, #68]	; (8001b28 <HAL_DMA_Abort_IT+0xe8>)
 8001ae4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	4798      	blx	r3
    } 
  }
  return status;
 8001b06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	40020008 	.word	0x40020008
 8001b14:	4002001c 	.word	0x4002001c
 8001b18:	40020030 	.word	0x40020030
 8001b1c:	40020044 	.word	0x40020044
 8001b20:	40020058 	.word	0x40020058
 8001b24:	4002006c 	.word	0x4002006c
 8001b28:	40020000 	.word	0x40020000

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b08b      	sub	sp, #44	; 0x2c
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b36:	2300      	movs	r3, #0
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b3e:	e127      	b.n	8001d90 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b40:	2201      	movs	r2, #1
 8001b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b44:	fa02 f303 	lsl.w	r3, r2, r3
 8001b48:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	f040 8116 	bne.w	8001d8a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	2b12      	cmp	r3, #18
 8001b64:	d034      	beq.n	8001bd0 <HAL_GPIO_Init+0xa4>
 8001b66:	2b12      	cmp	r3, #18
 8001b68:	d80d      	bhi.n	8001b86 <HAL_GPIO_Init+0x5a>
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d02b      	beq.n	8001bc6 <HAL_GPIO_Init+0x9a>
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d804      	bhi.n	8001b7c <HAL_GPIO_Init+0x50>
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d031      	beq.n	8001bda <HAL_GPIO_Init+0xae>
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d01c      	beq.n	8001bb4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b7a:	e048      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d043      	beq.n	8001c08 <HAL_GPIO_Init+0xdc>
 8001b80:	2b11      	cmp	r3, #17
 8001b82:	d01b      	beq.n	8001bbc <HAL_GPIO_Init+0x90>
          break;
 8001b84:	e043      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b86:	4a89      	ldr	r2, [pc, #548]	; (8001dac <HAL_GPIO_Init+0x280>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d026      	beq.n	8001bda <HAL_GPIO_Init+0xae>
 8001b8c:	4a87      	ldr	r2, [pc, #540]	; (8001dac <HAL_GPIO_Init+0x280>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d806      	bhi.n	8001ba0 <HAL_GPIO_Init+0x74>
 8001b92:	4a87      	ldr	r2, [pc, #540]	; (8001db0 <HAL_GPIO_Init+0x284>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d020      	beq.n	8001bda <HAL_GPIO_Init+0xae>
 8001b98:	4a86      	ldr	r2, [pc, #536]	; (8001db4 <HAL_GPIO_Init+0x288>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d01d      	beq.n	8001bda <HAL_GPIO_Init+0xae>
          break;
 8001b9e:	e036      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001ba0:	4a85      	ldr	r2, [pc, #532]	; (8001db8 <HAL_GPIO_Init+0x28c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d019      	beq.n	8001bda <HAL_GPIO_Init+0xae>
 8001ba6:	4a85      	ldr	r2, [pc, #532]	; (8001dbc <HAL_GPIO_Init+0x290>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d016      	beq.n	8001bda <HAL_GPIO_Init+0xae>
 8001bac:	4a84      	ldr	r2, [pc, #528]	; (8001dc0 <HAL_GPIO_Init+0x294>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d013      	beq.n	8001bda <HAL_GPIO_Init+0xae>
          break;
 8001bb2:	e02c      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	623b      	str	r3, [r7, #32]
          break;
 8001bba:	e028      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	68db      	ldr	r3, [r3, #12]
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	623b      	str	r3, [r7, #32]
          break;
 8001bc4:	e023      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	3308      	adds	r3, #8
 8001bcc:	623b      	str	r3, [r7, #32]
          break;
 8001bce:	e01e      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	330c      	adds	r3, #12
 8001bd6:	623b      	str	r3, [r7, #32]
          break;
 8001bd8:	e019      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d102      	bne.n	8001be8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001be2:	2304      	movs	r3, #4
 8001be4:	623b      	str	r3, [r7, #32]
          break;
 8001be6:	e012      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf0:	2308      	movs	r3, #8
 8001bf2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69fa      	ldr	r2, [r7, #28]
 8001bf8:	611a      	str	r2, [r3, #16]
          break;
 8001bfa:	e008      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	69fa      	ldr	r2, [r7, #28]
 8001c04:	615a      	str	r2, [r3, #20]
          break;
 8001c06:	e002      	b.n	8001c0e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	623b      	str	r3, [r7, #32]
          break;
 8001c0c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2bff      	cmp	r3, #255	; 0xff
 8001c12:	d801      	bhi.n	8001c18 <HAL_GPIO_Init+0xec>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	e001      	b.n	8001c1c <HAL_GPIO_Init+0xf0>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2bff      	cmp	r3, #255	; 0xff
 8001c22:	d802      	bhi.n	8001c2a <HAL_GPIO_Init+0xfe>
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	e002      	b.n	8001c30 <HAL_GPIO_Init+0x104>
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	3b08      	subs	r3, #8
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	210f      	movs	r1, #15
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43db      	mvns	r3, r3
 8001c40:	401a      	ands	r2, r3
 8001c42:	6a39      	ldr	r1, [r7, #32]
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4a:	431a      	orrs	r2, r3
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	f000 8096 	beq.w	8001d8a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5e:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <HAL_GPIO_Init+0x298>)
 8001c60:	699b      	ldr	r3, [r3, #24]
 8001c62:	4a58      	ldr	r2, [pc, #352]	; (8001dc4 <HAL_GPIO_Init+0x298>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6193      	str	r3, [r2, #24]
 8001c6a:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <HAL_GPIO_Init+0x298>)
 8001c6c:	699b      	ldr	r3, [r3, #24]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	60bb      	str	r3, [r7, #8]
 8001c74:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c76:	4a54      	ldr	r2, [pc, #336]	; (8001dc8 <HAL_GPIO_Init+0x29c>)
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4013      	ands	r3, r2
 8001c98:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4b      	ldr	r2, [pc, #300]	; (8001dcc <HAL_GPIO_Init+0x2a0>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d013      	beq.n	8001cca <HAL_GPIO_Init+0x19e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4a      	ldr	r2, [pc, #296]	; (8001dd0 <HAL_GPIO_Init+0x2a4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d00d      	beq.n	8001cc6 <HAL_GPIO_Init+0x19a>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a49      	ldr	r2, [pc, #292]	; (8001dd4 <HAL_GPIO_Init+0x2a8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d007      	beq.n	8001cc2 <HAL_GPIO_Init+0x196>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a48      	ldr	r2, [pc, #288]	; (8001dd8 <HAL_GPIO_Init+0x2ac>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d101      	bne.n	8001cbe <HAL_GPIO_Init+0x192>
 8001cba:	2303      	movs	r3, #3
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x1a0>
 8001cbe:	2304      	movs	r3, #4
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x1a0>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x1a0>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x1a0>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cce:	f002 0203 	and.w	r2, r2, #3
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cdc:	493a      	ldr	r1, [pc, #232]	; (8001dc8 <HAL_GPIO_Init+0x29c>)
 8001cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d006      	beq.n	8001d04 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf6:	4b39      	ldr	r3, [pc, #228]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	4938      	ldr	r1, [pc, #224]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001cfc:	69bb      	ldr	r3, [r7, #24]
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	600b      	str	r3, [r1, #0]
 8001d02:	e006      	b.n	8001d12 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d04:	4b35      	ldr	r3, [pc, #212]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	43db      	mvns	r3, r3
 8001d0c:	4933      	ldr	r1, [pc, #204]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d0e:	4013      	ands	r3, r2
 8001d10:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d1e:	4b2f      	ldr	r3, [pc, #188]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d20:	685a      	ldr	r2, [r3, #4]
 8001d22:	492e      	ldr	r1, [pc, #184]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d24:	69bb      	ldr	r3, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	604b      	str	r3, [r1, #4]
 8001d2a:	e006      	b.n	8001d3a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d2c:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	43db      	mvns	r3, r3
 8001d34:	4929      	ldr	r1, [pc, #164]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d36:	4013      	ands	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d006      	beq.n	8001d54 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d46:	4b25      	ldr	r3, [pc, #148]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	4924      	ldr	r1, [pc, #144]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
 8001d52:	e006      	b.n	8001d62 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d54:	4b21      	ldr	r3, [pc, #132]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	43db      	mvns	r3, r3
 8001d5c:	491f      	ldr	r1, [pc, #124]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d5e:	4013      	ands	r3, r2
 8001d60:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d006      	beq.n	8001d7c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d6e:	4b1b      	ldr	r3, [pc, #108]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	491a      	ldr	r1, [pc, #104]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	60cb      	str	r3, [r1, #12]
 8001d7a:	e006      	b.n	8001d8a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d7c:	4b17      	ldr	r3, [pc, #92]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	4915      	ldr	r1, [pc, #84]	; (8001ddc <HAL_GPIO_Init+0x2b0>)
 8001d86:	4013      	ands	r3, r2
 8001d88:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d96:	fa22 f303 	lsr.w	r3, r2, r3
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f47f aed0 	bne.w	8001b40 <HAL_GPIO_Init+0x14>
  }
}
 8001da0:	bf00      	nop
 8001da2:	372c      	adds	r7, #44	; 0x2c
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc80      	pop	{r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	10210000 	.word	0x10210000
 8001db0:	10110000 	.word	0x10110000
 8001db4:	10120000 	.word	0x10120000
 8001db8:	10310000 	.word	0x10310000
 8001dbc:	10320000 	.word	0x10320000
 8001dc0:	10220000 	.word	0x10220000
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	40010000 	.word	0x40010000
 8001dcc:	40010800 	.word	0x40010800
 8001dd0:	40010c00 	.word	0x40010c00
 8001dd4:	40011000 	.word	0x40011000
 8001dd8:	40011400 	.word	0x40011400
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
 8001dec:	4613      	mov	r3, r2
 8001dee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001df0:	787b      	ldrb	r3, [r7, #1]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d003      	beq.n	8001dfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df6:	887a      	ldrh	r2, [r7, #2]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001dfc:	e003      	b.n	8001e06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001dfe:	887b      	ldrh	r3, [r7, #2]
 8001e00:	041a      	lsls	r2, r3, #16
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr

08001e10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d101      	bne.n	8001e22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e26c      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 8087 	beq.w	8001f3e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e30:	4b92      	ldr	r3, [pc, #584]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f003 030c 	and.w	r3, r3, #12
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d00c      	beq.n	8001e56 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e3c:	4b8f      	ldr	r3, [pc, #572]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 030c 	and.w	r3, r3, #12
 8001e44:	2b08      	cmp	r3, #8
 8001e46:	d112      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5e>
 8001e48:	4b8c      	ldr	r3, [pc, #560]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e54:	d10b      	bne.n	8001e6e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e56:	4b89      	ldr	r3, [pc, #548]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d06c      	beq.n	8001f3c <HAL_RCC_OscConfig+0x12c>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d168      	bne.n	8001f3c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e246      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e76:	d106      	bne.n	8001e86 <HAL_RCC_OscConfig+0x76>
 8001e78:	4b80      	ldr	r3, [pc, #512]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a7f      	ldr	r2, [pc, #508]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	e02e      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd4>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d10c      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x98>
 8001e8e:	4b7b      	ldr	r3, [pc, #492]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a7a      	ldr	r2, [pc, #488]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	6013      	str	r3, [r2, #0]
 8001e9a:	4b78      	ldr	r3, [pc, #480]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a77      	ldr	r2, [pc, #476]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ea0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ea4:	6013      	str	r3, [r2, #0]
 8001ea6:	e01d      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd4>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001eb0:	d10c      	bne.n	8001ecc <HAL_RCC_OscConfig+0xbc>
 8001eb2:	4b72      	ldr	r3, [pc, #456]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a71      	ldr	r2, [pc, #452]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001eb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ebc:	6013      	str	r3, [r2, #0]
 8001ebe:	4b6f      	ldr	r3, [pc, #444]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a6e      	ldr	r2, [pc, #440]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	e00b      	b.n	8001ee4 <HAL_RCC_OscConfig+0xd4>
 8001ecc:	4b6b      	ldr	r3, [pc, #428]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a6a      	ldr	r2, [pc, #424]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ed6:	6013      	str	r3, [r2, #0]
 8001ed8:	4b68      	ldr	r3, [pc, #416]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a67      	ldr	r2, [pc, #412]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ee2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d013      	beq.n	8001f14 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eec:	f7ff fc6e 	bl	80017cc <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef4:	f7ff fc6a 	bl	80017cc <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b64      	cmp	r3, #100	; 0x64
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e1fa      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f06:	4b5d      	ldr	r3, [pc, #372]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0xe4>
 8001f12:	e014      	b.n	8001f3e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f14:	f7ff fc5a 	bl	80017cc <HAL_GetTick>
 8001f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f1a:	e008      	b.n	8001f2e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f1c:	f7ff fc56 	bl	80017cc <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b64      	cmp	r3, #100	; 0x64
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e1e6      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f2e:	4b53      	ldr	r3, [pc, #332]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d1f0      	bne.n	8001f1c <HAL_RCC_OscConfig+0x10c>
 8001f3a:	e000      	b.n	8001f3e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d063      	beq.n	8002012 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f4a:	4b4c      	ldr	r3, [pc, #304]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d00b      	beq.n	8001f6e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f56:	4b49      	ldr	r3, [pc, #292]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b08      	cmp	r3, #8
 8001f60:	d11c      	bne.n	8001f9c <HAL_RCC_OscConfig+0x18c>
 8001f62:	4b46      	ldr	r3, [pc, #280]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d116      	bne.n	8001f9c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f6e:	4b43      	ldr	r3, [pc, #268]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d005      	beq.n	8001f86 <HAL_RCC_OscConfig+0x176>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d001      	beq.n	8001f86 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e1ba      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f86:	4b3d      	ldr	r3, [pc, #244]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	695b      	ldr	r3, [r3, #20]
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4939      	ldr	r1, [pc, #228]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9a:	e03a      	b.n	8002012 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d020      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa4:	4b36      	ldr	r3, [pc, #216]	; (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001faa:	f7ff fc0f 	bl	80017cc <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb2:	f7ff fc0b 	bl	80017cc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e19b      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	4b2d      	ldr	r3, [pc, #180]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd0:	4b2a      	ldr	r3, [pc, #168]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	00db      	lsls	r3, r3, #3
 8001fde:	4927      	ldr	r1, [pc, #156]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	600b      	str	r3, [r1, #0]
 8001fe4:	e015      	b.n	8002012 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fe6:	4b26      	ldr	r3, [pc, #152]	; (8002080 <HAL_RCC_OscConfig+0x270>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fec:	f7ff fbee 	bl	80017cc <HAL_GetTick>
 8001ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ff2:	e008      	b.n	8002006 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ff4:	f7ff fbea 	bl	80017cc <HAL_GetTick>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d901      	bls.n	8002006 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002002:	2303      	movs	r3, #3
 8002004:	e17a      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002006:	4b1d      	ldr	r3, [pc, #116]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	2b00      	cmp	r3, #0
 8002010:	d1f0      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0308 	and.w	r3, r3, #8
 800201a:	2b00      	cmp	r3, #0
 800201c:	d03a      	beq.n	8002094 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	699b      	ldr	r3, [r3, #24]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d019      	beq.n	800205a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002026:	4b17      	ldr	r3, [pc, #92]	; (8002084 <HAL_RCC_OscConfig+0x274>)
 8002028:	2201      	movs	r2, #1
 800202a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800202c:	f7ff fbce 	bl	80017cc <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002034:	f7ff fbca 	bl	80017cc <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e15a      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002046:	4b0d      	ldr	r3, [pc, #52]	; (800207c <HAL_RCC_OscConfig+0x26c>)
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0f0      	beq.n	8002034 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002052:	2001      	movs	r0, #1
 8002054:	f000 fada 	bl	800260c <RCC_Delay>
 8002058:	e01c      	b.n	8002094 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800205a:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <HAL_RCC_OscConfig+0x274>)
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002060:	f7ff fbb4 	bl	80017cc <HAL_GetTick>
 8002064:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002066:	e00f      	b.n	8002088 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002068:	f7ff fbb0 	bl	80017cc <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	2b02      	cmp	r3, #2
 8002074:	d908      	bls.n	8002088 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002076:	2303      	movs	r3, #3
 8002078:	e140      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000
 8002080:	42420000 	.word	0x42420000
 8002084:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002088:	4b9e      	ldr	r3, [pc, #632]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208c:	f003 0302 	and.w	r3, r3, #2
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1e9      	bne.n	8002068 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	f000 80a6 	beq.w	80021ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020a2:	2300      	movs	r3, #0
 80020a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020a6:	4b97      	ldr	r3, [pc, #604]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10d      	bne.n	80020ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b2:	4b94      	ldr	r3, [pc, #592]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80020b4:	69db      	ldr	r3, [r3, #28]
 80020b6:	4a93      	ldr	r2, [pc, #588]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80020b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020bc:	61d3      	str	r3, [r2, #28]
 80020be:	4b91      	ldr	r3, [pc, #580]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80020c0:	69db      	ldr	r3, [r3, #28]
 80020c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ca:	2301      	movs	r3, #1
 80020cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ce:	4b8e      	ldr	r3, [pc, #568]	; (8002308 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d118      	bne.n	800210c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020da:	4b8b      	ldr	r3, [pc, #556]	; (8002308 <HAL_RCC_OscConfig+0x4f8>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a8a      	ldr	r2, [pc, #552]	; (8002308 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020e6:	f7ff fb71 	bl	80017cc <HAL_GetTick>
 80020ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ec:	e008      	b.n	8002100 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020ee:	f7ff fb6d 	bl	80017cc <HAL_GetTick>
 80020f2:	4602      	mov	r2, r0
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	1ad3      	subs	r3, r2, r3
 80020f8:	2b64      	cmp	r3, #100	; 0x64
 80020fa:	d901      	bls.n	8002100 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020fc:	2303      	movs	r3, #3
 80020fe:	e0fd      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002100:	4b81      	ldr	r3, [pc, #516]	; (8002308 <HAL_RCC_OscConfig+0x4f8>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002108:	2b00      	cmp	r3, #0
 800210a:	d0f0      	beq.n	80020ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	2b01      	cmp	r3, #1
 8002112:	d106      	bne.n	8002122 <HAL_RCC_OscConfig+0x312>
 8002114:	4b7b      	ldr	r3, [pc, #492]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	4a7a      	ldr	r2, [pc, #488]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6213      	str	r3, [r2, #32]
 8002120:	e02d      	b.n	800217e <HAL_RCC_OscConfig+0x36e>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10c      	bne.n	8002144 <HAL_RCC_OscConfig+0x334>
 800212a:	4b76      	ldr	r3, [pc, #472]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4a75      	ldr	r2, [pc, #468]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002130:	f023 0301 	bic.w	r3, r3, #1
 8002134:	6213      	str	r3, [r2, #32]
 8002136:	4b73      	ldr	r3, [pc, #460]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	6a1b      	ldr	r3, [r3, #32]
 800213a:	4a72      	ldr	r2, [pc, #456]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800213c:	f023 0304 	bic.w	r3, r3, #4
 8002140:	6213      	str	r3, [r2, #32]
 8002142:	e01c      	b.n	800217e <HAL_RCC_OscConfig+0x36e>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b05      	cmp	r3, #5
 800214a:	d10c      	bne.n	8002166 <HAL_RCC_OscConfig+0x356>
 800214c:	4b6d      	ldr	r3, [pc, #436]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	4a6c      	ldr	r2, [pc, #432]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002152:	f043 0304 	orr.w	r3, r3, #4
 8002156:	6213      	str	r3, [r2, #32]
 8002158:	4b6a      	ldr	r3, [pc, #424]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	4a69      	ldr	r2, [pc, #420]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800215e:	f043 0301 	orr.w	r3, r3, #1
 8002162:	6213      	str	r3, [r2, #32]
 8002164:	e00b      	b.n	800217e <HAL_RCC_OscConfig+0x36e>
 8002166:	4b67      	ldr	r3, [pc, #412]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a66      	ldr	r2, [pc, #408]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	4b64      	ldr	r3, [pc, #400]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a63      	ldr	r2, [pc, #396]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d015      	beq.n	80021b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002186:	f7ff fb21 	bl	80017cc <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800218c:	e00a      	b.n	80021a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218e:	f7ff fb1d 	bl	80017cc <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	f241 3288 	movw	r2, #5000	; 0x1388
 800219c:	4293      	cmp	r3, r2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e0ab      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021a4:	4b57      	ldr	r3, [pc, #348]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ee      	beq.n	800218e <HAL_RCC_OscConfig+0x37e>
 80021b0:	e014      	b.n	80021dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b2:	f7ff fb0b 	bl	80017cc <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff fb07 	bl	80017cc <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e095      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021d0:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80021d2:	6a1b      	ldr	r3, [r3, #32]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d1ee      	bne.n	80021ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80021dc:	7dfb      	ldrb	r3, [r7, #23]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d105      	bne.n	80021ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021e2:	4b48      	ldr	r3, [pc, #288]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80021e4:	69db      	ldr	r3, [r3, #28]
 80021e6:	4a47      	ldr	r2, [pc, #284]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80021e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	69db      	ldr	r3, [r3, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f000 8081 	beq.w	80022fa <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021f8:	4b42      	ldr	r3, [pc, #264]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f003 030c 	and.w	r3, r3, #12
 8002200:	2b08      	cmp	r3, #8
 8002202:	d061      	beq.n	80022c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	69db      	ldr	r3, [r3, #28]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d146      	bne.n	800229a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800220c:	4b3f      	ldr	r3, [pc, #252]	; (800230c <HAL_RCC_OscConfig+0x4fc>)
 800220e:	2200      	movs	r2, #0
 8002210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002212:	f7ff fadb 	bl	80017cc <HAL_GetTick>
 8002216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002218:	e008      	b.n	800222c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800221a:	f7ff fad7 	bl	80017cc <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	2b02      	cmp	r3, #2
 8002226:	d901      	bls.n	800222c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	e067      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800222c:	4b35      	ldr	r3, [pc, #212]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d1f0      	bne.n	800221a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a1b      	ldr	r3, [r3, #32]
 800223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002240:	d108      	bne.n	8002254 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002242:	4b30      	ldr	r3, [pc, #192]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	492d      	ldr	r1, [pc, #180]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002250:	4313      	orrs	r3, r2
 8002252:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002254:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6a19      	ldr	r1, [r3, #32]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	430b      	orrs	r3, r1
 8002266:	4927      	ldr	r1, [pc, #156]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 8002268:	4313      	orrs	r3, r2
 800226a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x4fc>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002272:	f7ff faab 	bl	80017cc <HAL_GetTick>
 8002276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002278:	e008      	b.n	800228c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800227a:	f7ff faa7 	bl	80017cc <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d901      	bls.n	800228c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	e037      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800228c:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d0f0      	beq.n	800227a <HAL_RCC_OscConfig+0x46a>
 8002298:	e02f      	b.n	80022fa <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800229a:	4b1c      	ldr	r3, [pc, #112]	; (800230c <HAL_RCC_OscConfig+0x4fc>)
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a0:	f7ff fa94 	bl	80017cc <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a8:	f7ff fa90 	bl	80017cc <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e020      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d1f0      	bne.n	80022a8 <HAL_RCC_OscConfig+0x498>
 80022c6:	e018      	b.n	80022fa <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e013      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022d4:	4b0b      	ldr	r3, [pc, #44]	; (8002304 <HAL_RCC_OscConfig+0x4f4>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	d106      	bne.n	80022f6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3718      	adds	r7, #24
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
 800230c:	42420060 	.word	0x42420060

08002310 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0d0      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002324:	4b6a      	ldr	r3, [pc, #424]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d910      	bls.n	8002354 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 0207 	bic.w	r2, r3, #7
 800233a:	4965      	ldr	r1, [pc, #404]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b63      	ldr	r3, [pc, #396]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e0b8      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0302 	and.w	r3, r3, #2
 800235c:	2b00      	cmp	r3, #0
 800235e:	d020      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0304 	and.w	r3, r3, #4
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800236c:	4b59      	ldr	r3, [pc, #356]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	4a58      	ldr	r2, [pc, #352]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002372:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002376:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0308 	and.w	r3, r3, #8
 8002380:	2b00      	cmp	r3, #0
 8002382:	d005      	beq.n	8002390 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002384:	4b53      	ldr	r3, [pc, #332]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	4a52      	ldr	r2, [pc, #328]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800238a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800238e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002390:	4b50      	ldr	r3, [pc, #320]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	494d      	ldr	r1, [pc, #308]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d040      	beq.n	8002430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d107      	bne.n	80023c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b6:	4b47      	ldr	r3, [pc, #284]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d115      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e07f      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	2b02      	cmp	r3, #2
 80023cc:	d107      	bne.n	80023de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023ce:	4b41      	ldr	r3, [pc, #260]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d109      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e073      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023de:	4b3d      	ldr	r3, [pc, #244]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e06b      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ee:	4b39      	ldr	r3, [pc, #228]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f023 0203 	bic.w	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	4936      	ldr	r1, [pc, #216]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002400:	f7ff f9e4 	bl	80017cc <HAL_GetTick>
 8002404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002406:	e00a      	b.n	800241e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002408:	f7ff f9e0 	bl	80017cc <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	f241 3288 	movw	r2, #5000	; 0x1388
 8002416:	4293      	cmp	r3, r2
 8002418:	d901      	bls.n	800241e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e053      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800241e:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 020c 	and.w	r2, r3, #12
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	429a      	cmp	r2, r3
 800242e:	d1eb      	bne.n	8002408 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002430:	4b27      	ldr	r3, [pc, #156]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	683a      	ldr	r2, [r7, #0]
 800243a:	429a      	cmp	r2, r3
 800243c:	d210      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243e:	4b24      	ldr	r3, [pc, #144]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 0207 	bic.w	r2, r3, #7
 8002446:	4922      	ldr	r1, [pc, #136]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244e:	4b20      	ldr	r3, [pc, #128]	; (80024d0 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0307 	and.w	r3, r3, #7
 8002456:	683a      	ldr	r2, [r7, #0]
 8002458:	429a      	cmp	r2, r3
 800245a:	d001      	beq.n	8002460 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e032      	b.n	80024c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800246c:	4b19      	ldr	r3, [pc, #100]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	4916      	ldr	r1, [pc, #88]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	4313      	orrs	r3, r2
 800247c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0308 	and.w	r3, r3, #8
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800248a:	4b12      	ldr	r3, [pc, #72]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	00db      	lsls	r3, r3, #3
 8002498:	490e      	ldr	r1, [pc, #56]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	4313      	orrs	r3, r2
 800249c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800249e:	f000 f821 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 80024a2:	4601      	mov	r1, r0
 80024a4:	4b0b      	ldr	r3, [pc, #44]	; (80024d4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_RCC_ClockConfig+0x1c8>)
 80024b0:	5cd3      	ldrb	r3, [r2, r3]
 80024b2:	fa21 f303 	lsr.w	r3, r1, r3
 80024b6:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1cc>)
 80024b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ba:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1d0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7ff f942 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 80024c4:	2300      	movs	r3, #0
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3710      	adds	r7, #16
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	bf00      	nop
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40021000 	.word	0x40021000
 80024d8:	0800433c 	.word	0x0800433c
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000004 	.word	0x20000004

080024e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b490      	push	{r4, r7}
 80024e6:	b08a      	sub	sp, #40	; 0x28
 80024e8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <HAL_RCC_GetSysClockFreq+0xb0>)
 80024ec:	1d3c      	adds	r4, r7, #4
 80024ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80024f4:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_RCC_GetSysClockFreq+0xb4>)
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	61fb      	str	r3, [r7, #28]
 80024fe:	2300      	movs	r3, #0
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	2300      	movs	r3, #0
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800250e:	4b23      	ldr	r3, [pc, #140]	; (800259c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b04      	cmp	r3, #4
 800251c:	d002      	beq.n	8002524 <HAL_RCC_GetSysClockFreq+0x40>
 800251e:	2b08      	cmp	r3, #8
 8002520:	d003      	beq.n	800252a <HAL_RCC_GetSysClockFreq+0x46>
 8002522:	e02d      	b.n	8002580 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002524:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002526:	623b      	str	r3, [r7, #32]
      break;
 8002528:	e02d      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	0c9b      	lsrs	r3, r3, #18
 800252e:	f003 030f 	and.w	r3, r3, #15
 8002532:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002536:	4413      	add	r3, r2
 8002538:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800253c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d013      	beq.n	8002570 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002548:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_RCC_GetSysClockFreq+0xb8>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	0c5b      	lsrs	r3, r3, #17
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002556:	4413      	add	r3, r2
 8002558:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800255c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	4a0f      	ldr	r2, [pc, #60]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002562:	fb02 f203 	mul.w	r2, r2, r3
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	fbb2 f3f3 	udiv	r3, r2, r3
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
 800256e:	e004      	b.n	800257a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	4a0c      	ldr	r2, [pc, #48]	; (80025a4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002574:	fb02 f303 	mul.w	r3, r2, r3
 8002578:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800257a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257c:	623b      	str	r3, [r7, #32]
      break;
 800257e:	e002      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002580:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002582:	623b      	str	r3, [r7, #32]
      break;
 8002584:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002586:	6a3b      	ldr	r3, [r7, #32]
}
 8002588:	4618      	mov	r0, r3
 800258a:	3728      	adds	r7, #40	; 0x28
 800258c:	46bd      	mov	sp, r7
 800258e:	bc90      	pop	{r4, r7}
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	08004328 	.word	0x08004328
 8002598:	08004338 	.word	0x08004338
 800259c:	40021000 	.word	0x40021000
 80025a0:	007a1200 	.word	0x007a1200
 80025a4:	003d0900 	.word	0x003d0900

080025a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025a8:	b480      	push	{r7}
 80025aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025ac:	4b02      	ldr	r3, [pc, #8]	; (80025b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80025ae:	681b      	ldr	r3, [r3, #0]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bc80      	pop	{r7}
 80025b6:	4770      	bx	lr
 80025b8:	20000000 	.word	0x20000000

080025bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025c0:	f7ff fff2 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025c4:	4601      	mov	r1, r0
 80025c6:	4b05      	ldr	r3, [pc, #20]	; (80025dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	0a1b      	lsrs	r3, r3, #8
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	4a03      	ldr	r2, [pc, #12]	; (80025e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025d2:	5cd3      	ldrb	r3, [r2, r3]
 80025d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80025d8:	4618      	mov	r0, r3
 80025da:	bd80      	pop	{r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	0800434c 	.word	0x0800434c

080025e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80025e8:	f7ff ffde 	bl	80025a8 <HAL_RCC_GetHCLKFreq>
 80025ec:	4601      	mov	r1, r0
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <HAL_RCC_GetPCLK2Freq+0x20>)
 80025f0:	685b      	ldr	r3, [r3, #4]
 80025f2:	0adb      	lsrs	r3, r3, #11
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	4a03      	ldr	r2, [pc, #12]	; (8002608 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025fa:	5cd3      	ldrb	r3, [r2, r3]
 80025fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002600:	4618      	mov	r0, r3
 8002602:	bd80      	pop	{r7, pc}
 8002604:	40021000 	.word	0x40021000
 8002608:	0800434c 	.word	0x0800434c

0800260c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002614:	4b0a      	ldr	r3, [pc, #40]	; (8002640 <RCC_Delay+0x34>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a0a      	ldr	r2, [pc, #40]	; (8002644 <RCC_Delay+0x38>)
 800261a:	fba2 2303 	umull	r2, r3, r2, r3
 800261e:	0a5b      	lsrs	r3, r3, #9
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	fb02 f303 	mul.w	r3, r2, r3
 8002626:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002628:	bf00      	nop
  }
  while (Delay --);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1e5a      	subs	r2, r3, #1
 800262e:	60fa      	str	r2, [r7, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d1f9      	bne.n	8002628 <RCC_Delay+0x1c>
}
 8002634:	bf00      	nop
 8002636:	3714      	adds	r7, #20
 8002638:	46bd      	mov	sp, r7
 800263a:	bc80      	pop	{r7}
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	20000000 	.word	0x20000000
 8002644:	10624dd3 	.word	0x10624dd3

08002648 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e03f      	b.n	80026da <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe ff96 	bl	80015a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2224      	movs	r2, #36	; 0x24
 8002678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68da      	ldr	r2, [r3, #12]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800268a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f000 faeb 	bl	8002c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	691a      	ldr	r2, [r3, #16]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68da      	ldr	r2, [r3, #12]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2220      	movs	r2, #32
 80026d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}

080026e2 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	60f8      	str	r0, [r7, #12]
 80026ea:	60b9      	str	r1, [r7, #8]
 80026ec:	4613      	mov	r3, r2
 80026ee:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80026f6:	b2db      	uxtb	r3, r3
 80026f8:	2b20      	cmp	r3, #32
 80026fa:	d130      	bne.n	800275e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d002      	beq.n	8002708 <HAL_UART_Transmit_IT+0x26>
 8002702:	88fb      	ldrh	r3, [r7, #6]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e029      	b.n	8002760 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_UART_Transmit_IT+0x38>
 8002716:	2302      	movs	r3, #2
 8002718:	e022      	b.n	8002760 <HAL_UART_Transmit_IT+0x7e>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	88fa      	ldrh	r2, [r7, #6]
 800272c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	88fa      	ldrh	r2, [r7, #6]
 8002732:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2221      	movs	r2, #33	; 0x21
 800273e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68da      	ldr	r2, [r3, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002758:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800275a:	2300      	movs	r3, #0
 800275c:	e000      	b.n	8002760 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800275e:	2302      	movs	r3, #2
  }
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800276a:	b480      	push	{r7}
 800276c:	b085      	sub	sp, #20
 800276e:	af00      	add	r7, sp, #0
 8002770:	60f8      	str	r0, [r7, #12]
 8002772:	60b9      	str	r1, [r7, #8]
 8002774:	4613      	mov	r3, r2
 8002776:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800277e:	b2db      	uxtb	r3, r3
 8002780:	2b20      	cmp	r3, #32
 8002782:	d140      	bne.n	8002806 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_UART_Receive_IT+0x26>
 800278a:	88fb      	ldrh	r3, [r7, #6]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e039      	b.n	8002808 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_UART_Receive_IT+0x38>
 800279e:	2302      	movs	r3, #2
 80027a0:	e032      	b.n	8002808 <HAL_UART_Receive_IT+0x9e>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	68ba      	ldr	r2, [r7, #8]
 80027ae:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	88fa      	ldrh	r2, [r7, #6]
 80027b4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	88fa      	ldrh	r2, [r7, #6]
 80027ba:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2222      	movs	r2, #34	; 0x22
 80027c6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68da      	ldr	r2, [r3, #12]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e0:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	695a      	ldr	r2, [r3, #20]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f042 0201 	orr.w	r2, r2, #1
 80027f0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68da      	ldr	r2, [r3, #12]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f042 0220 	orr.w	r2, r2, #32
 8002800:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002802:	2300      	movs	r3, #0
 8002804:	e000      	b.n	8002808 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002806:	2302      	movs	r3, #2
  }
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr
	...

08002814 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b088      	sub	sp, #32
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002834:	2300      	movs	r3, #0
 8002836:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002838:	2300      	movs	r3, #0
 800283a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d008      	beq.n	8002866 <HAL_UART_IRQHandler+0x52>
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	f003 0320 	and.w	r3, r3, #32
 800285a:	2b00      	cmp	r3, #0
 800285c:	d003      	beq.n	8002866 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f982 	bl	8002b68 <UART_Receive_IT>
      return;
 8002864:	e0d1      	b.n	8002a0a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80b0 	beq.w	80029ce <HAL_UART_IRQHandler+0x1ba>
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_UART_IRQHandler+0x70>
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800287e:	2b00      	cmp	r3, #0
 8002880:	f000 80a5 	beq.w	80029ce <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00a      	beq.n	80028a4 <HAL_UART_IRQHandler+0x90>
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002894:	2b00      	cmp	r3, #0
 8002896:	d005      	beq.n	80028a4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289c:	f043 0201 	orr.w	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	f003 0304 	and.w	r3, r3, #4
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_UART_IRQHandler+0xb0>
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	f003 0301 	and.w	r3, r3, #1
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d005      	beq.n	80028c4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	f043 0202 	orr.w	r2, r3, #2
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00a      	beq.n	80028e4 <HAL_UART_IRQHandler+0xd0>
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f003 0301 	and.w	r3, r3, #1
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d005      	beq.n	80028e4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028dc:	f043 0204 	orr.w	r2, r3, #4
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00f      	beq.n	800290e <HAL_UART_IRQHandler+0xfa>
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	f003 0320 	and.w	r3, r3, #32
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d104      	bne.n	8002902 <HAL_UART_IRQHandler+0xee>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f003 0301 	and.w	r3, r3, #1
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d005      	beq.n	800290e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002906:	f043 0208 	orr.w	r2, r3, #8
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002912:	2b00      	cmp	r3, #0
 8002914:	d078      	beq.n	8002a08 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	f003 0320 	and.w	r3, r3, #32
 800291c:	2b00      	cmp	r3, #0
 800291e:	d007      	beq.n	8002930 <HAL_UART_IRQHandler+0x11c>
 8002920:	69bb      	ldr	r3, [r7, #24]
 8002922:	f003 0320 	and.w	r3, r3, #32
 8002926:	2b00      	cmp	r3, #0
 8002928:	d002      	beq.n	8002930 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f91c 	bl	8002b68 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	695b      	ldr	r3, [r3, #20]
 8002936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	bf14      	ite	ne
 800293e:	2301      	movne	r3, #1
 8002940:	2300      	moveq	r3, #0
 8002942:	b2db      	uxtb	r3, r3
 8002944:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800294a:	f003 0308 	and.w	r3, r3, #8
 800294e:	2b00      	cmp	r3, #0
 8002950:	d102      	bne.n	8002958 <HAL_UART_IRQHandler+0x144>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d031      	beq.n	80029bc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 f86d 	bl	8002a38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002968:	2b00      	cmp	r3, #0
 800296a:	d023      	beq.n	80029b4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	695a      	ldr	r2, [r3, #20]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800297a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002988:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <HAL_UART_IRQHandler+0x1fc>)
 800298a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002990:	4618      	mov	r0, r3
 8002992:	f7ff f855 	bl	8001a40 <HAL_DMA_Abort_IT>
 8002996:	4603      	mov	r3, r0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d016      	beq.n	80029ca <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80029a6:	4610      	mov	r0, r2
 80029a8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029aa:	e00e      	b.n	80029ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 f83a 	bl	8002a26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029b2:	e00a      	b.n	80029ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f836 	bl	8002a26 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ba:	e006      	b.n	80029ca <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f000 f832 	bl	8002a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2200      	movs	r2, #0
 80029c6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80029c8:	e01e      	b.n	8002a08 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029ca:	bf00      	nop
    return;
 80029cc:	e01c      	b.n	8002a08 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d008      	beq.n	80029ea <HAL_UART_IRQHandler+0x1d6>
 80029d8:	69bb      	ldr	r3, [r7, #24]
 80029da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d003      	beq.n	80029ea <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f000 f859 	bl	8002a9a <UART_Transmit_IT>
    return;
 80029e8:	e00f      	b.n	8002a0a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00a      	beq.n	8002a0a <HAL_UART_IRQHandler+0x1f6>
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f000 f89a 	bl	8002b38 <UART_EndTransmit_IT>
    return;
 8002a04:	bf00      	nop
 8002a06:	e000      	b.n	8002a0a <HAL_UART_IRQHandler+0x1f6>
    return;
 8002a08:	bf00      	nop
  }
}
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	08002a73 	.word	0x08002a73

08002a14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bc80      	pop	{r7}
 8002a24:	4770      	bx	lr

08002a26 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002a2e:	bf00      	nop
 8002a30:	370c      	adds	r7, #12
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr

08002a38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002a4e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695a      	ldr	r2, [r3, #20]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2220      	movs	r2, #32
 8002a64:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002a68:	bf00      	nop
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002a72:	b580      	push	{r7, lr}
 8002a74:	b084      	sub	sp, #16
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7ff ffca 	bl	8002a26 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a92:	bf00      	nop
 8002a94:	3710      	adds	r7, #16
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}

08002a9a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b085      	sub	sp, #20
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	2b21      	cmp	r3, #33	; 0x21
 8002aac:	d13e      	bne.n	8002b2c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ab6:	d114      	bne.n	8002ae2 <UART_Transmit_IT+0x48>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d110      	bne.n	8002ae2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a1b      	ldr	r3, [r3, #32]
 8002ac4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	881b      	ldrh	r3, [r3, #0]
 8002aca:	461a      	mov	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ad4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6a1b      	ldr	r3, [r3, #32]
 8002ada:	1c9a      	adds	r2, r3, #2
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	621a      	str	r2, [r3, #32]
 8002ae0:	e008      	b.n	8002af4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	1c59      	adds	r1, r3, #1
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6211      	str	r1, [r2, #32]
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	3b01      	subs	r3, #1
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	4619      	mov	r1, r3
 8002b02:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10f      	bne.n	8002b28 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68da      	ldr	r2, [r3, #12]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b16:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	68da      	ldr	r2, [r3, #12]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b26:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	e000      	b.n	8002b2e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002b2c:	2302      	movs	r3, #2
  }
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bc80      	pop	{r7}
 8002b36:	4770      	bx	lr

08002b38 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68da      	ldr	r2, [r3, #12]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b4e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2220      	movs	r2, #32
 8002b54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f7ff ff5b 	bl	8002a14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3708      	adds	r7, #8
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	2b22      	cmp	r3, #34	; 0x22
 8002b7a:	d170      	bne.n	8002c5e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b84:	d117      	bne.n	8002bb6 <UART_Receive_IT+0x4e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d113      	bne.n	8002bb6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b96:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bae:	1c9a      	adds	r2, r3, #2
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8002bb4:	e026      	b.n	8002c04 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bba:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc8:	d007      	beq.n	8002bda <UART_Receive_IT+0x72>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10a      	bne.n	8002be8 <UART_Receive_IT+0x80>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	701a      	strb	r2, [r3, #0]
 8002be6:	e008      	b.n	8002bfa <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bf4:	b2da      	uxtb	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	687a      	ldr	r2, [r7, #4]
 8002c10:	4619      	mov	r1, r3
 8002c12:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d120      	bne.n	8002c5a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	68da      	ldr	r2, [r3, #12]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f022 0220 	bic.w	r2, r2, #32
 8002c26:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68da      	ldr	r2, [r3, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	695a      	ldr	r2, [r3, #20]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f022 0201 	bic.w	r2, r2, #1
 8002c46:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f7fe fa75 	bl	8001140 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e002      	b.n	8002c60 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 8002c5e:	2302      	movs	r3, #2
  }
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	68da      	ldr	r2, [r3, #12]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	430a      	orrs	r2, r1
 8002c84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ca2:	f023 030c 	bic.w	r3, r3, #12
 8002ca6:	687a      	ldr	r2, [r7, #4]
 8002ca8:	6812      	ldr	r2, [r2, #0]
 8002caa:	68b9      	ldr	r1, [r7, #8]
 8002cac:	430b      	orrs	r3, r1
 8002cae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699a      	ldr	r2, [r3, #24]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2c      	ldr	r2, [pc, #176]	; (8002d7c <UART_SetConfig+0x114>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d103      	bne.n	8002cd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002cd0:	f7ff fc88 	bl	80025e4 <HAL_RCC_GetPCLK2Freq>
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	e002      	b.n	8002cde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002cd8:	f7ff fc70 	bl	80025bc <HAL_RCC_GetPCLK1Freq>
 8002cdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	009a      	lsls	r2, r3, #2
 8002ce8:	441a      	add	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cf4:	4a22      	ldr	r2, [pc, #136]	; (8002d80 <UART_SetConfig+0x118>)
 8002cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfa:	095b      	lsrs	r3, r3, #5
 8002cfc:	0119      	lsls	r1, r3, #4
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4613      	mov	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4413      	add	r3, r2
 8002d06:	009a      	lsls	r2, r3, #2
 8002d08:	441a      	add	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d14:	4b1a      	ldr	r3, [pc, #104]	; (8002d80 <UART_SetConfig+0x118>)
 8002d16:	fba3 0302 	umull	r0, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2064      	movs	r0, #100	; 0x64
 8002d1e:	fb00 f303 	mul.w	r3, r0, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	3332      	adds	r3, #50	; 0x32
 8002d28:	4a15      	ldr	r2, [pc, #84]	; (8002d80 <UART_SetConfig+0x118>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d34:	4419      	add	r1, r3
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009a      	lsls	r2, r3, #2
 8002d40:	441a      	add	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d4c:	4b0c      	ldr	r3, [pc, #48]	; (8002d80 <UART_SetConfig+0x118>)
 8002d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002d52:	095b      	lsrs	r3, r3, #5
 8002d54:	2064      	movs	r0, #100	; 0x64
 8002d56:	fb00 f303 	mul.w	r3, r0, r3
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	3332      	adds	r3, #50	; 0x32
 8002d60:	4a07      	ldr	r2, [pc, #28]	; (8002d80 <UART_SetConfig+0x118>)
 8002d62:	fba2 2303 	umull	r2, r3, r2, r3
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	f003 020f 	and.w	r2, r3, #15
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	440a      	add	r2, r1
 8002d72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002d74:	bf00      	nop
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	51eb851f 	.word	0x51eb851f

08002d84 <atoi>:
 8002d84:	220a      	movs	r2, #10
 8002d86:	2100      	movs	r1, #0
 8002d88:	f000 b940 	b.w	800300c <strtol>

08002d8c <__errno>:
 8002d8c:	4b01      	ldr	r3, [pc, #4]	; (8002d94 <__errno+0x8>)
 8002d8e:	6818      	ldr	r0, [r3, #0]
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	2000000c 	.word	0x2000000c

08002d98 <__libc_init_array>:
 8002d98:	b570      	push	{r4, r5, r6, lr}
 8002d9a:	2500      	movs	r5, #0
 8002d9c:	4e0c      	ldr	r6, [pc, #48]	; (8002dd0 <__libc_init_array+0x38>)
 8002d9e:	4c0d      	ldr	r4, [pc, #52]	; (8002dd4 <__libc_init_array+0x3c>)
 8002da0:	1ba4      	subs	r4, r4, r6
 8002da2:	10a4      	asrs	r4, r4, #2
 8002da4:	42a5      	cmp	r5, r4
 8002da6:	d109      	bne.n	8002dbc <__libc_init_array+0x24>
 8002da8:	f001 f9da 	bl	8004160 <_init>
 8002dac:	2500      	movs	r5, #0
 8002dae:	4e0a      	ldr	r6, [pc, #40]	; (8002dd8 <__libc_init_array+0x40>)
 8002db0:	4c0a      	ldr	r4, [pc, #40]	; (8002ddc <__libc_init_array+0x44>)
 8002db2:	1ba4      	subs	r4, r4, r6
 8002db4:	10a4      	asrs	r4, r4, #2
 8002db6:	42a5      	cmp	r5, r4
 8002db8:	d105      	bne.n	8002dc6 <__libc_init_array+0x2e>
 8002dba:	bd70      	pop	{r4, r5, r6, pc}
 8002dbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dc0:	4798      	blx	r3
 8002dc2:	3501      	adds	r5, #1
 8002dc4:	e7ee      	b.n	8002da4 <__libc_init_array+0xc>
 8002dc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002dca:	4798      	blx	r3
 8002dcc:	3501      	adds	r5, #1
 8002dce:	e7f2      	b.n	8002db6 <__libc_init_array+0x1e>
 8002dd0:	080044f8 	.word	0x080044f8
 8002dd4:	080044f8 	.word	0x080044f8
 8002dd8:	080044f8 	.word	0x080044f8
 8002ddc:	080044fc 	.word	0x080044fc

08002de0 <memcpy>:
 8002de0:	b510      	push	{r4, lr}
 8002de2:	1e43      	subs	r3, r0, #1
 8002de4:	440a      	add	r2, r1
 8002de6:	4291      	cmp	r1, r2
 8002de8:	d100      	bne.n	8002dec <memcpy+0xc>
 8002dea:	bd10      	pop	{r4, pc}
 8002dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002df4:	e7f7      	b.n	8002de6 <memcpy+0x6>

08002df6 <memset>:
 8002df6:	4603      	mov	r3, r0
 8002df8:	4402      	add	r2, r0
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d100      	bne.n	8002e00 <memset+0xa>
 8002dfe:	4770      	bx	lr
 8002e00:	f803 1b01 	strb.w	r1, [r3], #1
 8002e04:	e7f9      	b.n	8002dfa <memset+0x4>
	...

08002e08 <iprintf>:
 8002e08:	b40f      	push	{r0, r1, r2, r3}
 8002e0a:	4b0a      	ldr	r3, [pc, #40]	; (8002e34 <iprintf+0x2c>)
 8002e0c:	b513      	push	{r0, r1, r4, lr}
 8002e0e:	681c      	ldr	r4, [r3, #0]
 8002e10:	b124      	cbz	r4, 8002e1c <iprintf+0x14>
 8002e12:	69a3      	ldr	r3, [r4, #24]
 8002e14:	b913      	cbnz	r3, 8002e1c <iprintf+0x14>
 8002e16:	4620      	mov	r0, r4
 8002e18:	f000 f94e 	bl	80030b8 <__sinit>
 8002e1c:	ab05      	add	r3, sp, #20
 8002e1e:	9a04      	ldr	r2, [sp, #16]
 8002e20:	68a1      	ldr	r1, [r4, #8]
 8002e22:	4620      	mov	r0, r4
 8002e24:	9301      	str	r3, [sp, #4]
 8002e26:	f000 fbbb 	bl	80035a0 <_vfiprintf_r>
 8002e2a:	b002      	add	sp, #8
 8002e2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e30:	b004      	add	sp, #16
 8002e32:	4770      	bx	lr
 8002e34:	2000000c 	.word	0x2000000c

08002e38 <sniprintf>:
 8002e38:	b40c      	push	{r2, r3}
 8002e3a:	b530      	push	{r4, r5, lr}
 8002e3c:	4b17      	ldr	r3, [pc, #92]	; (8002e9c <sniprintf+0x64>)
 8002e3e:	1e0c      	subs	r4, r1, #0
 8002e40:	b09d      	sub	sp, #116	; 0x74
 8002e42:	681d      	ldr	r5, [r3, #0]
 8002e44:	da08      	bge.n	8002e58 <sniprintf+0x20>
 8002e46:	238b      	movs	r3, #139	; 0x8b
 8002e48:	f04f 30ff 	mov.w	r0, #4294967295
 8002e4c:	602b      	str	r3, [r5, #0]
 8002e4e:	b01d      	add	sp, #116	; 0x74
 8002e50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002e54:	b002      	add	sp, #8
 8002e56:	4770      	bx	lr
 8002e58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002e5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002e60:	bf0c      	ite	eq
 8002e62:	4623      	moveq	r3, r4
 8002e64:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002e68:	9304      	str	r3, [sp, #16]
 8002e6a:	9307      	str	r3, [sp, #28]
 8002e6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e70:	9002      	str	r0, [sp, #8]
 8002e72:	9006      	str	r0, [sp, #24]
 8002e74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002e78:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002e7a:	ab21      	add	r3, sp, #132	; 0x84
 8002e7c:	a902      	add	r1, sp, #8
 8002e7e:	4628      	mov	r0, r5
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	f000 fa6d 	bl	8003360 <_svfiprintf_r>
 8002e86:	1c43      	adds	r3, r0, #1
 8002e88:	bfbc      	itt	lt
 8002e8a:	238b      	movlt	r3, #139	; 0x8b
 8002e8c:	602b      	strlt	r3, [r5, #0]
 8002e8e:	2c00      	cmp	r4, #0
 8002e90:	d0dd      	beq.n	8002e4e <sniprintf+0x16>
 8002e92:	2200      	movs	r2, #0
 8002e94:	9b02      	ldr	r3, [sp, #8]
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e7d9      	b.n	8002e4e <sniprintf+0x16>
 8002e9a:	bf00      	nop
 8002e9c:	2000000c 	.word	0x2000000c

08002ea0 <siprintf>:
 8002ea0:	b40e      	push	{r1, r2, r3}
 8002ea2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002ea6:	b500      	push	{lr}
 8002ea8:	b09c      	sub	sp, #112	; 0x70
 8002eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8002eac:	9002      	str	r0, [sp, #8]
 8002eae:	9006      	str	r0, [sp, #24]
 8002eb0:	9107      	str	r1, [sp, #28]
 8002eb2:	9104      	str	r1, [sp, #16]
 8002eb4:	4808      	ldr	r0, [pc, #32]	; (8002ed8 <siprintf+0x38>)
 8002eb6:	4909      	ldr	r1, [pc, #36]	; (8002edc <siprintf+0x3c>)
 8002eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ebc:	9105      	str	r1, [sp, #20]
 8002ebe:	6800      	ldr	r0, [r0, #0]
 8002ec0:	a902      	add	r1, sp, #8
 8002ec2:	9301      	str	r3, [sp, #4]
 8002ec4:	f000 fa4c 	bl	8003360 <_svfiprintf_r>
 8002ec8:	2200      	movs	r2, #0
 8002eca:	9b02      	ldr	r3, [sp, #8]
 8002ecc:	701a      	strb	r2, [r3, #0]
 8002ece:	b01c      	add	sp, #112	; 0x70
 8002ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ed4:	b003      	add	sp, #12
 8002ed6:	4770      	bx	lr
 8002ed8:	2000000c 	.word	0x2000000c
 8002edc:	ffff0208 	.word	0xffff0208

08002ee0 <strstr>:
 8002ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee2:	7803      	ldrb	r3, [r0, #0]
 8002ee4:	b17b      	cbz	r3, 8002f06 <strstr+0x26>
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	7823      	ldrb	r3, [r4, #0]
 8002eea:	4620      	mov	r0, r4
 8002eec:	1c66      	adds	r6, r4, #1
 8002eee:	b17b      	cbz	r3, 8002f10 <strstr+0x30>
 8002ef0:	1e4a      	subs	r2, r1, #1
 8002ef2:	1e63      	subs	r3, r4, #1
 8002ef4:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8002ef8:	b14d      	cbz	r5, 8002f0e <strstr+0x2e>
 8002efa:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8002efe:	4634      	mov	r4, r6
 8002f00:	42af      	cmp	r7, r5
 8002f02:	d0f7      	beq.n	8002ef4 <strstr+0x14>
 8002f04:	e7f0      	b.n	8002ee8 <strstr+0x8>
 8002f06:	780b      	ldrb	r3, [r1, #0]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf18      	it	ne
 8002f0c:	2000      	movne	r0, #0
 8002f0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f10:	4618      	mov	r0, r3
 8002f12:	e7fc      	b.n	8002f0e <strstr+0x2e>

08002f14 <_strtol_l.isra.0>:
 8002f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f18:	4680      	mov	r8, r0
 8002f1a:	4689      	mov	r9, r1
 8002f1c:	4692      	mov	sl, r2
 8002f1e:	461e      	mov	r6, r3
 8002f20:	460f      	mov	r7, r1
 8002f22:	463d      	mov	r5, r7
 8002f24:	9808      	ldr	r0, [sp, #32]
 8002f26:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f2a:	f000 f94f 	bl	80031cc <__locale_ctype_ptr_l>
 8002f2e:	4420      	add	r0, r4
 8002f30:	7843      	ldrb	r3, [r0, #1]
 8002f32:	f013 0308 	ands.w	r3, r3, #8
 8002f36:	d132      	bne.n	8002f9e <_strtol_l.isra.0+0x8a>
 8002f38:	2c2d      	cmp	r4, #45	; 0x2d
 8002f3a:	d132      	bne.n	8002fa2 <_strtol_l.isra.0+0x8e>
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	787c      	ldrb	r4, [r7, #1]
 8002f40:	1cbd      	adds	r5, r7, #2
 8002f42:	2e00      	cmp	r6, #0
 8002f44:	d05d      	beq.n	8003002 <_strtol_l.isra.0+0xee>
 8002f46:	2e10      	cmp	r6, #16
 8002f48:	d109      	bne.n	8002f5e <_strtol_l.isra.0+0x4a>
 8002f4a:	2c30      	cmp	r4, #48	; 0x30
 8002f4c:	d107      	bne.n	8002f5e <_strtol_l.isra.0+0x4a>
 8002f4e:	782b      	ldrb	r3, [r5, #0]
 8002f50:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002f54:	2b58      	cmp	r3, #88	; 0x58
 8002f56:	d14f      	bne.n	8002ff8 <_strtol_l.isra.0+0xe4>
 8002f58:	2610      	movs	r6, #16
 8002f5a:	786c      	ldrb	r4, [r5, #1]
 8002f5c:	3502      	adds	r5, #2
 8002f5e:	2a00      	cmp	r2, #0
 8002f60:	bf14      	ite	ne
 8002f62:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002f66:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8002f6a:	2700      	movs	r7, #0
 8002f6c:	fbb1 fcf6 	udiv	ip, r1, r6
 8002f70:	4638      	mov	r0, r7
 8002f72:	fb06 1e1c 	mls	lr, r6, ip, r1
 8002f76:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8002f7a:	2b09      	cmp	r3, #9
 8002f7c:	d817      	bhi.n	8002fae <_strtol_l.isra.0+0x9a>
 8002f7e:	461c      	mov	r4, r3
 8002f80:	42a6      	cmp	r6, r4
 8002f82:	dd23      	ble.n	8002fcc <_strtol_l.isra.0+0xb8>
 8002f84:	1c7b      	adds	r3, r7, #1
 8002f86:	d007      	beq.n	8002f98 <_strtol_l.isra.0+0x84>
 8002f88:	4584      	cmp	ip, r0
 8002f8a:	d31c      	bcc.n	8002fc6 <_strtol_l.isra.0+0xb2>
 8002f8c:	d101      	bne.n	8002f92 <_strtol_l.isra.0+0x7e>
 8002f8e:	45a6      	cmp	lr, r4
 8002f90:	db19      	blt.n	8002fc6 <_strtol_l.isra.0+0xb2>
 8002f92:	2701      	movs	r7, #1
 8002f94:	fb00 4006 	mla	r0, r0, r6, r4
 8002f98:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002f9c:	e7eb      	b.n	8002f76 <_strtol_l.isra.0+0x62>
 8002f9e:	462f      	mov	r7, r5
 8002fa0:	e7bf      	b.n	8002f22 <_strtol_l.isra.0+0xe>
 8002fa2:	2c2b      	cmp	r4, #43	; 0x2b
 8002fa4:	bf04      	itt	eq
 8002fa6:	1cbd      	addeq	r5, r7, #2
 8002fa8:	787c      	ldrbeq	r4, [r7, #1]
 8002faa:	461a      	mov	r2, r3
 8002fac:	e7c9      	b.n	8002f42 <_strtol_l.isra.0+0x2e>
 8002fae:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002fb2:	2b19      	cmp	r3, #25
 8002fb4:	d801      	bhi.n	8002fba <_strtol_l.isra.0+0xa6>
 8002fb6:	3c37      	subs	r4, #55	; 0x37
 8002fb8:	e7e2      	b.n	8002f80 <_strtol_l.isra.0+0x6c>
 8002fba:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002fbe:	2b19      	cmp	r3, #25
 8002fc0:	d804      	bhi.n	8002fcc <_strtol_l.isra.0+0xb8>
 8002fc2:	3c57      	subs	r4, #87	; 0x57
 8002fc4:	e7dc      	b.n	8002f80 <_strtol_l.isra.0+0x6c>
 8002fc6:	f04f 37ff 	mov.w	r7, #4294967295
 8002fca:	e7e5      	b.n	8002f98 <_strtol_l.isra.0+0x84>
 8002fcc:	1c7b      	adds	r3, r7, #1
 8002fce:	d108      	bne.n	8002fe2 <_strtol_l.isra.0+0xce>
 8002fd0:	2322      	movs	r3, #34	; 0x22
 8002fd2:	4608      	mov	r0, r1
 8002fd4:	f8c8 3000 	str.w	r3, [r8]
 8002fd8:	f1ba 0f00 	cmp.w	sl, #0
 8002fdc:	d107      	bne.n	8002fee <_strtol_l.isra.0+0xda>
 8002fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe2:	b102      	cbz	r2, 8002fe6 <_strtol_l.isra.0+0xd2>
 8002fe4:	4240      	negs	r0, r0
 8002fe6:	f1ba 0f00 	cmp.w	sl, #0
 8002fea:	d0f8      	beq.n	8002fde <_strtol_l.isra.0+0xca>
 8002fec:	b10f      	cbz	r7, 8002ff2 <_strtol_l.isra.0+0xde>
 8002fee:	f105 39ff 	add.w	r9, r5, #4294967295
 8002ff2:	f8ca 9000 	str.w	r9, [sl]
 8002ff6:	e7f2      	b.n	8002fde <_strtol_l.isra.0+0xca>
 8002ff8:	2430      	movs	r4, #48	; 0x30
 8002ffa:	2e00      	cmp	r6, #0
 8002ffc:	d1af      	bne.n	8002f5e <_strtol_l.isra.0+0x4a>
 8002ffe:	2608      	movs	r6, #8
 8003000:	e7ad      	b.n	8002f5e <_strtol_l.isra.0+0x4a>
 8003002:	2c30      	cmp	r4, #48	; 0x30
 8003004:	d0a3      	beq.n	8002f4e <_strtol_l.isra.0+0x3a>
 8003006:	260a      	movs	r6, #10
 8003008:	e7a9      	b.n	8002f5e <_strtol_l.isra.0+0x4a>
	...

0800300c <strtol>:
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <strtol+0x24>)
 800300e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003010:	681c      	ldr	r4, [r3, #0]
 8003012:	4d08      	ldr	r5, [pc, #32]	; (8003034 <strtol+0x28>)
 8003014:	6a23      	ldr	r3, [r4, #32]
 8003016:	2b00      	cmp	r3, #0
 8003018:	bf08      	it	eq
 800301a:	462b      	moveq	r3, r5
 800301c:	9300      	str	r3, [sp, #0]
 800301e:	4613      	mov	r3, r2
 8003020:	460a      	mov	r2, r1
 8003022:	4601      	mov	r1, r0
 8003024:	4620      	mov	r0, r4
 8003026:	f7ff ff75 	bl	8002f14 <_strtol_l.isra.0>
 800302a:	b003      	add	sp, #12
 800302c:	bd30      	pop	{r4, r5, pc}
 800302e:	bf00      	nop
 8003030:	2000000c 	.word	0x2000000c
 8003034:	20000070 	.word	0x20000070

08003038 <std>:
 8003038:	2300      	movs	r3, #0
 800303a:	b510      	push	{r4, lr}
 800303c:	4604      	mov	r4, r0
 800303e:	e9c0 3300 	strd	r3, r3, [r0]
 8003042:	6083      	str	r3, [r0, #8]
 8003044:	8181      	strh	r1, [r0, #12]
 8003046:	6643      	str	r3, [r0, #100]	; 0x64
 8003048:	81c2      	strh	r2, [r0, #14]
 800304a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800304e:	6183      	str	r3, [r0, #24]
 8003050:	4619      	mov	r1, r3
 8003052:	2208      	movs	r2, #8
 8003054:	305c      	adds	r0, #92	; 0x5c
 8003056:	f7ff fece 	bl	8002df6 <memset>
 800305a:	4b05      	ldr	r3, [pc, #20]	; (8003070 <std+0x38>)
 800305c:	6224      	str	r4, [r4, #32]
 800305e:	6263      	str	r3, [r4, #36]	; 0x24
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <std+0x3c>)
 8003062:	62a3      	str	r3, [r4, #40]	; 0x28
 8003064:	4b04      	ldr	r3, [pc, #16]	; (8003078 <std+0x40>)
 8003066:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003068:	4b04      	ldr	r3, [pc, #16]	; (800307c <std+0x44>)
 800306a:	6323      	str	r3, [r4, #48]	; 0x30
 800306c:	bd10      	pop	{r4, pc}
 800306e:	bf00      	nop
 8003070:	08003afd 	.word	0x08003afd
 8003074:	08003b1f 	.word	0x08003b1f
 8003078:	08003b57 	.word	0x08003b57
 800307c:	08003b7b 	.word	0x08003b7b

08003080 <_cleanup_r>:
 8003080:	4901      	ldr	r1, [pc, #4]	; (8003088 <_cleanup_r+0x8>)
 8003082:	f000 b885 	b.w	8003190 <_fwalk_reent>
 8003086:	bf00      	nop
 8003088:	08003e71 	.word	0x08003e71

0800308c <__sfmoreglue>:
 800308c:	b570      	push	{r4, r5, r6, lr}
 800308e:	2568      	movs	r5, #104	; 0x68
 8003090:	1e4a      	subs	r2, r1, #1
 8003092:	4355      	muls	r5, r2
 8003094:	460e      	mov	r6, r1
 8003096:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800309a:	f000 f8ad 	bl	80031f8 <_malloc_r>
 800309e:	4604      	mov	r4, r0
 80030a0:	b140      	cbz	r0, 80030b4 <__sfmoreglue+0x28>
 80030a2:	2100      	movs	r1, #0
 80030a4:	e9c0 1600 	strd	r1, r6, [r0]
 80030a8:	300c      	adds	r0, #12
 80030aa:	60a0      	str	r0, [r4, #8]
 80030ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80030b0:	f7ff fea1 	bl	8002df6 <memset>
 80030b4:	4620      	mov	r0, r4
 80030b6:	bd70      	pop	{r4, r5, r6, pc}

080030b8 <__sinit>:
 80030b8:	6983      	ldr	r3, [r0, #24]
 80030ba:	b510      	push	{r4, lr}
 80030bc:	4604      	mov	r4, r0
 80030be:	bb33      	cbnz	r3, 800310e <__sinit+0x56>
 80030c0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80030c4:	6503      	str	r3, [r0, #80]	; 0x50
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <__sinit+0x58>)
 80030c8:	4a12      	ldr	r2, [pc, #72]	; (8003114 <__sinit+0x5c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6282      	str	r2, [r0, #40]	; 0x28
 80030ce:	4298      	cmp	r0, r3
 80030d0:	bf04      	itt	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	6183      	streq	r3, [r0, #24]
 80030d6:	f000 f81f 	bl	8003118 <__sfp>
 80030da:	6060      	str	r0, [r4, #4]
 80030dc:	4620      	mov	r0, r4
 80030de:	f000 f81b 	bl	8003118 <__sfp>
 80030e2:	60a0      	str	r0, [r4, #8]
 80030e4:	4620      	mov	r0, r4
 80030e6:	f000 f817 	bl	8003118 <__sfp>
 80030ea:	2200      	movs	r2, #0
 80030ec:	60e0      	str	r0, [r4, #12]
 80030ee:	2104      	movs	r1, #4
 80030f0:	6860      	ldr	r0, [r4, #4]
 80030f2:	f7ff ffa1 	bl	8003038 <std>
 80030f6:	2201      	movs	r2, #1
 80030f8:	2109      	movs	r1, #9
 80030fa:	68a0      	ldr	r0, [r4, #8]
 80030fc:	f7ff ff9c 	bl	8003038 <std>
 8003100:	2202      	movs	r2, #2
 8003102:	2112      	movs	r1, #18
 8003104:	68e0      	ldr	r0, [r4, #12]
 8003106:	f7ff ff97 	bl	8003038 <std>
 800310a:	2301      	movs	r3, #1
 800310c:	61a3      	str	r3, [r4, #24]
 800310e:	bd10      	pop	{r4, pc}
 8003110:	08004354 	.word	0x08004354
 8003114:	08003081 	.word	0x08003081

08003118 <__sfp>:
 8003118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311a:	4b1b      	ldr	r3, [pc, #108]	; (8003188 <__sfp+0x70>)
 800311c:	4607      	mov	r7, r0
 800311e:	681e      	ldr	r6, [r3, #0]
 8003120:	69b3      	ldr	r3, [r6, #24]
 8003122:	b913      	cbnz	r3, 800312a <__sfp+0x12>
 8003124:	4630      	mov	r0, r6
 8003126:	f7ff ffc7 	bl	80030b8 <__sinit>
 800312a:	3648      	adds	r6, #72	; 0x48
 800312c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003130:	3b01      	subs	r3, #1
 8003132:	d503      	bpl.n	800313c <__sfp+0x24>
 8003134:	6833      	ldr	r3, [r6, #0]
 8003136:	b133      	cbz	r3, 8003146 <__sfp+0x2e>
 8003138:	6836      	ldr	r6, [r6, #0]
 800313a:	e7f7      	b.n	800312c <__sfp+0x14>
 800313c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003140:	b16d      	cbz	r5, 800315e <__sfp+0x46>
 8003142:	3468      	adds	r4, #104	; 0x68
 8003144:	e7f4      	b.n	8003130 <__sfp+0x18>
 8003146:	2104      	movs	r1, #4
 8003148:	4638      	mov	r0, r7
 800314a:	f7ff ff9f 	bl	800308c <__sfmoreglue>
 800314e:	6030      	str	r0, [r6, #0]
 8003150:	2800      	cmp	r0, #0
 8003152:	d1f1      	bne.n	8003138 <__sfp+0x20>
 8003154:	230c      	movs	r3, #12
 8003156:	4604      	mov	r4, r0
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	4620      	mov	r0, r4
 800315c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800315e:	4b0b      	ldr	r3, [pc, #44]	; (800318c <__sfp+0x74>)
 8003160:	6665      	str	r5, [r4, #100]	; 0x64
 8003162:	e9c4 5500 	strd	r5, r5, [r4]
 8003166:	60a5      	str	r5, [r4, #8]
 8003168:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800316c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003170:	2208      	movs	r2, #8
 8003172:	4629      	mov	r1, r5
 8003174:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003178:	f7ff fe3d 	bl	8002df6 <memset>
 800317c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003180:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003184:	e7e9      	b.n	800315a <__sfp+0x42>
 8003186:	bf00      	nop
 8003188:	08004354 	.word	0x08004354
 800318c:	ffff0001 	.word	0xffff0001

08003190 <_fwalk_reent>:
 8003190:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003194:	4680      	mov	r8, r0
 8003196:	4689      	mov	r9, r1
 8003198:	2600      	movs	r6, #0
 800319a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800319e:	b914      	cbnz	r4, 80031a6 <_fwalk_reent+0x16>
 80031a0:	4630      	mov	r0, r6
 80031a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031a6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80031aa:	3f01      	subs	r7, #1
 80031ac:	d501      	bpl.n	80031b2 <_fwalk_reent+0x22>
 80031ae:	6824      	ldr	r4, [r4, #0]
 80031b0:	e7f5      	b.n	800319e <_fwalk_reent+0xe>
 80031b2:	89ab      	ldrh	r3, [r5, #12]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d907      	bls.n	80031c8 <_fwalk_reent+0x38>
 80031b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80031bc:	3301      	adds	r3, #1
 80031be:	d003      	beq.n	80031c8 <_fwalk_reent+0x38>
 80031c0:	4629      	mov	r1, r5
 80031c2:	4640      	mov	r0, r8
 80031c4:	47c8      	blx	r9
 80031c6:	4306      	orrs	r6, r0
 80031c8:	3568      	adds	r5, #104	; 0x68
 80031ca:	e7ee      	b.n	80031aa <_fwalk_reent+0x1a>

080031cc <__locale_ctype_ptr_l>:
 80031cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80031d0:	4770      	bx	lr

080031d2 <__ascii_mbtowc>:
 80031d2:	b082      	sub	sp, #8
 80031d4:	b901      	cbnz	r1, 80031d8 <__ascii_mbtowc+0x6>
 80031d6:	a901      	add	r1, sp, #4
 80031d8:	b142      	cbz	r2, 80031ec <__ascii_mbtowc+0x1a>
 80031da:	b14b      	cbz	r3, 80031f0 <__ascii_mbtowc+0x1e>
 80031dc:	7813      	ldrb	r3, [r2, #0]
 80031de:	600b      	str	r3, [r1, #0]
 80031e0:	7812      	ldrb	r2, [r2, #0]
 80031e2:	1c10      	adds	r0, r2, #0
 80031e4:	bf18      	it	ne
 80031e6:	2001      	movne	r0, #1
 80031e8:	b002      	add	sp, #8
 80031ea:	4770      	bx	lr
 80031ec:	4610      	mov	r0, r2
 80031ee:	e7fb      	b.n	80031e8 <__ascii_mbtowc+0x16>
 80031f0:	f06f 0001 	mvn.w	r0, #1
 80031f4:	e7f8      	b.n	80031e8 <__ascii_mbtowc+0x16>
	...

080031f8 <_malloc_r>:
 80031f8:	b570      	push	{r4, r5, r6, lr}
 80031fa:	1ccd      	adds	r5, r1, #3
 80031fc:	f025 0503 	bic.w	r5, r5, #3
 8003200:	3508      	adds	r5, #8
 8003202:	2d0c      	cmp	r5, #12
 8003204:	bf38      	it	cc
 8003206:	250c      	movcc	r5, #12
 8003208:	2d00      	cmp	r5, #0
 800320a:	4606      	mov	r6, r0
 800320c:	db01      	blt.n	8003212 <_malloc_r+0x1a>
 800320e:	42a9      	cmp	r1, r5
 8003210:	d903      	bls.n	800321a <_malloc_r+0x22>
 8003212:	230c      	movs	r3, #12
 8003214:	6033      	str	r3, [r6, #0]
 8003216:	2000      	movs	r0, #0
 8003218:	bd70      	pop	{r4, r5, r6, pc}
 800321a:	f000 fef0 	bl	8003ffe <__malloc_lock>
 800321e:	4a21      	ldr	r2, [pc, #132]	; (80032a4 <_malloc_r+0xac>)
 8003220:	6814      	ldr	r4, [r2, #0]
 8003222:	4621      	mov	r1, r4
 8003224:	b991      	cbnz	r1, 800324c <_malloc_r+0x54>
 8003226:	4c20      	ldr	r4, [pc, #128]	; (80032a8 <_malloc_r+0xb0>)
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	b91b      	cbnz	r3, 8003234 <_malloc_r+0x3c>
 800322c:	4630      	mov	r0, r6
 800322e:	f000 fc55 	bl	8003adc <_sbrk_r>
 8003232:	6020      	str	r0, [r4, #0]
 8003234:	4629      	mov	r1, r5
 8003236:	4630      	mov	r0, r6
 8003238:	f000 fc50 	bl	8003adc <_sbrk_r>
 800323c:	1c43      	adds	r3, r0, #1
 800323e:	d124      	bne.n	800328a <_malloc_r+0x92>
 8003240:	230c      	movs	r3, #12
 8003242:	4630      	mov	r0, r6
 8003244:	6033      	str	r3, [r6, #0]
 8003246:	f000 fedb 	bl	8004000 <__malloc_unlock>
 800324a:	e7e4      	b.n	8003216 <_malloc_r+0x1e>
 800324c:	680b      	ldr	r3, [r1, #0]
 800324e:	1b5b      	subs	r3, r3, r5
 8003250:	d418      	bmi.n	8003284 <_malloc_r+0x8c>
 8003252:	2b0b      	cmp	r3, #11
 8003254:	d90f      	bls.n	8003276 <_malloc_r+0x7e>
 8003256:	600b      	str	r3, [r1, #0]
 8003258:	18cc      	adds	r4, r1, r3
 800325a:	50cd      	str	r5, [r1, r3]
 800325c:	4630      	mov	r0, r6
 800325e:	f000 fecf 	bl	8004000 <__malloc_unlock>
 8003262:	f104 000b 	add.w	r0, r4, #11
 8003266:	1d23      	adds	r3, r4, #4
 8003268:	f020 0007 	bic.w	r0, r0, #7
 800326c:	1ac3      	subs	r3, r0, r3
 800326e:	d0d3      	beq.n	8003218 <_malloc_r+0x20>
 8003270:	425a      	negs	r2, r3
 8003272:	50e2      	str	r2, [r4, r3]
 8003274:	e7d0      	b.n	8003218 <_malloc_r+0x20>
 8003276:	684b      	ldr	r3, [r1, #4]
 8003278:	428c      	cmp	r4, r1
 800327a:	bf16      	itet	ne
 800327c:	6063      	strne	r3, [r4, #4]
 800327e:	6013      	streq	r3, [r2, #0]
 8003280:	460c      	movne	r4, r1
 8003282:	e7eb      	b.n	800325c <_malloc_r+0x64>
 8003284:	460c      	mov	r4, r1
 8003286:	6849      	ldr	r1, [r1, #4]
 8003288:	e7cc      	b.n	8003224 <_malloc_r+0x2c>
 800328a:	1cc4      	adds	r4, r0, #3
 800328c:	f024 0403 	bic.w	r4, r4, #3
 8003290:	42a0      	cmp	r0, r4
 8003292:	d005      	beq.n	80032a0 <_malloc_r+0xa8>
 8003294:	1a21      	subs	r1, r4, r0
 8003296:	4630      	mov	r0, r6
 8003298:	f000 fc20 	bl	8003adc <_sbrk_r>
 800329c:	3001      	adds	r0, #1
 800329e:	d0cf      	beq.n	8003240 <_malloc_r+0x48>
 80032a0:	6025      	str	r5, [r4, #0]
 80032a2:	e7db      	b.n	800325c <_malloc_r+0x64>
 80032a4:	20000d74 	.word	0x20000d74
 80032a8:	20000d78 	.word	0x20000d78

080032ac <__ssputs_r>:
 80032ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032b0:	688e      	ldr	r6, [r1, #8]
 80032b2:	4682      	mov	sl, r0
 80032b4:	429e      	cmp	r6, r3
 80032b6:	460c      	mov	r4, r1
 80032b8:	4690      	mov	r8, r2
 80032ba:	4699      	mov	r9, r3
 80032bc:	d837      	bhi.n	800332e <__ssputs_r+0x82>
 80032be:	898a      	ldrh	r2, [r1, #12]
 80032c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80032c4:	d031      	beq.n	800332a <__ssputs_r+0x7e>
 80032c6:	2302      	movs	r3, #2
 80032c8:	6825      	ldr	r5, [r4, #0]
 80032ca:	6909      	ldr	r1, [r1, #16]
 80032cc:	1a6f      	subs	r7, r5, r1
 80032ce:	6965      	ldr	r5, [r4, #20]
 80032d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80032d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80032d8:	f109 0301 	add.w	r3, r9, #1
 80032dc:	443b      	add	r3, r7
 80032de:	429d      	cmp	r5, r3
 80032e0:	bf38      	it	cc
 80032e2:	461d      	movcc	r5, r3
 80032e4:	0553      	lsls	r3, r2, #21
 80032e6:	d530      	bpl.n	800334a <__ssputs_r+0x9e>
 80032e8:	4629      	mov	r1, r5
 80032ea:	f7ff ff85 	bl	80031f8 <_malloc_r>
 80032ee:	4606      	mov	r6, r0
 80032f0:	b950      	cbnz	r0, 8003308 <__ssputs_r+0x5c>
 80032f2:	230c      	movs	r3, #12
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	f8ca 3000 	str.w	r3, [sl]
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003302:	81a3      	strh	r3, [r4, #12]
 8003304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003308:	463a      	mov	r2, r7
 800330a:	6921      	ldr	r1, [r4, #16]
 800330c:	f7ff fd68 	bl	8002de0 <memcpy>
 8003310:	89a3      	ldrh	r3, [r4, #12]
 8003312:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800331a:	81a3      	strh	r3, [r4, #12]
 800331c:	6126      	str	r6, [r4, #16]
 800331e:	443e      	add	r6, r7
 8003320:	6026      	str	r6, [r4, #0]
 8003322:	464e      	mov	r6, r9
 8003324:	6165      	str	r5, [r4, #20]
 8003326:	1bed      	subs	r5, r5, r7
 8003328:	60a5      	str	r5, [r4, #8]
 800332a:	454e      	cmp	r6, r9
 800332c:	d900      	bls.n	8003330 <__ssputs_r+0x84>
 800332e:	464e      	mov	r6, r9
 8003330:	4632      	mov	r2, r6
 8003332:	4641      	mov	r1, r8
 8003334:	6820      	ldr	r0, [r4, #0]
 8003336:	f000 fe49 	bl	8003fcc <memmove>
 800333a:	68a3      	ldr	r3, [r4, #8]
 800333c:	2000      	movs	r0, #0
 800333e:	1b9b      	subs	r3, r3, r6
 8003340:	60a3      	str	r3, [r4, #8]
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	441e      	add	r6, r3
 8003346:	6026      	str	r6, [r4, #0]
 8003348:	e7dc      	b.n	8003304 <__ssputs_r+0x58>
 800334a:	462a      	mov	r2, r5
 800334c:	f000 fea6 	bl	800409c <_realloc_r>
 8003350:	4606      	mov	r6, r0
 8003352:	2800      	cmp	r0, #0
 8003354:	d1e2      	bne.n	800331c <__ssputs_r+0x70>
 8003356:	6921      	ldr	r1, [r4, #16]
 8003358:	4650      	mov	r0, sl
 800335a:	f000 fe53 	bl	8004004 <_free_r>
 800335e:	e7c8      	b.n	80032f2 <__ssputs_r+0x46>

08003360 <_svfiprintf_r>:
 8003360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003364:	461d      	mov	r5, r3
 8003366:	898b      	ldrh	r3, [r1, #12]
 8003368:	b09d      	sub	sp, #116	; 0x74
 800336a:	061f      	lsls	r7, r3, #24
 800336c:	4680      	mov	r8, r0
 800336e:	460c      	mov	r4, r1
 8003370:	4616      	mov	r6, r2
 8003372:	d50f      	bpl.n	8003394 <_svfiprintf_r+0x34>
 8003374:	690b      	ldr	r3, [r1, #16]
 8003376:	b96b      	cbnz	r3, 8003394 <_svfiprintf_r+0x34>
 8003378:	2140      	movs	r1, #64	; 0x40
 800337a:	f7ff ff3d 	bl	80031f8 <_malloc_r>
 800337e:	6020      	str	r0, [r4, #0]
 8003380:	6120      	str	r0, [r4, #16]
 8003382:	b928      	cbnz	r0, 8003390 <_svfiprintf_r+0x30>
 8003384:	230c      	movs	r3, #12
 8003386:	f8c8 3000 	str.w	r3, [r8]
 800338a:	f04f 30ff 	mov.w	r0, #4294967295
 800338e:	e0c8      	b.n	8003522 <_svfiprintf_r+0x1c2>
 8003390:	2340      	movs	r3, #64	; 0x40
 8003392:	6163      	str	r3, [r4, #20]
 8003394:	2300      	movs	r3, #0
 8003396:	9309      	str	r3, [sp, #36]	; 0x24
 8003398:	2320      	movs	r3, #32
 800339a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800339e:	2330      	movs	r3, #48	; 0x30
 80033a0:	f04f 0b01 	mov.w	fp, #1
 80033a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80033a8:	9503      	str	r5, [sp, #12]
 80033aa:	4637      	mov	r7, r6
 80033ac:	463d      	mov	r5, r7
 80033ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80033b2:	b10b      	cbz	r3, 80033b8 <_svfiprintf_r+0x58>
 80033b4:	2b25      	cmp	r3, #37	; 0x25
 80033b6:	d13e      	bne.n	8003436 <_svfiprintf_r+0xd6>
 80033b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80033bc:	d00b      	beq.n	80033d6 <_svfiprintf_r+0x76>
 80033be:	4653      	mov	r3, sl
 80033c0:	4632      	mov	r2, r6
 80033c2:	4621      	mov	r1, r4
 80033c4:	4640      	mov	r0, r8
 80033c6:	f7ff ff71 	bl	80032ac <__ssputs_r>
 80033ca:	3001      	adds	r0, #1
 80033cc:	f000 80a4 	beq.w	8003518 <_svfiprintf_r+0x1b8>
 80033d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80033d2:	4453      	add	r3, sl
 80033d4:	9309      	str	r3, [sp, #36]	; 0x24
 80033d6:	783b      	ldrb	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	f000 809d 	beq.w	8003518 <_svfiprintf_r+0x1b8>
 80033de:	2300      	movs	r3, #0
 80033e0:	f04f 32ff 	mov.w	r2, #4294967295
 80033e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80033e8:	9304      	str	r3, [sp, #16]
 80033ea:	9307      	str	r3, [sp, #28]
 80033ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033f0:	931a      	str	r3, [sp, #104]	; 0x68
 80033f2:	462f      	mov	r7, r5
 80033f4:	2205      	movs	r2, #5
 80033f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80033fa:	4850      	ldr	r0, [pc, #320]	; (800353c <_svfiprintf_r+0x1dc>)
 80033fc:	f000 fdd8 	bl	8003fb0 <memchr>
 8003400:	9b04      	ldr	r3, [sp, #16]
 8003402:	b9d0      	cbnz	r0, 800343a <_svfiprintf_r+0xda>
 8003404:	06d9      	lsls	r1, r3, #27
 8003406:	bf44      	itt	mi
 8003408:	2220      	movmi	r2, #32
 800340a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800340e:	071a      	lsls	r2, r3, #28
 8003410:	bf44      	itt	mi
 8003412:	222b      	movmi	r2, #43	; 0x2b
 8003414:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003418:	782a      	ldrb	r2, [r5, #0]
 800341a:	2a2a      	cmp	r2, #42	; 0x2a
 800341c:	d015      	beq.n	800344a <_svfiprintf_r+0xea>
 800341e:	462f      	mov	r7, r5
 8003420:	2000      	movs	r0, #0
 8003422:	250a      	movs	r5, #10
 8003424:	9a07      	ldr	r2, [sp, #28]
 8003426:	4639      	mov	r1, r7
 8003428:	f811 3b01 	ldrb.w	r3, [r1], #1
 800342c:	3b30      	subs	r3, #48	; 0x30
 800342e:	2b09      	cmp	r3, #9
 8003430:	d94d      	bls.n	80034ce <_svfiprintf_r+0x16e>
 8003432:	b1b8      	cbz	r0, 8003464 <_svfiprintf_r+0x104>
 8003434:	e00f      	b.n	8003456 <_svfiprintf_r+0xf6>
 8003436:	462f      	mov	r7, r5
 8003438:	e7b8      	b.n	80033ac <_svfiprintf_r+0x4c>
 800343a:	4a40      	ldr	r2, [pc, #256]	; (800353c <_svfiprintf_r+0x1dc>)
 800343c:	463d      	mov	r5, r7
 800343e:	1a80      	subs	r0, r0, r2
 8003440:	fa0b f000 	lsl.w	r0, fp, r0
 8003444:	4318      	orrs	r0, r3
 8003446:	9004      	str	r0, [sp, #16]
 8003448:	e7d3      	b.n	80033f2 <_svfiprintf_r+0x92>
 800344a:	9a03      	ldr	r2, [sp, #12]
 800344c:	1d11      	adds	r1, r2, #4
 800344e:	6812      	ldr	r2, [r2, #0]
 8003450:	9103      	str	r1, [sp, #12]
 8003452:	2a00      	cmp	r2, #0
 8003454:	db01      	blt.n	800345a <_svfiprintf_r+0xfa>
 8003456:	9207      	str	r2, [sp, #28]
 8003458:	e004      	b.n	8003464 <_svfiprintf_r+0x104>
 800345a:	4252      	negs	r2, r2
 800345c:	f043 0302 	orr.w	r3, r3, #2
 8003460:	9207      	str	r2, [sp, #28]
 8003462:	9304      	str	r3, [sp, #16]
 8003464:	783b      	ldrb	r3, [r7, #0]
 8003466:	2b2e      	cmp	r3, #46	; 0x2e
 8003468:	d10c      	bne.n	8003484 <_svfiprintf_r+0x124>
 800346a:	787b      	ldrb	r3, [r7, #1]
 800346c:	2b2a      	cmp	r3, #42	; 0x2a
 800346e:	d133      	bne.n	80034d8 <_svfiprintf_r+0x178>
 8003470:	9b03      	ldr	r3, [sp, #12]
 8003472:	3702      	adds	r7, #2
 8003474:	1d1a      	adds	r2, r3, #4
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	9203      	str	r2, [sp, #12]
 800347a:	2b00      	cmp	r3, #0
 800347c:	bfb8      	it	lt
 800347e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003482:	9305      	str	r3, [sp, #20]
 8003484:	4d2e      	ldr	r5, [pc, #184]	; (8003540 <_svfiprintf_r+0x1e0>)
 8003486:	2203      	movs	r2, #3
 8003488:	7839      	ldrb	r1, [r7, #0]
 800348a:	4628      	mov	r0, r5
 800348c:	f000 fd90 	bl	8003fb0 <memchr>
 8003490:	b138      	cbz	r0, 80034a2 <_svfiprintf_r+0x142>
 8003492:	2340      	movs	r3, #64	; 0x40
 8003494:	1b40      	subs	r0, r0, r5
 8003496:	fa03 f000 	lsl.w	r0, r3, r0
 800349a:	9b04      	ldr	r3, [sp, #16]
 800349c:	3701      	adds	r7, #1
 800349e:	4303      	orrs	r3, r0
 80034a0:	9304      	str	r3, [sp, #16]
 80034a2:	7839      	ldrb	r1, [r7, #0]
 80034a4:	2206      	movs	r2, #6
 80034a6:	4827      	ldr	r0, [pc, #156]	; (8003544 <_svfiprintf_r+0x1e4>)
 80034a8:	1c7e      	adds	r6, r7, #1
 80034aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80034ae:	f000 fd7f 	bl	8003fb0 <memchr>
 80034b2:	2800      	cmp	r0, #0
 80034b4:	d038      	beq.n	8003528 <_svfiprintf_r+0x1c8>
 80034b6:	4b24      	ldr	r3, [pc, #144]	; (8003548 <_svfiprintf_r+0x1e8>)
 80034b8:	bb13      	cbnz	r3, 8003500 <_svfiprintf_r+0x1a0>
 80034ba:	9b03      	ldr	r3, [sp, #12]
 80034bc:	3307      	adds	r3, #7
 80034be:	f023 0307 	bic.w	r3, r3, #7
 80034c2:	3308      	adds	r3, #8
 80034c4:	9303      	str	r3, [sp, #12]
 80034c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80034c8:	444b      	add	r3, r9
 80034ca:	9309      	str	r3, [sp, #36]	; 0x24
 80034cc:	e76d      	b.n	80033aa <_svfiprintf_r+0x4a>
 80034ce:	fb05 3202 	mla	r2, r5, r2, r3
 80034d2:	2001      	movs	r0, #1
 80034d4:	460f      	mov	r7, r1
 80034d6:	e7a6      	b.n	8003426 <_svfiprintf_r+0xc6>
 80034d8:	2300      	movs	r3, #0
 80034da:	250a      	movs	r5, #10
 80034dc:	4619      	mov	r1, r3
 80034de:	3701      	adds	r7, #1
 80034e0:	9305      	str	r3, [sp, #20]
 80034e2:	4638      	mov	r0, r7
 80034e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80034e8:	3a30      	subs	r2, #48	; 0x30
 80034ea:	2a09      	cmp	r2, #9
 80034ec:	d903      	bls.n	80034f6 <_svfiprintf_r+0x196>
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d0c8      	beq.n	8003484 <_svfiprintf_r+0x124>
 80034f2:	9105      	str	r1, [sp, #20]
 80034f4:	e7c6      	b.n	8003484 <_svfiprintf_r+0x124>
 80034f6:	fb05 2101 	mla	r1, r5, r1, r2
 80034fa:	2301      	movs	r3, #1
 80034fc:	4607      	mov	r7, r0
 80034fe:	e7f0      	b.n	80034e2 <_svfiprintf_r+0x182>
 8003500:	ab03      	add	r3, sp, #12
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	4622      	mov	r2, r4
 8003506:	4b11      	ldr	r3, [pc, #68]	; (800354c <_svfiprintf_r+0x1ec>)
 8003508:	a904      	add	r1, sp, #16
 800350a:	4640      	mov	r0, r8
 800350c:	f3af 8000 	nop.w
 8003510:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003514:	4681      	mov	r9, r0
 8003516:	d1d6      	bne.n	80034c6 <_svfiprintf_r+0x166>
 8003518:	89a3      	ldrh	r3, [r4, #12]
 800351a:	065b      	lsls	r3, r3, #25
 800351c:	f53f af35 	bmi.w	800338a <_svfiprintf_r+0x2a>
 8003520:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003522:	b01d      	add	sp, #116	; 0x74
 8003524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003528:	ab03      	add	r3, sp, #12
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	4622      	mov	r2, r4
 800352e:	4b07      	ldr	r3, [pc, #28]	; (800354c <_svfiprintf_r+0x1ec>)
 8003530:	a904      	add	r1, sp, #16
 8003532:	4640      	mov	r0, r8
 8003534:	f000 f9c0 	bl	80038b8 <_printf_i>
 8003538:	e7ea      	b.n	8003510 <_svfiprintf_r+0x1b0>
 800353a:	bf00      	nop
 800353c:	080043c2 	.word	0x080043c2
 8003540:	080043c8 	.word	0x080043c8
 8003544:	080043cc 	.word	0x080043cc
 8003548:	00000000 	.word	0x00000000
 800354c:	080032ad 	.word	0x080032ad

08003550 <__sfputc_r>:
 8003550:	6893      	ldr	r3, [r2, #8]
 8003552:	b410      	push	{r4}
 8003554:	3b01      	subs	r3, #1
 8003556:	2b00      	cmp	r3, #0
 8003558:	6093      	str	r3, [r2, #8]
 800355a:	da07      	bge.n	800356c <__sfputc_r+0x1c>
 800355c:	6994      	ldr	r4, [r2, #24]
 800355e:	42a3      	cmp	r3, r4
 8003560:	db01      	blt.n	8003566 <__sfputc_r+0x16>
 8003562:	290a      	cmp	r1, #10
 8003564:	d102      	bne.n	800356c <__sfputc_r+0x1c>
 8003566:	bc10      	pop	{r4}
 8003568:	f000 bb0c 	b.w	8003b84 <__swbuf_r>
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	1c58      	adds	r0, r3, #1
 8003570:	6010      	str	r0, [r2, #0]
 8003572:	7019      	strb	r1, [r3, #0]
 8003574:	4608      	mov	r0, r1
 8003576:	bc10      	pop	{r4}
 8003578:	4770      	bx	lr

0800357a <__sfputs_r>:
 800357a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357c:	4606      	mov	r6, r0
 800357e:	460f      	mov	r7, r1
 8003580:	4614      	mov	r4, r2
 8003582:	18d5      	adds	r5, r2, r3
 8003584:	42ac      	cmp	r4, r5
 8003586:	d101      	bne.n	800358c <__sfputs_r+0x12>
 8003588:	2000      	movs	r0, #0
 800358a:	e007      	b.n	800359c <__sfputs_r+0x22>
 800358c:	463a      	mov	r2, r7
 800358e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003592:	4630      	mov	r0, r6
 8003594:	f7ff ffdc 	bl	8003550 <__sfputc_r>
 8003598:	1c43      	adds	r3, r0, #1
 800359a:	d1f3      	bne.n	8003584 <__sfputs_r+0xa>
 800359c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080035a0 <_vfiprintf_r>:
 80035a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a4:	460c      	mov	r4, r1
 80035a6:	b09d      	sub	sp, #116	; 0x74
 80035a8:	4617      	mov	r7, r2
 80035aa:	461d      	mov	r5, r3
 80035ac:	4606      	mov	r6, r0
 80035ae:	b118      	cbz	r0, 80035b8 <_vfiprintf_r+0x18>
 80035b0:	6983      	ldr	r3, [r0, #24]
 80035b2:	b90b      	cbnz	r3, 80035b8 <_vfiprintf_r+0x18>
 80035b4:	f7ff fd80 	bl	80030b8 <__sinit>
 80035b8:	4b7c      	ldr	r3, [pc, #496]	; (80037ac <_vfiprintf_r+0x20c>)
 80035ba:	429c      	cmp	r4, r3
 80035bc:	d158      	bne.n	8003670 <_vfiprintf_r+0xd0>
 80035be:	6874      	ldr	r4, [r6, #4]
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	0718      	lsls	r0, r3, #28
 80035c4:	d55e      	bpl.n	8003684 <_vfiprintf_r+0xe4>
 80035c6:	6923      	ldr	r3, [r4, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d05b      	beq.n	8003684 <_vfiprintf_r+0xe4>
 80035cc:	2300      	movs	r3, #0
 80035ce:	9309      	str	r3, [sp, #36]	; 0x24
 80035d0:	2320      	movs	r3, #32
 80035d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80035d6:	2330      	movs	r3, #48	; 0x30
 80035d8:	f04f 0b01 	mov.w	fp, #1
 80035dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80035e0:	9503      	str	r5, [sp, #12]
 80035e2:	46b8      	mov	r8, r7
 80035e4:	4645      	mov	r5, r8
 80035e6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80035ea:	b10b      	cbz	r3, 80035f0 <_vfiprintf_r+0x50>
 80035ec:	2b25      	cmp	r3, #37	; 0x25
 80035ee:	d154      	bne.n	800369a <_vfiprintf_r+0xfa>
 80035f0:	ebb8 0a07 	subs.w	sl, r8, r7
 80035f4:	d00b      	beq.n	800360e <_vfiprintf_r+0x6e>
 80035f6:	4653      	mov	r3, sl
 80035f8:	463a      	mov	r2, r7
 80035fa:	4621      	mov	r1, r4
 80035fc:	4630      	mov	r0, r6
 80035fe:	f7ff ffbc 	bl	800357a <__sfputs_r>
 8003602:	3001      	adds	r0, #1
 8003604:	f000 80c2 	beq.w	800378c <_vfiprintf_r+0x1ec>
 8003608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800360a:	4453      	add	r3, sl
 800360c:	9309      	str	r3, [sp, #36]	; 0x24
 800360e:	f898 3000 	ldrb.w	r3, [r8]
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 80ba 	beq.w	800378c <_vfiprintf_r+0x1ec>
 8003618:	2300      	movs	r3, #0
 800361a:	f04f 32ff 	mov.w	r2, #4294967295
 800361e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003622:	9304      	str	r3, [sp, #16]
 8003624:	9307      	str	r3, [sp, #28]
 8003626:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800362a:	931a      	str	r3, [sp, #104]	; 0x68
 800362c:	46a8      	mov	r8, r5
 800362e:	2205      	movs	r2, #5
 8003630:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003634:	485e      	ldr	r0, [pc, #376]	; (80037b0 <_vfiprintf_r+0x210>)
 8003636:	f000 fcbb 	bl	8003fb0 <memchr>
 800363a:	9b04      	ldr	r3, [sp, #16]
 800363c:	bb78      	cbnz	r0, 800369e <_vfiprintf_r+0xfe>
 800363e:	06d9      	lsls	r1, r3, #27
 8003640:	bf44      	itt	mi
 8003642:	2220      	movmi	r2, #32
 8003644:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003648:	071a      	lsls	r2, r3, #28
 800364a:	bf44      	itt	mi
 800364c:	222b      	movmi	r2, #43	; 0x2b
 800364e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003652:	782a      	ldrb	r2, [r5, #0]
 8003654:	2a2a      	cmp	r2, #42	; 0x2a
 8003656:	d02a      	beq.n	80036ae <_vfiprintf_r+0x10e>
 8003658:	46a8      	mov	r8, r5
 800365a:	2000      	movs	r0, #0
 800365c:	250a      	movs	r5, #10
 800365e:	9a07      	ldr	r2, [sp, #28]
 8003660:	4641      	mov	r1, r8
 8003662:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003666:	3b30      	subs	r3, #48	; 0x30
 8003668:	2b09      	cmp	r3, #9
 800366a:	d969      	bls.n	8003740 <_vfiprintf_r+0x1a0>
 800366c:	b360      	cbz	r0, 80036c8 <_vfiprintf_r+0x128>
 800366e:	e024      	b.n	80036ba <_vfiprintf_r+0x11a>
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <_vfiprintf_r+0x214>)
 8003672:	429c      	cmp	r4, r3
 8003674:	d101      	bne.n	800367a <_vfiprintf_r+0xda>
 8003676:	68b4      	ldr	r4, [r6, #8]
 8003678:	e7a2      	b.n	80035c0 <_vfiprintf_r+0x20>
 800367a:	4b4f      	ldr	r3, [pc, #316]	; (80037b8 <_vfiprintf_r+0x218>)
 800367c:	429c      	cmp	r4, r3
 800367e:	bf08      	it	eq
 8003680:	68f4      	ldreq	r4, [r6, #12]
 8003682:	e79d      	b.n	80035c0 <_vfiprintf_r+0x20>
 8003684:	4621      	mov	r1, r4
 8003686:	4630      	mov	r0, r6
 8003688:	f000 faee 	bl	8003c68 <__swsetup_r>
 800368c:	2800      	cmp	r0, #0
 800368e:	d09d      	beq.n	80035cc <_vfiprintf_r+0x2c>
 8003690:	f04f 30ff 	mov.w	r0, #4294967295
 8003694:	b01d      	add	sp, #116	; 0x74
 8003696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800369a:	46a8      	mov	r8, r5
 800369c:	e7a2      	b.n	80035e4 <_vfiprintf_r+0x44>
 800369e:	4a44      	ldr	r2, [pc, #272]	; (80037b0 <_vfiprintf_r+0x210>)
 80036a0:	4645      	mov	r5, r8
 80036a2:	1a80      	subs	r0, r0, r2
 80036a4:	fa0b f000 	lsl.w	r0, fp, r0
 80036a8:	4318      	orrs	r0, r3
 80036aa:	9004      	str	r0, [sp, #16]
 80036ac:	e7be      	b.n	800362c <_vfiprintf_r+0x8c>
 80036ae:	9a03      	ldr	r2, [sp, #12]
 80036b0:	1d11      	adds	r1, r2, #4
 80036b2:	6812      	ldr	r2, [r2, #0]
 80036b4:	9103      	str	r1, [sp, #12]
 80036b6:	2a00      	cmp	r2, #0
 80036b8:	db01      	blt.n	80036be <_vfiprintf_r+0x11e>
 80036ba:	9207      	str	r2, [sp, #28]
 80036bc:	e004      	b.n	80036c8 <_vfiprintf_r+0x128>
 80036be:	4252      	negs	r2, r2
 80036c0:	f043 0302 	orr.w	r3, r3, #2
 80036c4:	9207      	str	r2, [sp, #28]
 80036c6:	9304      	str	r3, [sp, #16]
 80036c8:	f898 3000 	ldrb.w	r3, [r8]
 80036cc:	2b2e      	cmp	r3, #46	; 0x2e
 80036ce:	d10e      	bne.n	80036ee <_vfiprintf_r+0x14e>
 80036d0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80036d4:	2b2a      	cmp	r3, #42	; 0x2a
 80036d6:	d138      	bne.n	800374a <_vfiprintf_r+0x1aa>
 80036d8:	9b03      	ldr	r3, [sp, #12]
 80036da:	f108 0802 	add.w	r8, r8, #2
 80036de:	1d1a      	adds	r2, r3, #4
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	9203      	str	r2, [sp, #12]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	bfb8      	it	lt
 80036e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80036ec:	9305      	str	r3, [sp, #20]
 80036ee:	4d33      	ldr	r5, [pc, #204]	; (80037bc <_vfiprintf_r+0x21c>)
 80036f0:	2203      	movs	r2, #3
 80036f2:	f898 1000 	ldrb.w	r1, [r8]
 80036f6:	4628      	mov	r0, r5
 80036f8:	f000 fc5a 	bl	8003fb0 <memchr>
 80036fc:	b140      	cbz	r0, 8003710 <_vfiprintf_r+0x170>
 80036fe:	2340      	movs	r3, #64	; 0x40
 8003700:	1b40      	subs	r0, r0, r5
 8003702:	fa03 f000 	lsl.w	r0, r3, r0
 8003706:	9b04      	ldr	r3, [sp, #16]
 8003708:	f108 0801 	add.w	r8, r8, #1
 800370c:	4303      	orrs	r3, r0
 800370e:	9304      	str	r3, [sp, #16]
 8003710:	f898 1000 	ldrb.w	r1, [r8]
 8003714:	2206      	movs	r2, #6
 8003716:	482a      	ldr	r0, [pc, #168]	; (80037c0 <_vfiprintf_r+0x220>)
 8003718:	f108 0701 	add.w	r7, r8, #1
 800371c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003720:	f000 fc46 	bl	8003fb0 <memchr>
 8003724:	2800      	cmp	r0, #0
 8003726:	d037      	beq.n	8003798 <_vfiprintf_r+0x1f8>
 8003728:	4b26      	ldr	r3, [pc, #152]	; (80037c4 <_vfiprintf_r+0x224>)
 800372a:	bb1b      	cbnz	r3, 8003774 <_vfiprintf_r+0x1d4>
 800372c:	9b03      	ldr	r3, [sp, #12]
 800372e:	3307      	adds	r3, #7
 8003730:	f023 0307 	bic.w	r3, r3, #7
 8003734:	3308      	adds	r3, #8
 8003736:	9303      	str	r3, [sp, #12]
 8003738:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800373a:	444b      	add	r3, r9
 800373c:	9309      	str	r3, [sp, #36]	; 0x24
 800373e:	e750      	b.n	80035e2 <_vfiprintf_r+0x42>
 8003740:	fb05 3202 	mla	r2, r5, r2, r3
 8003744:	2001      	movs	r0, #1
 8003746:	4688      	mov	r8, r1
 8003748:	e78a      	b.n	8003660 <_vfiprintf_r+0xc0>
 800374a:	2300      	movs	r3, #0
 800374c:	250a      	movs	r5, #10
 800374e:	4619      	mov	r1, r3
 8003750:	f108 0801 	add.w	r8, r8, #1
 8003754:	9305      	str	r3, [sp, #20]
 8003756:	4640      	mov	r0, r8
 8003758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800375c:	3a30      	subs	r2, #48	; 0x30
 800375e:	2a09      	cmp	r2, #9
 8003760:	d903      	bls.n	800376a <_vfiprintf_r+0x1ca>
 8003762:	2b00      	cmp	r3, #0
 8003764:	d0c3      	beq.n	80036ee <_vfiprintf_r+0x14e>
 8003766:	9105      	str	r1, [sp, #20]
 8003768:	e7c1      	b.n	80036ee <_vfiprintf_r+0x14e>
 800376a:	fb05 2101 	mla	r1, r5, r1, r2
 800376e:	2301      	movs	r3, #1
 8003770:	4680      	mov	r8, r0
 8003772:	e7f0      	b.n	8003756 <_vfiprintf_r+0x1b6>
 8003774:	ab03      	add	r3, sp, #12
 8003776:	9300      	str	r3, [sp, #0]
 8003778:	4622      	mov	r2, r4
 800377a:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <_vfiprintf_r+0x228>)
 800377c:	a904      	add	r1, sp, #16
 800377e:	4630      	mov	r0, r6
 8003780:	f3af 8000 	nop.w
 8003784:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003788:	4681      	mov	r9, r0
 800378a:	d1d5      	bne.n	8003738 <_vfiprintf_r+0x198>
 800378c:	89a3      	ldrh	r3, [r4, #12]
 800378e:	065b      	lsls	r3, r3, #25
 8003790:	f53f af7e 	bmi.w	8003690 <_vfiprintf_r+0xf0>
 8003794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003796:	e77d      	b.n	8003694 <_vfiprintf_r+0xf4>
 8003798:	ab03      	add	r3, sp, #12
 800379a:	9300      	str	r3, [sp, #0]
 800379c:	4622      	mov	r2, r4
 800379e:	4b0a      	ldr	r3, [pc, #40]	; (80037c8 <_vfiprintf_r+0x228>)
 80037a0:	a904      	add	r1, sp, #16
 80037a2:	4630      	mov	r0, r6
 80037a4:	f000 f888 	bl	80038b8 <_printf_i>
 80037a8:	e7ec      	b.n	8003784 <_vfiprintf_r+0x1e4>
 80037aa:	bf00      	nop
 80037ac:	08004378 	.word	0x08004378
 80037b0:	080043c2 	.word	0x080043c2
 80037b4:	08004398 	.word	0x08004398
 80037b8:	08004358 	.word	0x08004358
 80037bc:	080043c8 	.word	0x080043c8
 80037c0:	080043cc 	.word	0x080043cc
 80037c4:	00000000 	.word	0x00000000
 80037c8:	0800357b 	.word	0x0800357b

080037cc <_printf_common>:
 80037cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037d0:	4691      	mov	r9, r2
 80037d2:	461f      	mov	r7, r3
 80037d4:	688a      	ldr	r2, [r1, #8]
 80037d6:	690b      	ldr	r3, [r1, #16]
 80037d8:	4606      	mov	r6, r0
 80037da:	4293      	cmp	r3, r2
 80037dc:	bfb8      	it	lt
 80037de:	4613      	movlt	r3, r2
 80037e0:	f8c9 3000 	str.w	r3, [r9]
 80037e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037e8:	460c      	mov	r4, r1
 80037ea:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037ee:	b112      	cbz	r2, 80037f6 <_printf_common+0x2a>
 80037f0:	3301      	adds	r3, #1
 80037f2:	f8c9 3000 	str.w	r3, [r9]
 80037f6:	6823      	ldr	r3, [r4, #0]
 80037f8:	0699      	lsls	r1, r3, #26
 80037fa:	bf42      	ittt	mi
 80037fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003800:	3302      	addmi	r3, #2
 8003802:	f8c9 3000 	strmi.w	r3, [r9]
 8003806:	6825      	ldr	r5, [r4, #0]
 8003808:	f015 0506 	ands.w	r5, r5, #6
 800380c:	d107      	bne.n	800381e <_printf_common+0x52>
 800380e:	f104 0a19 	add.w	sl, r4, #25
 8003812:	68e3      	ldr	r3, [r4, #12]
 8003814:	f8d9 2000 	ldr.w	r2, [r9]
 8003818:	1a9b      	subs	r3, r3, r2
 800381a:	42ab      	cmp	r3, r5
 800381c:	dc29      	bgt.n	8003872 <_printf_common+0xa6>
 800381e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003822:	6822      	ldr	r2, [r4, #0]
 8003824:	3300      	adds	r3, #0
 8003826:	bf18      	it	ne
 8003828:	2301      	movne	r3, #1
 800382a:	0692      	lsls	r2, r2, #26
 800382c:	d42e      	bmi.n	800388c <_printf_common+0xc0>
 800382e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003832:	4639      	mov	r1, r7
 8003834:	4630      	mov	r0, r6
 8003836:	47c0      	blx	r8
 8003838:	3001      	adds	r0, #1
 800383a:	d021      	beq.n	8003880 <_printf_common+0xb4>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	68e5      	ldr	r5, [r4, #12]
 8003840:	f003 0306 	and.w	r3, r3, #6
 8003844:	2b04      	cmp	r3, #4
 8003846:	bf18      	it	ne
 8003848:	2500      	movne	r5, #0
 800384a:	f8d9 2000 	ldr.w	r2, [r9]
 800384e:	f04f 0900 	mov.w	r9, #0
 8003852:	bf08      	it	eq
 8003854:	1aad      	subeq	r5, r5, r2
 8003856:	68a3      	ldr	r3, [r4, #8]
 8003858:	6922      	ldr	r2, [r4, #16]
 800385a:	bf08      	it	eq
 800385c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003860:	4293      	cmp	r3, r2
 8003862:	bfc4      	itt	gt
 8003864:	1a9b      	subgt	r3, r3, r2
 8003866:	18ed      	addgt	r5, r5, r3
 8003868:	341a      	adds	r4, #26
 800386a:	454d      	cmp	r5, r9
 800386c:	d11a      	bne.n	80038a4 <_printf_common+0xd8>
 800386e:	2000      	movs	r0, #0
 8003870:	e008      	b.n	8003884 <_printf_common+0xb8>
 8003872:	2301      	movs	r3, #1
 8003874:	4652      	mov	r2, sl
 8003876:	4639      	mov	r1, r7
 8003878:	4630      	mov	r0, r6
 800387a:	47c0      	blx	r8
 800387c:	3001      	adds	r0, #1
 800387e:	d103      	bne.n	8003888 <_printf_common+0xbc>
 8003880:	f04f 30ff 	mov.w	r0, #4294967295
 8003884:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003888:	3501      	adds	r5, #1
 800388a:	e7c2      	b.n	8003812 <_printf_common+0x46>
 800388c:	2030      	movs	r0, #48	; 0x30
 800388e:	18e1      	adds	r1, r4, r3
 8003890:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800389a:	4422      	add	r2, r4
 800389c:	3302      	adds	r3, #2
 800389e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038a2:	e7c4      	b.n	800382e <_printf_common+0x62>
 80038a4:	2301      	movs	r3, #1
 80038a6:	4622      	mov	r2, r4
 80038a8:	4639      	mov	r1, r7
 80038aa:	4630      	mov	r0, r6
 80038ac:	47c0      	blx	r8
 80038ae:	3001      	adds	r0, #1
 80038b0:	d0e6      	beq.n	8003880 <_printf_common+0xb4>
 80038b2:	f109 0901 	add.w	r9, r9, #1
 80038b6:	e7d8      	b.n	800386a <_printf_common+0x9e>

080038b8 <_printf_i>:
 80038b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038bc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80038c0:	460c      	mov	r4, r1
 80038c2:	7e09      	ldrb	r1, [r1, #24]
 80038c4:	b085      	sub	sp, #20
 80038c6:	296e      	cmp	r1, #110	; 0x6e
 80038c8:	4617      	mov	r7, r2
 80038ca:	4606      	mov	r6, r0
 80038cc:	4698      	mov	r8, r3
 80038ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038d0:	f000 80b3 	beq.w	8003a3a <_printf_i+0x182>
 80038d4:	d822      	bhi.n	800391c <_printf_i+0x64>
 80038d6:	2963      	cmp	r1, #99	; 0x63
 80038d8:	d036      	beq.n	8003948 <_printf_i+0x90>
 80038da:	d80a      	bhi.n	80038f2 <_printf_i+0x3a>
 80038dc:	2900      	cmp	r1, #0
 80038de:	f000 80b9 	beq.w	8003a54 <_printf_i+0x19c>
 80038e2:	2958      	cmp	r1, #88	; 0x58
 80038e4:	f000 8083 	beq.w	80039ee <_printf_i+0x136>
 80038e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038ec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038f0:	e032      	b.n	8003958 <_printf_i+0xa0>
 80038f2:	2964      	cmp	r1, #100	; 0x64
 80038f4:	d001      	beq.n	80038fa <_printf_i+0x42>
 80038f6:	2969      	cmp	r1, #105	; 0x69
 80038f8:	d1f6      	bne.n	80038e8 <_printf_i+0x30>
 80038fa:	6820      	ldr	r0, [r4, #0]
 80038fc:	6813      	ldr	r3, [r2, #0]
 80038fe:	0605      	lsls	r5, r0, #24
 8003900:	f103 0104 	add.w	r1, r3, #4
 8003904:	d52a      	bpl.n	800395c <_printf_i+0xa4>
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6011      	str	r1, [r2, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	da03      	bge.n	8003916 <_printf_i+0x5e>
 800390e:	222d      	movs	r2, #45	; 0x2d
 8003910:	425b      	negs	r3, r3
 8003912:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003916:	486f      	ldr	r0, [pc, #444]	; (8003ad4 <_printf_i+0x21c>)
 8003918:	220a      	movs	r2, #10
 800391a:	e039      	b.n	8003990 <_printf_i+0xd8>
 800391c:	2973      	cmp	r1, #115	; 0x73
 800391e:	f000 809d 	beq.w	8003a5c <_printf_i+0x1a4>
 8003922:	d808      	bhi.n	8003936 <_printf_i+0x7e>
 8003924:	296f      	cmp	r1, #111	; 0x6f
 8003926:	d020      	beq.n	800396a <_printf_i+0xb2>
 8003928:	2970      	cmp	r1, #112	; 0x70
 800392a:	d1dd      	bne.n	80038e8 <_printf_i+0x30>
 800392c:	6823      	ldr	r3, [r4, #0]
 800392e:	f043 0320 	orr.w	r3, r3, #32
 8003932:	6023      	str	r3, [r4, #0]
 8003934:	e003      	b.n	800393e <_printf_i+0x86>
 8003936:	2975      	cmp	r1, #117	; 0x75
 8003938:	d017      	beq.n	800396a <_printf_i+0xb2>
 800393a:	2978      	cmp	r1, #120	; 0x78
 800393c:	d1d4      	bne.n	80038e8 <_printf_i+0x30>
 800393e:	2378      	movs	r3, #120	; 0x78
 8003940:	4865      	ldr	r0, [pc, #404]	; (8003ad8 <_printf_i+0x220>)
 8003942:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003946:	e055      	b.n	80039f4 <_printf_i+0x13c>
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800394e:	1d19      	adds	r1, r3, #4
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	6011      	str	r1, [r2, #0]
 8003954:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003958:	2301      	movs	r3, #1
 800395a:	e08c      	b.n	8003a76 <_printf_i+0x1be>
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003962:	6011      	str	r1, [r2, #0]
 8003964:	bf18      	it	ne
 8003966:	b21b      	sxthne	r3, r3
 8003968:	e7cf      	b.n	800390a <_printf_i+0x52>
 800396a:	6813      	ldr	r3, [r2, #0]
 800396c:	6825      	ldr	r5, [r4, #0]
 800396e:	1d18      	adds	r0, r3, #4
 8003970:	6010      	str	r0, [r2, #0]
 8003972:	0628      	lsls	r0, r5, #24
 8003974:	d501      	bpl.n	800397a <_printf_i+0xc2>
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	e002      	b.n	8003980 <_printf_i+0xc8>
 800397a:	0668      	lsls	r0, r5, #25
 800397c:	d5fb      	bpl.n	8003976 <_printf_i+0xbe>
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	296f      	cmp	r1, #111	; 0x6f
 8003982:	bf14      	ite	ne
 8003984:	220a      	movne	r2, #10
 8003986:	2208      	moveq	r2, #8
 8003988:	4852      	ldr	r0, [pc, #328]	; (8003ad4 <_printf_i+0x21c>)
 800398a:	2100      	movs	r1, #0
 800398c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003990:	6865      	ldr	r5, [r4, #4]
 8003992:	2d00      	cmp	r5, #0
 8003994:	60a5      	str	r5, [r4, #8]
 8003996:	f2c0 8095 	blt.w	8003ac4 <_printf_i+0x20c>
 800399a:	6821      	ldr	r1, [r4, #0]
 800399c:	f021 0104 	bic.w	r1, r1, #4
 80039a0:	6021      	str	r1, [r4, #0]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d13d      	bne.n	8003a22 <_printf_i+0x16a>
 80039a6:	2d00      	cmp	r5, #0
 80039a8:	f040 808e 	bne.w	8003ac8 <_printf_i+0x210>
 80039ac:	4665      	mov	r5, ip
 80039ae:	2a08      	cmp	r2, #8
 80039b0:	d10b      	bne.n	80039ca <_printf_i+0x112>
 80039b2:	6823      	ldr	r3, [r4, #0]
 80039b4:	07db      	lsls	r3, r3, #31
 80039b6:	d508      	bpl.n	80039ca <_printf_i+0x112>
 80039b8:	6923      	ldr	r3, [r4, #16]
 80039ba:	6862      	ldr	r2, [r4, #4]
 80039bc:	429a      	cmp	r2, r3
 80039be:	bfde      	ittt	le
 80039c0:	2330      	movle	r3, #48	; 0x30
 80039c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039ca:	ebac 0305 	sub.w	r3, ip, r5
 80039ce:	6123      	str	r3, [r4, #16]
 80039d0:	f8cd 8000 	str.w	r8, [sp]
 80039d4:	463b      	mov	r3, r7
 80039d6:	aa03      	add	r2, sp, #12
 80039d8:	4621      	mov	r1, r4
 80039da:	4630      	mov	r0, r6
 80039dc:	f7ff fef6 	bl	80037cc <_printf_common>
 80039e0:	3001      	adds	r0, #1
 80039e2:	d14d      	bne.n	8003a80 <_printf_i+0x1c8>
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	b005      	add	sp, #20
 80039ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039ee:	4839      	ldr	r0, [pc, #228]	; (8003ad4 <_printf_i+0x21c>)
 80039f0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80039f4:	6813      	ldr	r3, [r2, #0]
 80039f6:	6821      	ldr	r1, [r4, #0]
 80039f8:	1d1d      	adds	r5, r3, #4
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6015      	str	r5, [r2, #0]
 80039fe:	060a      	lsls	r2, r1, #24
 8003a00:	d50b      	bpl.n	8003a1a <_printf_i+0x162>
 8003a02:	07ca      	lsls	r2, r1, #31
 8003a04:	bf44      	itt	mi
 8003a06:	f041 0120 	orrmi.w	r1, r1, #32
 8003a0a:	6021      	strmi	r1, [r4, #0]
 8003a0c:	b91b      	cbnz	r3, 8003a16 <_printf_i+0x15e>
 8003a0e:	6822      	ldr	r2, [r4, #0]
 8003a10:	f022 0220 	bic.w	r2, r2, #32
 8003a14:	6022      	str	r2, [r4, #0]
 8003a16:	2210      	movs	r2, #16
 8003a18:	e7b7      	b.n	800398a <_printf_i+0xd2>
 8003a1a:	064d      	lsls	r5, r1, #25
 8003a1c:	bf48      	it	mi
 8003a1e:	b29b      	uxthmi	r3, r3
 8003a20:	e7ef      	b.n	8003a02 <_printf_i+0x14a>
 8003a22:	4665      	mov	r5, ip
 8003a24:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a28:	fb02 3311 	mls	r3, r2, r1, r3
 8003a2c:	5cc3      	ldrb	r3, [r0, r3]
 8003a2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a32:	460b      	mov	r3, r1
 8003a34:	2900      	cmp	r1, #0
 8003a36:	d1f5      	bne.n	8003a24 <_printf_i+0x16c>
 8003a38:	e7b9      	b.n	80039ae <_printf_i+0xf6>
 8003a3a:	6813      	ldr	r3, [r2, #0]
 8003a3c:	6825      	ldr	r5, [r4, #0]
 8003a3e:	1d18      	adds	r0, r3, #4
 8003a40:	6961      	ldr	r1, [r4, #20]
 8003a42:	6010      	str	r0, [r2, #0]
 8003a44:	0628      	lsls	r0, r5, #24
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	d501      	bpl.n	8003a4e <_printf_i+0x196>
 8003a4a:	6019      	str	r1, [r3, #0]
 8003a4c:	e002      	b.n	8003a54 <_printf_i+0x19c>
 8003a4e:	066a      	lsls	r2, r5, #25
 8003a50:	d5fb      	bpl.n	8003a4a <_printf_i+0x192>
 8003a52:	8019      	strh	r1, [r3, #0]
 8003a54:	2300      	movs	r3, #0
 8003a56:	4665      	mov	r5, ip
 8003a58:	6123      	str	r3, [r4, #16]
 8003a5a:	e7b9      	b.n	80039d0 <_printf_i+0x118>
 8003a5c:	6813      	ldr	r3, [r2, #0]
 8003a5e:	1d19      	adds	r1, r3, #4
 8003a60:	6011      	str	r1, [r2, #0]
 8003a62:	681d      	ldr	r5, [r3, #0]
 8003a64:	6862      	ldr	r2, [r4, #4]
 8003a66:	2100      	movs	r1, #0
 8003a68:	4628      	mov	r0, r5
 8003a6a:	f000 faa1 	bl	8003fb0 <memchr>
 8003a6e:	b108      	cbz	r0, 8003a74 <_printf_i+0x1bc>
 8003a70:	1b40      	subs	r0, r0, r5
 8003a72:	6060      	str	r0, [r4, #4]
 8003a74:	6863      	ldr	r3, [r4, #4]
 8003a76:	6123      	str	r3, [r4, #16]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a7e:	e7a7      	b.n	80039d0 <_printf_i+0x118>
 8003a80:	6923      	ldr	r3, [r4, #16]
 8003a82:	462a      	mov	r2, r5
 8003a84:	4639      	mov	r1, r7
 8003a86:	4630      	mov	r0, r6
 8003a88:	47c0      	blx	r8
 8003a8a:	3001      	adds	r0, #1
 8003a8c:	d0aa      	beq.n	80039e4 <_printf_i+0x12c>
 8003a8e:	6823      	ldr	r3, [r4, #0]
 8003a90:	079b      	lsls	r3, r3, #30
 8003a92:	d413      	bmi.n	8003abc <_printf_i+0x204>
 8003a94:	68e0      	ldr	r0, [r4, #12]
 8003a96:	9b03      	ldr	r3, [sp, #12]
 8003a98:	4298      	cmp	r0, r3
 8003a9a:	bfb8      	it	lt
 8003a9c:	4618      	movlt	r0, r3
 8003a9e:	e7a3      	b.n	80039e8 <_printf_i+0x130>
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	464a      	mov	r2, r9
 8003aa4:	4639      	mov	r1, r7
 8003aa6:	4630      	mov	r0, r6
 8003aa8:	47c0      	blx	r8
 8003aaa:	3001      	adds	r0, #1
 8003aac:	d09a      	beq.n	80039e4 <_printf_i+0x12c>
 8003aae:	3501      	adds	r5, #1
 8003ab0:	68e3      	ldr	r3, [r4, #12]
 8003ab2:	9a03      	ldr	r2, [sp, #12]
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	42ab      	cmp	r3, r5
 8003ab8:	dcf2      	bgt.n	8003aa0 <_printf_i+0x1e8>
 8003aba:	e7eb      	b.n	8003a94 <_printf_i+0x1dc>
 8003abc:	2500      	movs	r5, #0
 8003abe:	f104 0919 	add.w	r9, r4, #25
 8003ac2:	e7f5      	b.n	8003ab0 <_printf_i+0x1f8>
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d1ac      	bne.n	8003a22 <_printf_i+0x16a>
 8003ac8:	7803      	ldrb	r3, [r0, #0]
 8003aca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ace:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ad2:	e76c      	b.n	80039ae <_printf_i+0xf6>
 8003ad4:	080043d3 	.word	0x080043d3
 8003ad8:	080043e4 	.word	0x080043e4

08003adc <_sbrk_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	2300      	movs	r3, #0
 8003ae0:	4c05      	ldr	r4, [pc, #20]	; (8003af8 <_sbrk_r+0x1c>)
 8003ae2:	4605      	mov	r5, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	6023      	str	r3, [r4, #0]
 8003ae8:	f7fd fcca 	bl	8001480 <_sbrk>
 8003aec:	1c43      	adds	r3, r0, #1
 8003aee:	d102      	bne.n	8003af6 <_sbrk_r+0x1a>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	b103      	cbz	r3, 8003af6 <_sbrk_r+0x1a>
 8003af4:	602b      	str	r3, [r5, #0]
 8003af6:	bd38      	pop	{r3, r4, r5, pc}
 8003af8:	20000eb8 	.word	0x20000eb8

08003afc <__sread>:
 8003afc:	b510      	push	{r4, lr}
 8003afe:	460c      	mov	r4, r1
 8003b00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b04:	f000 faf0 	bl	80040e8 <_read_r>
 8003b08:	2800      	cmp	r0, #0
 8003b0a:	bfab      	itete	ge
 8003b0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003b0e:	89a3      	ldrhlt	r3, [r4, #12]
 8003b10:	181b      	addge	r3, r3, r0
 8003b12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003b16:	bfac      	ite	ge
 8003b18:	6563      	strge	r3, [r4, #84]	; 0x54
 8003b1a:	81a3      	strhlt	r3, [r4, #12]
 8003b1c:	bd10      	pop	{r4, pc}

08003b1e <__swrite>:
 8003b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b22:	461f      	mov	r7, r3
 8003b24:	898b      	ldrh	r3, [r1, #12]
 8003b26:	4605      	mov	r5, r0
 8003b28:	05db      	lsls	r3, r3, #23
 8003b2a:	460c      	mov	r4, r1
 8003b2c:	4616      	mov	r6, r2
 8003b2e:	d505      	bpl.n	8003b3c <__swrite+0x1e>
 8003b30:	2302      	movs	r3, #2
 8003b32:	2200      	movs	r2, #0
 8003b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b38:	f000 f9c4 	bl	8003ec4 <_lseek_r>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	4632      	mov	r2, r6
 8003b40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003b44:	81a3      	strh	r3, [r4, #12]
 8003b46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b4a:	463b      	mov	r3, r7
 8003b4c:	4628      	mov	r0, r5
 8003b4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b52:	f000 b877 	b.w	8003c44 <_write_r>

08003b56 <__sseek>:
 8003b56:	b510      	push	{r4, lr}
 8003b58:	460c      	mov	r4, r1
 8003b5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b5e:	f000 f9b1 	bl	8003ec4 <_lseek_r>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	89a3      	ldrh	r3, [r4, #12]
 8003b66:	bf15      	itete	ne
 8003b68:	6560      	strne	r0, [r4, #84]	; 0x54
 8003b6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003b6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003b72:	81a3      	strheq	r3, [r4, #12]
 8003b74:	bf18      	it	ne
 8003b76:	81a3      	strhne	r3, [r4, #12]
 8003b78:	bd10      	pop	{r4, pc}

08003b7a <__sclose>:
 8003b7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b7e:	f000 b8e1 	b.w	8003d44 <_close_r>
	...

08003b84 <__swbuf_r>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	460e      	mov	r6, r1
 8003b88:	4614      	mov	r4, r2
 8003b8a:	4605      	mov	r5, r0
 8003b8c:	b118      	cbz	r0, 8003b96 <__swbuf_r+0x12>
 8003b8e:	6983      	ldr	r3, [r0, #24]
 8003b90:	b90b      	cbnz	r3, 8003b96 <__swbuf_r+0x12>
 8003b92:	f7ff fa91 	bl	80030b8 <__sinit>
 8003b96:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <__swbuf_r+0x98>)
 8003b98:	429c      	cmp	r4, r3
 8003b9a:	d12a      	bne.n	8003bf2 <__swbuf_r+0x6e>
 8003b9c:	686c      	ldr	r4, [r5, #4]
 8003b9e:	69a3      	ldr	r3, [r4, #24]
 8003ba0:	60a3      	str	r3, [r4, #8]
 8003ba2:	89a3      	ldrh	r3, [r4, #12]
 8003ba4:	071a      	lsls	r2, r3, #28
 8003ba6:	d52e      	bpl.n	8003c06 <__swbuf_r+0x82>
 8003ba8:	6923      	ldr	r3, [r4, #16]
 8003baa:	b363      	cbz	r3, 8003c06 <__swbuf_r+0x82>
 8003bac:	6923      	ldr	r3, [r4, #16]
 8003bae:	6820      	ldr	r0, [r4, #0]
 8003bb0:	b2f6      	uxtb	r6, r6
 8003bb2:	1ac0      	subs	r0, r0, r3
 8003bb4:	6963      	ldr	r3, [r4, #20]
 8003bb6:	4637      	mov	r7, r6
 8003bb8:	4283      	cmp	r3, r0
 8003bba:	dc04      	bgt.n	8003bc6 <__swbuf_r+0x42>
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	4628      	mov	r0, r5
 8003bc0:	f000 f956 	bl	8003e70 <_fflush_r>
 8003bc4:	bb28      	cbnz	r0, 8003c12 <__swbuf_r+0x8e>
 8003bc6:	68a3      	ldr	r3, [r4, #8]
 8003bc8:	3001      	adds	r0, #1
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	60a3      	str	r3, [r4, #8]
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	6022      	str	r2, [r4, #0]
 8003bd4:	701e      	strb	r6, [r3, #0]
 8003bd6:	6963      	ldr	r3, [r4, #20]
 8003bd8:	4283      	cmp	r3, r0
 8003bda:	d004      	beq.n	8003be6 <__swbuf_r+0x62>
 8003bdc:	89a3      	ldrh	r3, [r4, #12]
 8003bde:	07db      	lsls	r3, r3, #31
 8003be0:	d519      	bpl.n	8003c16 <__swbuf_r+0x92>
 8003be2:	2e0a      	cmp	r6, #10
 8003be4:	d117      	bne.n	8003c16 <__swbuf_r+0x92>
 8003be6:	4621      	mov	r1, r4
 8003be8:	4628      	mov	r0, r5
 8003bea:	f000 f941 	bl	8003e70 <_fflush_r>
 8003bee:	b190      	cbz	r0, 8003c16 <__swbuf_r+0x92>
 8003bf0:	e00f      	b.n	8003c12 <__swbuf_r+0x8e>
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <__swbuf_r+0x9c>)
 8003bf4:	429c      	cmp	r4, r3
 8003bf6:	d101      	bne.n	8003bfc <__swbuf_r+0x78>
 8003bf8:	68ac      	ldr	r4, [r5, #8]
 8003bfa:	e7d0      	b.n	8003b9e <__swbuf_r+0x1a>
 8003bfc:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <__swbuf_r+0xa0>)
 8003bfe:	429c      	cmp	r4, r3
 8003c00:	bf08      	it	eq
 8003c02:	68ec      	ldreq	r4, [r5, #12]
 8003c04:	e7cb      	b.n	8003b9e <__swbuf_r+0x1a>
 8003c06:	4621      	mov	r1, r4
 8003c08:	4628      	mov	r0, r5
 8003c0a:	f000 f82d 	bl	8003c68 <__swsetup_r>
 8003c0e:	2800      	cmp	r0, #0
 8003c10:	d0cc      	beq.n	8003bac <__swbuf_r+0x28>
 8003c12:	f04f 37ff 	mov.w	r7, #4294967295
 8003c16:	4638      	mov	r0, r7
 8003c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	08004378 	.word	0x08004378
 8003c20:	08004398 	.word	0x08004398
 8003c24:	08004358 	.word	0x08004358

08003c28 <__ascii_wctomb>:
 8003c28:	b149      	cbz	r1, 8003c3e <__ascii_wctomb+0x16>
 8003c2a:	2aff      	cmp	r2, #255	; 0xff
 8003c2c:	bf8b      	itete	hi
 8003c2e:	238a      	movhi	r3, #138	; 0x8a
 8003c30:	700a      	strbls	r2, [r1, #0]
 8003c32:	6003      	strhi	r3, [r0, #0]
 8003c34:	2001      	movls	r0, #1
 8003c36:	bf88      	it	hi
 8003c38:	f04f 30ff 	movhi.w	r0, #4294967295
 8003c3c:	4770      	bx	lr
 8003c3e:	4608      	mov	r0, r1
 8003c40:	4770      	bx	lr
	...

08003c44 <_write_r>:
 8003c44:	b538      	push	{r3, r4, r5, lr}
 8003c46:	4605      	mov	r5, r0
 8003c48:	4608      	mov	r0, r1
 8003c4a:	4611      	mov	r1, r2
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	4c05      	ldr	r4, [pc, #20]	; (8003c64 <_write_r+0x20>)
 8003c50:	6022      	str	r2, [r4, #0]
 8003c52:	461a      	mov	r2, r3
 8003c54:	f7fd fbc7 	bl	80013e6 <_write>
 8003c58:	1c43      	adds	r3, r0, #1
 8003c5a:	d102      	bne.n	8003c62 <_write_r+0x1e>
 8003c5c:	6823      	ldr	r3, [r4, #0]
 8003c5e:	b103      	cbz	r3, 8003c62 <_write_r+0x1e>
 8003c60:	602b      	str	r3, [r5, #0]
 8003c62:	bd38      	pop	{r3, r4, r5, pc}
 8003c64:	20000eb8 	.word	0x20000eb8

08003c68 <__swsetup_r>:
 8003c68:	4b32      	ldr	r3, [pc, #200]	; (8003d34 <__swsetup_r+0xcc>)
 8003c6a:	b570      	push	{r4, r5, r6, lr}
 8003c6c:	681d      	ldr	r5, [r3, #0]
 8003c6e:	4606      	mov	r6, r0
 8003c70:	460c      	mov	r4, r1
 8003c72:	b125      	cbz	r5, 8003c7e <__swsetup_r+0x16>
 8003c74:	69ab      	ldr	r3, [r5, #24]
 8003c76:	b913      	cbnz	r3, 8003c7e <__swsetup_r+0x16>
 8003c78:	4628      	mov	r0, r5
 8003c7a:	f7ff fa1d 	bl	80030b8 <__sinit>
 8003c7e:	4b2e      	ldr	r3, [pc, #184]	; (8003d38 <__swsetup_r+0xd0>)
 8003c80:	429c      	cmp	r4, r3
 8003c82:	d10f      	bne.n	8003ca4 <__swsetup_r+0x3c>
 8003c84:	686c      	ldr	r4, [r5, #4]
 8003c86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	0715      	lsls	r5, r2, #28
 8003c8e:	d42c      	bmi.n	8003cea <__swsetup_r+0x82>
 8003c90:	06d0      	lsls	r0, r2, #27
 8003c92:	d411      	bmi.n	8003cb8 <__swsetup_r+0x50>
 8003c94:	2209      	movs	r2, #9
 8003c96:	6032      	str	r2, [r6, #0]
 8003c98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c9c:	81a3      	strh	r3, [r4, #12]
 8003c9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca2:	e03e      	b.n	8003d22 <__swsetup_r+0xba>
 8003ca4:	4b25      	ldr	r3, [pc, #148]	; (8003d3c <__swsetup_r+0xd4>)
 8003ca6:	429c      	cmp	r4, r3
 8003ca8:	d101      	bne.n	8003cae <__swsetup_r+0x46>
 8003caa:	68ac      	ldr	r4, [r5, #8]
 8003cac:	e7eb      	b.n	8003c86 <__swsetup_r+0x1e>
 8003cae:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <__swsetup_r+0xd8>)
 8003cb0:	429c      	cmp	r4, r3
 8003cb2:	bf08      	it	eq
 8003cb4:	68ec      	ldreq	r4, [r5, #12]
 8003cb6:	e7e6      	b.n	8003c86 <__swsetup_r+0x1e>
 8003cb8:	0751      	lsls	r1, r2, #29
 8003cba:	d512      	bpl.n	8003ce2 <__swsetup_r+0x7a>
 8003cbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003cbe:	b141      	cbz	r1, 8003cd2 <__swsetup_r+0x6a>
 8003cc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cc4:	4299      	cmp	r1, r3
 8003cc6:	d002      	beq.n	8003cce <__swsetup_r+0x66>
 8003cc8:	4630      	mov	r0, r6
 8003cca:	f000 f99b 	bl	8004004 <_free_r>
 8003cce:	2300      	movs	r3, #0
 8003cd0:	6363      	str	r3, [r4, #52]	; 0x34
 8003cd2:	89a3      	ldrh	r3, [r4, #12]
 8003cd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003cd8:	81a3      	strh	r3, [r4, #12]
 8003cda:	2300      	movs	r3, #0
 8003cdc:	6063      	str	r3, [r4, #4]
 8003cde:	6923      	ldr	r3, [r4, #16]
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	89a3      	ldrh	r3, [r4, #12]
 8003ce4:	f043 0308 	orr.w	r3, r3, #8
 8003ce8:	81a3      	strh	r3, [r4, #12]
 8003cea:	6923      	ldr	r3, [r4, #16]
 8003cec:	b94b      	cbnz	r3, 8003d02 <__swsetup_r+0x9a>
 8003cee:	89a3      	ldrh	r3, [r4, #12]
 8003cf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003cf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cf8:	d003      	beq.n	8003d02 <__swsetup_r+0x9a>
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f000 f917 	bl	8003f30 <__smakebuf_r>
 8003d02:	89a2      	ldrh	r2, [r4, #12]
 8003d04:	f012 0301 	ands.w	r3, r2, #1
 8003d08:	d00c      	beq.n	8003d24 <__swsetup_r+0xbc>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	60a3      	str	r3, [r4, #8]
 8003d0e:	6963      	ldr	r3, [r4, #20]
 8003d10:	425b      	negs	r3, r3
 8003d12:	61a3      	str	r3, [r4, #24]
 8003d14:	6923      	ldr	r3, [r4, #16]
 8003d16:	b953      	cbnz	r3, 8003d2e <__swsetup_r+0xc6>
 8003d18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d1c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003d20:	d1ba      	bne.n	8003c98 <__swsetup_r+0x30>
 8003d22:	bd70      	pop	{r4, r5, r6, pc}
 8003d24:	0792      	lsls	r2, r2, #30
 8003d26:	bf58      	it	pl
 8003d28:	6963      	ldrpl	r3, [r4, #20]
 8003d2a:	60a3      	str	r3, [r4, #8]
 8003d2c:	e7f2      	b.n	8003d14 <__swsetup_r+0xac>
 8003d2e:	2000      	movs	r0, #0
 8003d30:	e7f7      	b.n	8003d22 <__swsetup_r+0xba>
 8003d32:	bf00      	nop
 8003d34:	2000000c 	.word	0x2000000c
 8003d38:	08004378 	.word	0x08004378
 8003d3c:	08004398 	.word	0x08004398
 8003d40:	08004358 	.word	0x08004358

08003d44 <_close_r>:
 8003d44:	b538      	push	{r3, r4, r5, lr}
 8003d46:	2300      	movs	r3, #0
 8003d48:	4c05      	ldr	r4, [pc, #20]	; (8003d60 <_close_r+0x1c>)
 8003d4a:	4605      	mov	r5, r0
 8003d4c:	4608      	mov	r0, r1
 8003d4e:	6023      	str	r3, [r4, #0]
 8003d50:	f7fd fb65 	bl	800141e <_close>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d102      	bne.n	8003d5e <_close_r+0x1a>
 8003d58:	6823      	ldr	r3, [r4, #0]
 8003d5a:	b103      	cbz	r3, 8003d5e <_close_r+0x1a>
 8003d5c:	602b      	str	r3, [r5, #0]
 8003d5e:	bd38      	pop	{r3, r4, r5, pc}
 8003d60:	20000eb8 	.word	0x20000eb8

08003d64 <__sflush_r>:
 8003d64:	898a      	ldrh	r2, [r1, #12]
 8003d66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	0710      	lsls	r0, r2, #28
 8003d6e:	460c      	mov	r4, r1
 8003d70:	d458      	bmi.n	8003e24 <__sflush_r+0xc0>
 8003d72:	684b      	ldr	r3, [r1, #4]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	dc05      	bgt.n	8003d84 <__sflush_r+0x20>
 8003d78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	dc02      	bgt.n	8003d84 <__sflush_r+0x20>
 8003d7e:	2000      	movs	r0, #0
 8003d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003d86:	2e00      	cmp	r6, #0
 8003d88:	d0f9      	beq.n	8003d7e <__sflush_r+0x1a>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003d90:	682f      	ldr	r7, [r5, #0]
 8003d92:	6a21      	ldr	r1, [r4, #32]
 8003d94:	602b      	str	r3, [r5, #0]
 8003d96:	d032      	beq.n	8003dfe <__sflush_r+0x9a>
 8003d98:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	075a      	lsls	r2, r3, #29
 8003d9e:	d505      	bpl.n	8003dac <__sflush_r+0x48>
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	1ac0      	subs	r0, r0, r3
 8003da4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003da6:	b10b      	cbz	r3, 8003dac <__sflush_r+0x48>
 8003da8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003daa:	1ac0      	subs	r0, r0, r3
 8003dac:	2300      	movs	r3, #0
 8003dae:	4602      	mov	r2, r0
 8003db0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003db2:	6a21      	ldr	r1, [r4, #32]
 8003db4:	4628      	mov	r0, r5
 8003db6:	47b0      	blx	r6
 8003db8:	1c43      	adds	r3, r0, #1
 8003dba:	89a3      	ldrh	r3, [r4, #12]
 8003dbc:	d106      	bne.n	8003dcc <__sflush_r+0x68>
 8003dbe:	6829      	ldr	r1, [r5, #0]
 8003dc0:	291d      	cmp	r1, #29
 8003dc2:	d848      	bhi.n	8003e56 <__sflush_r+0xf2>
 8003dc4:	4a29      	ldr	r2, [pc, #164]	; (8003e6c <__sflush_r+0x108>)
 8003dc6:	40ca      	lsrs	r2, r1
 8003dc8:	07d6      	lsls	r6, r2, #31
 8003dca:	d544      	bpl.n	8003e56 <__sflush_r+0xf2>
 8003dcc:	2200      	movs	r2, #0
 8003dce:	6062      	str	r2, [r4, #4]
 8003dd0:	6922      	ldr	r2, [r4, #16]
 8003dd2:	04d9      	lsls	r1, r3, #19
 8003dd4:	6022      	str	r2, [r4, #0]
 8003dd6:	d504      	bpl.n	8003de2 <__sflush_r+0x7e>
 8003dd8:	1c42      	adds	r2, r0, #1
 8003dda:	d101      	bne.n	8003de0 <__sflush_r+0x7c>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	b903      	cbnz	r3, 8003de2 <__sflush_r+0x7e>
 8003de0:	6560      	str	r0, [r4, #84]	; 0x54
 8003de2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003de4:	602f      	str	r7, [r5, #0]
 8003de6:	2900      	cmp	r1, #0
 8003de8:	d0c9      	beq.n	8003d7e <__sflush_r+0x1a>
 8003dea:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003dee:	4299      	cmp	r1, r3
 8003df0:	d002      	beq.n	8003df8 <__sflush_r+0x94>
 8003df2:	4628      	mov	r0, r5
 8003df4:	f000 f906 	bl	8004004 <_free_r>
 8003df8:	2000      	movs	r0, #0
 8003dfa:	6360      	str	r0, [r4, #52]	; 0x34
 8003dfc:	e7c0      	b.n	8003d80 <__sflush_r+0x1c>
 8003dfe:	2301      	movs	r3, #1
 8003e00:	4628      	mov	r0, r5
 8003e02:	47b0      	blx	r6
 8003e04:	1c41      	adds	r1, r0, #1
 8003e06:	d1c8      	bne.n	8003d9a <__sflush_r+0x36>
 8003e08:	682b      	ldr	r3, [r5, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d0c5      	beq.n	8003d9a <__sflush_r+0x36>
 8003e0e:	2b1d      	cmp	r3, #29
 8003e10:	d001      	beq.n	8003e16 <__sflush_r+0xb2>
 8003e12:	2b16      	cmp	r3, #22
 8003e14:	d101      	bne.n	8003e1a <__sflush_r+0xb6>
 8003e16:	602f      	str	r7, [r5, #0]
 8003e18:	e7b1      	b.n	8003d7e <__sflush_r+0x1a>
 8003e1a:	89a3      	ldrh	r3, [r4, #12]
 8003e1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e20:	81a3      	strh	r3, [r4, #12]
 8003e22:	e7ad      	b.n	8003d80 <__sflush_r+0x1c>
 8003e24:	690f      	ldr	r7, [r1, #16]
 8003e26:	2f00      	cmp	r7, #0
 8003e28:	d0a9      	beq.n	8003d7e <__sflush_r+0x1a>
 8003e2a:	0793      	lsls	r3, r2, #30
 8003e2c:	bf18      	it	ne
 8003e2e:	2300      	movne	r3, #0
 8003e30:	680e      	ldr	r6, [r1, #0]
 8003e32:	bf08      	it	eq
 8003e34:	694b      	ldreq	r3, [r1, #20]
 8003e36:	eba6 0807 	sub.w	r8, r6, r7
 8003e3a:	600f      	str	r7, [r1, #0]
 8003e3c:	608b      	str	r3, [r1, #8]
 8003e3e:	f1b8 0f00 	cmp.w	r8, #0
 8003e42:	dd9c      	ble.n	8003d7e <__sflush_r+0x1a>
 8003e44:	4643      	mov	r3, r8
 8003e46:	463a      	mov	r2, r7
 8003e48:	6a21      	ldr	r1, [r4, #32]
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e4e:	47b0      	blx	r6
 8003e50:	2800      	cmp	r0, #0
 8003e52:	dc06      	bgt.n	8003e62 <__sflush_r+0xfe>
 8003e54:	89a3      	ldrh	r3, [r4, #12]
 8003e56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003e5a:	81a3      	strh	r3, [r4, #12]
 8003e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e60:	e78e      	b.n	8003d80 <__sflush_r+0x1c>
 8003e62:	4407      	add	r7, r0
 8003e64:	eba8 0800 	sub.w	r8, r8, r0
 8003e68:	e7e9      	b.n	8003e3e <__sflush_r+0xda>
 8003e6a:	bf00      	nop
 8003e6c:	20400001 	.word	0x20400001

08003e70 <_fflush_r>:
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	690b      	ldr	r3, [r1, #16]
 8003e74:	4605      	mov	r5, r0
 8003e76:	460c      	mov	r4, r1
 8003e78:	b1db      	cbz	r3, 8003eb2 <_fflush_r+0x42>
 8003e7a:	b118      	cbz	r0, 8003e84 <_fflush_r+0x14>
 8003e7c:	6983      	ldr	r3, [r0, #24]
 8003e7e:	b90b      	cbnz	r3, 8003e84 <_fflush_r+0x14>
 8003e80:	f7ff f91a 	bl	80030b8 <__sinit>
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <_fflush_r+0x48>)
 8003e86:	429c      	cmp	r4, r3
 8003e88:	d109      	bne.n	8003e9e <_fflush_r+0x2e>
 8003e8a:	686c      	ldr	r4, [r5, #4]
 8003e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e90:	b17b      	cbz	r3, 8003eb2 <_fflush_r+0x42>
 8003e92:	4621      	mov	r1, r4
 8003e94:	4628      	mov	r0, r5
 8003e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e9a:	f7ff bf63 	b.w	8003d64 <__sflush_r>
 8003e9e:	4b07      	ldr	r3, [pc, #28]	; (8003ebc <_fflush_r+0x4c>)
 8003ea0:	429c      	cmp	r4, r3
 8003ea2:	d101      	bne.n	8003ea8 <_fflush_r+0x38>
 8003ea4:	68ac      	ldr	r4, [r5, #8]
 8003ea6:	e7f1      	b.n	8003e8c <_fflush_r+0x1c>
 8003ea8:	4b05      	ldr	r3, [pc, #20]	; (8003ec0 <_fflush_r+0x50>)
 8003eaa:	429c      	cmp	r4, r3
 8003eac:	bf08      	it	eq
 8003eae:	68ec      	ldreq	r4, [r5, #12]
 8003eb0:	e7ec      	b.n	8003e8c <_fflush_r+0x1c>
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	bd38      	pop	{r3, r4, r5, pc}
 8003eb6:	bf00      	nop
 8003eb8:	08004378 	.word	0x08004378
 8003ebc:	08004398 	.word	0x08004398
 8003ec0:	08004358 	.word	0x08004358

08003ec4 <_lseek_r>:
 8003ec4:	b538      	push	{r3, r4, r5, lr}
 8003ec6:	4605      	mov	r5, r0
 8003ec8:	4608      	mov	r0, r1
 8003eca:	4611      	mov	r1, r2
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4c05      	ldr	r4, [pc, #20]	; (8003ee4 <_lseek_r+0x20>)
 8003ed0:	6022      	str	r2, [r4, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	f7fd fac7 	bl	8001466 <_lseek>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_lseek_r+0x1e>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_lseek_r+0x1e>
 8003ee0:	602b      	str	r3, [r5, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	20000eb8 	.word	0x20000eb8

08003ee8 <__swhatbuf_r>:
 8003ee8:	b570      	push	{r4, r5, r6, lr}
 8003eea:	460e      	mov	r6, r1
 8003eec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ef0:	b096      	sub	sp, #88	; 0x58
 8003ef2:	2900      	cmp	r1, #0
 8003ef4:	4614      	mov	r4, r2
 8003ef6:	461d      	mov	r5, r3
 8003ef8:	da07      	bge.n	8003f0a <__swhatbuf_r+0x22>
 8003efa:	2300      	movs	r3, #0
 8003efc:	602b      	str	r3, [r5, #0]
 8003efe:	89b3      	ldrh	r3, [r6, #12]
 8003f00:	061a      	lsls	r2, r3, #24
 8003f02:	d410      	bmi.n	8003f26 <__swhatbuf_r+0x3e>
 8003f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f08:	e00e      	b.n	8003f28 <__swhatbuf_r+0x40>
 8003f0a:	466a      	mov	r2, sp
 8003f0c:	f000 f8fe 	bl	800410c <_fstat_r>
 8003f10:	2800      	cmp	r0, #0
 8003f12:	dbf2      	blt.n	8003efa <__swhatbuf_r+0x12>
 8003f14:	9a01      	ldr	r2, [sp, #4]
 8003f16:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f1a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f1e:	425a      	negs	r2, r3
 8003f20:	415a      	adcs	r2, r3
 8003f22:	602a      	str	r2, [r5, #0]
 8003f24:	e7ee      	b.n	8003f04 <__swhatbuf_r+0x1c>
 8003f26:	2340      	movs	r3, #64	; 0x40
 8003f28:	2000      	movs	r0, #0
 8003f2a:	6023      	str	r3, [r4, #0]
 8003f2c:	b016      	add	sp, #88	; 0x58
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}

08003f30 <__smakebuf_r>:
 8003f30:	898b      	ldrh	r3, [r1, #12]
 8003f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f34:	079d      	lsls	r5, r3, #30
 8003f36:	4606      	mov	r6, r0
 8003f38:	460c      	mov	r4, r1
 8003f3a:	d507      	bpl.n	8003f4c <__smakebuf_r+0x1c>
 8003f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f40:	6023      	str	r3, [r4, #0]
 8003f42:	6123      	str	r3, [r4, #16]
 8003f44:	2301      	movs	r3, #1
 8003f46:	6163      	str	r3, [r4, #20]
 8003f48:	b002      	add	sp, #8
 8003f4a:	bd70      	pop	{r4, r5, r6, pc}
 8003f4c:	ab01      	add	r3, sp, #4
 8003f4e:	466a      	mov	r2, sp
 8003f50:	f7ff ffca 	bl	8003ee8 <__swhatbuf_r>
 8003f54:	9900      	ldr	r1, [sp, #0]
 8003f56:	4605      	mov	r5, r0
 8003f58:	4630      	mov	r0, r6
 8003f5a:	f7ff f94d 	bl	80031f8 <_malloc_r>
 8003f5e:	b948      	cbnz	r0, 8003f74 <__smakebuf_r+0x44>
 8003f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f64:	059a      	lsls	r2, r3, #22
 8003f66:	d4ef      	bmi.n	8003f48 <__smakebuf_r+0x18>
 8003f68:	f023 0303 	bic.w	r3, r3, #3
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	e7e3      	b.n	8003f3c <__smakebuf_r+0xc>
 8003f74:	4b0d      	ldr	r3, [pc, #52]	; (8003fac <__smakebuf_r+0x7c>)
 8003f76:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f78:	89a3      	ldrh	r3, [r4, #12]
 8003f7a:	6020      	str	r0, [r4, #0]
 8003f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f80:	81a3      	strh	r3, [r4, #12]
 8003f82:	9b00      	ldr	r3, [sp, #0]
 8003f84:	6120      	str	r0, [r4, #16]
 8003f86:	6163      	str	r3, [r4, #20]
 8003f88:	9b01      	ldr	r3, [sp, #4]
 8003f8a:	b15b      	cbz	r3, 8003fa4 <__smakebuf_r+0x74>
 8003f8c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f90:	4630      	mov	r0, r6
 8003f92:	f000 f8cd 	bl	8004130 <_isatty_r>
 8003f96:	b128      	cbz	r0, 8003fa4 <__smakebuf_r+0x74>
 8003f98:	89a3      	ldrh	r3, [r4, #12]
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	81a3      	strh	r3, [r4, #12]
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	431d      	orrs	r5, r3
 8003fa8:	81a5      	strh	r5, [r4, #12]
 8003faa:	e7cd      	b.n	8003f48 <__smakebuf_r+0x18>
 8003fac:	08003081 	.word	0x08003081

08003fb0 <memchr>:
 8003fb0:	b510      	push	{r4, lr}
 8003fb2:	b2c9      	uxtb	r1, r1
 8003fb4:	4402      	add	r2, r0
 8003fb6:	4290      	cmp	r0, r2
 8003fb8:	4603      	mov	r3, r0
 8003fba:	d101      	bne.n	8003fc0 <memchr+0x10>
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	e003      	b.n	8003fc8 <memchr+0x18>
 8003fc0:	781c      	ldrb	r4, [r3, #0]
 8003fc2:	3001      	adds	r0, #1
 8003fc4:	428c      	cmp	r4, r1
 8003fc6:	d1f6      	bne.n	8003fb6 <memchr+0x6>
 8003fc8:	4618      	mov	r0, r3
 8003fca:	bd10      	pop	{r4, pc}

08003fcc <memmove>:
 8003fcc:	4288      	cmp	r0, r1
 8003fce:	b510      	push	{r4, lr}
 8003fd0:	eb01 0302 	add.w	r3, r1, r2
 8003fd4:	d807      	bhi.n	8003fe6 <memmove+0x1a>
 8003fd6:	1e42      	subs	r2, r0, #1
 8003fd8:	4299      	cmp	r1, r3
 8003fda:	d00a      	beq.n	8003ff2 <memmove+0x26>
 8003fdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003fe0:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003fe4:	e7f8      	b.n	8003fd8 <memmove+0xc>
 8003fe6:	4283      	cmp	r3, r0
 8003fe8:	d9f5      	bls.n	8003fd6 <memmove+0xa>
 8003fea:	1881      	adds	r1, r0, r2
 8003fec:	1ad2      	subs	r2, r2, r3
 8003fee:	42d3      	cmn	r3, r2
 8003ff0:	d100      	bne.n	8003ff4 <memmove+0x28>
 8003ff2:	bd10      	pop	{r4, pc}
 8003ff4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ff8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003ffc:	e7f7      	b.n	8003fee <memmove+0x22>

08003ffe <__malloc_lock>:
 8003ffe:	4770      	bx	lr

08004000 <__malloc_unlock>:
 8004000:	4770      	bx	lr
	...

08004004 <_free_r>:
 8004004:	b538      	push	{r3, r4, r5, lr}
 8004006:	4605      	mov	r5, r0
 8004008:	2900      	cmp	r1, #0
 800400a:	d043      	beq.n	8004094 <_free_r+0x90>
 800400c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004010:	1f0c      	subs	r4, r1, #4
 8004012:	2b00      	cmp	r3, #0
 8004014:	bfb8      	it	lt
 8004016:	18e4      	addlt	r4, r4, r3
 8004018:	f7ff fff1 	bl	8003ffe <__malloc_lock>
 800401c:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <_free_r+0x94>)
 800401e:	6813      	ldr	r3, [r2, #0]
 8004020:	4610      	mov	r0, r2
 8004022:	b933      	cbnz	r3, 8004032 <_free_r+0x2e>
 8004024:	6063      	str	r3, [r4, #4]
 8004026:	6014      	str	r4, [r2, #0]
 8004028:	4628      	mov	r0, r5
 800402a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800402e:	f7ff bfe7 	b.w	8004000 <__malloc_unlock>
 8004032:	42a3      	cmp	r3, r4
 8004034:	d90b      	bls.n	800404e <_free_r+0x4a>
 8004036:	6821      	ldr	r1, [r4, #0]
 8004038:	1862      	adds	r2, r4, r1
 800403a:	4293      	cmp	r3, r2
 800403c:	bf01      	itttt	eq
 800403e:	681a      	ldreq	r2, [r3, #0]
 8004040:	685b      	ldreq	r3, [r3, #4]
 8004042:	1852      	addeq	r2, r2, r1
 8004044:	6022      	streq	r2, [r4, #0]
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	6004      	str	r4, [r0, #0]
 800404a:	e7ed      	b.n	8004028 <_free_r+0x24>
 800404c:	4613      	mov	r3, r2
 800404e:	685a      	ldr	r2, [r3, #4]
 8004050:	b10a      	cbz	r2, 8004056 <_free_r+0x52>
 8004052:	42a2      	cmp	r2, r4
 8004054:	d9fa      	bls.n	800404c <_free_r+0x48>
 8004056:	6819      	ldr	r1, [r3, #0]
 8004058:	1858      	adds	r0, r3, r1
 800405a:	42a0      	cmp	r0, r4
 800405c:	d10b      	bne.n	8004076 <_free_r+0x72>
 800405e:	6820      	ldr	r0, [r4, #0]
 8004060:	4401      	add	r1, r0
 8004062:	1858      	adds	r0, r3, r1
 8004064:	4282      	cmp	r2, r0
 8004066:	6019      	str	r1, [r3, #0]
 8004068:	d1de      	bne.n	8004028 <_free_r+0x24>
 800406a:	6810      	ldr	r0, [r2, #0]
 800406c:	6852      	ldr	r2, [r2, #4]
 800406e:	4401      	add	r1, r0
 8004070:	6019      	str	r1, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
 8004074:	e7d8      	b.n	8004028 <_free_r+0x24>
 8004076:	d902      	bls.n	800407e <_free_r+0x7a>
 8004078:	230c      	movs	r3, #12
 800407a:	602b      	str	r3, [r5, #0]
 800407c:	e7d4      	b.n	8004028 <_free_r+0x24>
 800407e:	6820      	ldr	r0, [r4, #0]
 8004080:	1821      	adds	r1, r4, r0
 8004082:	428a      	cmp	r2, r1
 8004084:	bf01      	itttt	eq
 8004086:	6811      	ldreq	r1, [r2, #0]
 8004088:	6852      	ldreq	r2, [r2, #4]
 800408a:	1809      	addeq	r1, r1, r0
 800408c:	6021      	streq	r1, [r4, #0]
 800408e:	6062      	str	r2, [r4, #4]
 8004090:	605c      	str	r4, [r3, #4]
 8004092:	e7c9      	b.n	8004028 <_free_r+0x24>
 8004094:	bd38      	pop	{r3, r4, r5, pc}
 8004096:	bf00      	nop
 8004098:	20000d74 	.word	0x20000d74

0800409c <_realloc_r>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	4607      	mov	r7, r0
 80040a0:	4614      	mov	r4, r2
 80040a2:	460e      	mov	r6, r1
 80040a4:	b921      	cbnz	r1, 80040b0 <_realloc_r+0x14>
 80040a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80040aa:	4611      	mov	r1, r2
 80040ac:	f7ff b8a4 	b.w	80031f8 <_malloc_r>
 80040b0:	b922      	cbnz	r2, 80040bc <_realloc_r+0x20>
 80040b2:	f7ff ffa7 	bl	8004004 <_free_r>
 80040b6:	4625      	mov	r5, r4
 80040b8:	4628      	mov	r0, r5
 80040ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040bc:	f000 f848 	bl	8004150 <_malloc_usable_size_r>
 80040c0:	42a0      	cmp	r0, r4
 80040c2:	d20f      	bcs.n	80040e4 <_realloc_r+0x48>
 80040c4:	4621      	mov	r1, r4
 80040c6:	4638      	mov	r0, r7
 80040c8:	f7ff f896 	bl	80031f8 <_malloc_r>
 80040cc:	4605      	mov	r5, r0
 80040ce:	2800      	cmp	r0, #0
 80040d0:	d0f2      	beq.n	80040b8 <_realloc_r+0x1c>
 80040d2:	4631      	mov	r1, r6
 80040d4:	4622      	mov	r2, r4
 80040d6:	f7fe fe83 	bl	8002de0 <memcpy>
 80040da:	4631      	mov	r1, r6
 80040dc:	4638      	mov	r0, r7
 80040de:	f7ff ff91 	bl	8004004 <_free_r>
 80040e2:	e7e9      	b.n	80040b8 <_realloc_r+0x1c>
 80040e4:	4635      	mov	r5, r6
 80040e6:	e7e7      	b.n	80040b8 <_realloc_r+0x1c>

080040e8 <_read_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4605      	mov	r5, r0
 80040ec:	4608      	mov	r0, r1
 80040ee:	4611      	mov	r1, r2
 80040f0:	2200      	movs	r2, #0
 80040f2:	4c05      	ldr	r4, [pc, #20]	; (8004108 <_read_r+0x20>)
 80040f4:	6022      	str	r2, [r4, #0]
 80040f6:	461a      	mov	r2, r3
 80040f8:	f7fd f958 	bl	80013ac <_read>
 80040fc:	1c43      	adds	r3, r0, #1
 80040fe:	d102      	bne.n	8004106 <_read_r+0x1e>
 8004100:	6823      	ldr	r3, [r4, #0]
 8004102:	b103      	cbz	r3, 8004106 <_read_r+0x1e>
 8004104:	602b      	str	r3, [r5, #0]
 8004106:	bd38      	pop	{r3, r4, r5, pc}
 8004108:	20000eb8 	.word	0x20000eb8

0800410c <_fstat_r>:
 800410c:	b538      	push	{r3, r4, r5, lr}
 800410e:	2300      	movs	r3, #0
 8004110:	4c06      	ldr	r4, [pc, #24]	; (800412c <_fstat_r+0x20>)
 8004112:	4605      	mov	r5, r0
 8004114:	4608      	mov	r0, r1
 8004116:	4611      	mov	r1, r2
 8004118:	6023      	str	r3, [r4, #0]
 800411a:	f7fd f98b 	bl	8001434 <_fstat>
 800411e:	1c43      	adds	r3, r0, #1
 8004120:	d102      	bne.n	8004128 <_fstat_r+0x1c>
 8004122:	6823      	ldr	r3, [r4, #0]
 8004124:	b103      	cbz	r3, 8004128 <_fstat_r+0x1c>
 8004126:	602b      	str	r3, [r5, #0]
 8004128:	bd38      	pop	{r3, r4, r5, pc}
 800412a:	bf00      	nop
 800412c:	20000eb8 	.word	0x20000eb8

08004130 <_isatty_r>:
 8004130:	b538      	push	{r3, r4, r5, lr}
 8004132:	2300      	movs	r3, #0
 8004134:	4c05      	ldr	r4, [pc, #20]	; (800414c <_isatty_r+0x1c>)
 8004136:	4605      	mov	r5, r0
 8004138:	4608      	mov	r0, r1
 800413a:	6023      	str	r3, [r4, #0]
 800413c:	f7fd f989 	bl	8001452 <_isatty>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d102      	bne.n	800414a <_isatty_r+0x1a>
 8004144:	6823      	ldr	r3, [r4, #0]
 8004146:	b103      	cbz	r3, 800414a <_isatty_r+0x1a>
 8004148:	602b      	str	r3, [r5, #0]
 800414a:	bd38      	pop	{r3, r4, r5, pc}
 800414c:	20000eb8 	.word	0x20000eb8

08004150 <_malloc_usable_size_r>:
 8004150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004154:	1f18      	subs	r0, r3, #4
 8004156:	2b00      	cmp	r3, #0
 8004158:	bfbc      	itt	lt
 800415a:	580b      	ldrlt	r3, [r1, r0]
 800415c:	18c0      	addlt	r0, r0, r3
 800415e:	4770      	bx	lr

08004160 <_init>:
 8004160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004162:	bf00      	nop
 8004164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004166:	bc08      	pop	{r3}
 8004168:	469e      	mov	lr, r3
 800416a:	4770      	bx	lr

0800416c <_fini>:
 800416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416e:	bf00      	nop
 8004170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004172:	bc08      	pop	{r3}
 8004174:	469e      	mov	lr, r3
 8004176:	4770      	bx	lr
